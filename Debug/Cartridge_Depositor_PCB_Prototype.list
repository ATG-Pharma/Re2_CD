
Cartridge_Depositor_PCB_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080085d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  20000184  0800875c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800875c  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac4f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f9  00000000  00000000  0003ae03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000519f  00000000  00000000  00040a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a05  00000000  00000000  00045c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c432e  00000000  00000000  0005c63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012096a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  001209c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800804c 	.word	0x0800804c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	0800804c 	.word	0x0800804c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_SendCommand>:


//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <ILI9341_SendCommand+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <ILI9341_SendCommand+0x58>)
 80004d4:	8811      	ldrh	r1, [r2, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fa39 	bl	8001950 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <ILI9341_SendCommand+0x60>)
 80004e4:	8811      	ldrh	r1, [r2, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fa31 	bl	8001950 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80004ee:	f107 010f 	add.w	r1, r7, #15
 80004f2:	2305      	movs	r3, #5
 80004f4:	2201      	movs	r2, #1
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <ILI9341_SendCommand+0x64>)
 80004f8:	f003 f86f 	bl	80035da <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <ILI9341_SendCommand+0x60>)
 8000502:	8811      	ldrh	r1, [r2, #0]
 8000504:	2201      	movs	r2, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fa22 	bl	8001950 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000204 	.word	0x20000204
 8000518:	20000208 	.word	0x20000208
 800051c:	200001fc 	.word	0x200001fc
 8000520:	20000200 	.word	0x20000200
 8000524:	200001a4 	.word	0x200001a4

08000528 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <ILI9341_SendData+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <ILI9341_SendData+0x58>)
 800053c:	8811      	ldrh	r1, [r2, #0]
 800053e:	2201      	movs	r2, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fa05 	bl	8001950 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <ILI9341_SendData+0x5c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <ILI9341_SendData+0x60>)
 800054c:	8811      	ldrh	r1, [r2, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f9fd 	bl	8001950 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000556:	f107 010f 	add.w	r1, r7, #15
 800055a:	2305      	movs	r3, #5
 800055c:	2201      	movs	r2, #1
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9341_SendData+0x64>)
 8000560:	f003 f83b 	bl	80035da <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <ILI9341_SendData+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <ILI9341_SendData+0x60>)
 800056a:	8811      	ldrh	r1, [r2, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f9ee 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000204 	.word	0x20000204
 8000580:	20000208 	.word	0x20000208
 8000584:	200001fc 	.word	0x200001fc
 8000588:	20000200 	.word	0x20000200
 800058c:	200001a4 	.word	0x200001a4

08000590 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4623      	mov	r3, r4
 80005a0:	80fb      	strh	r3, [r7, #6]
 80005a2:	4603      	mov	r3, r0
 80005a4:	80bb      	strh	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
 80005aa:	4613      	mov	r3, r2
 80005ac:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f7ff ff86 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffb3 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffae 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffa7 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa2 	bl	8000528 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80005e4:	202b      	movs	r0, #43	; 0x2b
 80005e6:	f7ff ff6b 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff98 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff93 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000602:	883b      	ldrh	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff8c 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff87 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ff50 	bl	80004c0 <ILI9341_SendCommand>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	4853      	ldr	r0, [pc, #332]	; (800078c <ILI9341_Init+0x164>)
 800063e:	f007 fcef 	bl	8008020 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000642:	4a53      	ldr	r2, [pc, #332]	; (8000790 <ILI9341_Init+0x168>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000648:	4a52      	ldr	r2, [pc, #328]	; (8000794 <ILI9341_Init+0x16c>)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800064e:	4a52      	ldr	r2, [pc, #328]	; (8000798 <ILI9341_Init+0x170>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000654:	4a51      	ldr	r2, [pc, #324]	; (800079c <ILI9341_Init+0x174>)
 8000656:	8b3b      	ldrh	r3, [r7, #24]
 8000658:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <ILI9341_Init+0x168>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a4d      	ldr	r2, [pc, #308]	; (8000794 <ILI9341_Init+0x16c>)
 8000660:	8811      	ldrh	r1, [r2, #0]
 8000662:	2201      	movs	r2, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f973 	bl	8001950 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800066a:	4a4d      	ldr	r2, [pc, #308]	; (80007a0 <ILI9341_Init+0x178>)
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000670:	4a4c      	ldr	r2, [pc, #304]	; (80007a4 <ILI9341_Init+0x17c>)
 8000672:	8c3b      	ldrh	r3, [r7, #32]
 8000674:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000676:	8c3b      	ldrh	r3, [r7, #32]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	69f8      	ldr	r0, [r7, #28]
 800067e:	f001 f967 	bl	8001950 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff1c 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fe8f 	bl	80013ac <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800068e:	2028      	movs	r0, #40	; 0x28
 8000690:	f7ff ff16 	bl	80004c0 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000694:	20c0      	movs	r0, #192	; 0xc0
 8000696:	f7ff ff13 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f7ff ff44 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80006a0:	20c1      	movs	r0, #193	; 0xc1
 80006a2:	f7ff ff0d 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80006a6:	2011      	movs	r0, #17
 80006a8:	f7ff ff3e 	bl	8000528 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80006ac:	20c5      	movs	r0, #197	; 0xc5
 80006ae:	f7ff ff07 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80006b2:	2035      	movs	r0, #53	; 0x35
 80006b4:	f7ff ff38 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80006b8:	203e      	movs	r0, #62	; 0x3e
 80006ba:	f7ff ff35 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80006be:	20c7      	movs	r0, #199	; 0xc7
 80006c0:	f7ff fefe 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80006c4:	20be      	movs	r0, #190	; 0xbe
 80006c6:	f7ff ff2f 	bl	8000528 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f7ff fef8 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80006d0:	2048      	movs	r0, #72	; 0x48
 80006d2:	f7ff ff29 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80006d6:	203a      	movs	r0, #58	; 0x3a
 80006d8:	f7ff fef2 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80006dc:	2055      	movs	r0, #85	; 0x55
 80006de:	f7ff ff23 	bl	8000528 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80006e2:	20b1      	movs	r0, #177	; 0xb1
 80006e4:	f7ff feec 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff1d 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80006ee:	201f      	movs	r0, #31
 80006f0:	f7ff ff1a 	bl	8000528 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80006f4:	202a      	movs	r0, #42	; 0x2a
 80006f6:	f7ff fee3 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff14 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff11 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff0e 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800070c:	20ef      	movs	r0, #239	; 0xef
 800070e:	f7ff ff0b 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000712:	202b      	movs	r0, #43	; 0x2b
 8000714:	f7ff fed4 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff05 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff02 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff feff 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f7ff fefc 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000730:	2034      	movs	r0, #52	; 0x34
 8000732:	f7ff fec5 	bl	80004c0 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000736:	20b7      	movs	r0, #183	; 0xb7
 8000738:	f7ff fec2 	bl	80004c0 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800073c:	2007      	movs	r0, #7
 800073e:	f7ff fef3 	bl	8000528 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000742:	20b6      	movs	r0, #182	; 0xb6
 8000744:	f7ff febc 	bl	80004c0 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000748:	200a      	movs	r0, #10
 800074a:	f7ff feed 	bl	8000528 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800074e:	2082      	movs	r0, #130	; 0x82
 8000750:	f7ff feea 	bl	8000528 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000754:	2027      	movs	r0, #39	; 0x27
 8000756:	f7ff fee7 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fee4 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000760:	2011      	movs	r0, #17
 8000762:	f7ff fead 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fe20 	bl	80013ac <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 800076c:	2029      	movs	r0, #41	; 0x29
 800076e:	f7ff fea7 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f000 fe1a 	bl	80013ac <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000778:	202c      	movs	r0, #44	; 0x2c
 800077a:	f7ff fea1 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fe14 	bl	80013ac <HAL_Delay>
 }
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001a4 	.word	0x200001a4
 8000790:	200001fc 	.word	0x200001fc
 8000794:	20000200 	.word	0x20000200
 8000798:	20000204 	.word	0x20000204
 800079c:	20000208 	.word	0x20000208
 80007a0:	2000020c 	.word	0x2000020c
 80007a4:	20000210 	.word	0x20000210

080007a8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	80bb      	strh	r3, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	88fa      	ldrh	r2, [r7, #6]
 80007be:	88b9      	ldrh	r1, [r7, #4]
 80007c0:	88f8      	ldrh	r0, [r7, #6]
 80007c2:	f7ff fee5 	bl	8000590 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff feaa 	bl	8000528 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fea5 	bl	8000528 <ILI9341_SendData>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80007f2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80007f6:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <ILI9341_Fill+0x84>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d003      	beq.n	800080c <ILI9341_Fill+0x24>
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <ILI9341_Fill+0x84>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d107      	bne.n	800081c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800080c:	f240 133f 	movw	r3, #319	; 0x13f
 8000810:	22ef      	movs	r2, #239	; 0xef
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff febb 	bl	8000590 <ILI9341_SetCursorPosition>
 800081a:	e00e      	b.n	800083a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <ILI9341_Fill+0x84>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d003      	beq.n	800082c <ILI9341_Fill+0x44>
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <ILI9341_Fill+0x84>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d116      	bne.n	800085a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800082c:	23ef      	movs	r3, #239	; 0xef
 800082e:	f240 123f 	movw	r2, #319	; 0x13f
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff feab 	bl	8000590 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800083a:	e00e      	b.n	800085a <ILI9341_Fill+0x72>
			n--;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3b01      	subs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	b29b      	uxth	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe6c 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe67 	bl	8000528 <ILI9341_SendData>
	while (n) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1ed      	bne.n	800083c <ILI9341_Fill+0x54>
	}
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	3301      	adds	r3, #1
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	1a8a      	subs	r2, r1, r2
 800088c:	3201      	adds	r2, #1
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800089a:	d902      	bls.n	80008a2 <ILI9341_Fill_Rect+0x32>
 800089c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008a0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b298      	uxth	r0, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f7ff fe6d 	bl	8000590 <ILI9341_SetCursorPosition>
	while (n) {
 80008b6:	e00e      	b.n	80008d6 <ILI9341_Fill_Rect+0x66>
			n--;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80008be:	8c3b      	ldrh	r3, [r7, #32]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe2e 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80008cc:	8c3b      	ldrh	r3, [r7, #32]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe29 	bl	8000528 <ILI9341_SendData>
	while (n) {
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ed      	bne.n	80008b8 <ILI9341_Fill_Rect+0x48>
	}
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80008e8:	b5b0      	push	{r4, r5, r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
 8000902:	4613      	mov	r3, r2
 8000904:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000906:	4b98      	ldr	r3, [pc, #608]	; (8000b68 <ILI9341_drawChar+0x280>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d003      	beq.n	8000916 <ILI9341_drawChar+0x2e>
 800090e:	4b96      	ldr	r3, [pc, #600]	; (8000b68 <ILI9341_drawChar+0x280>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d11f      	bne.n	8000956 <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091a:	2bef      	cmp	r3, #239	; 0xef
 800091c:	f300 811d 	bgt.w	8000b5a <ILI9341_drawChar+0x272>
 8000920:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000924:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000928:	f280 8117 	bge.w	8000b5a <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800092c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000930:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 800093e:	2b00      	cmp	r3, #0
 8000940:	f340 810b 	ble.w	8000b5a <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc21      	bgt.n	8000998 <ILI9341_drawChar+0xb0>
    return;
 8000954:	e101      	b.n	8000b5a <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800095a:	2bef      	cmp	r3, #239	; 0xef
 800095c:	f300 80ff 	bgt.w	8000b5e <ILI9341_drawChar+0x276>
 8000960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000964:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000968:	f280 80f9 	bge.w	8000b5e <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800096c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000970:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 800097e:	2b00      	cmp	r3, #0
 8000980:	f340 80ed 	ble.w	8000b5e <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000984:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000990:	2b00      	cmp	r3, #0
 8000992:	f340 80e4 	ble.w	8000b5e <ILI9341_drawChar+0x276>
 8000996:	e000      	b.n	800099a <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000998:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800099a:	4b74      	ldr	r3, [pc, #464]	; (8000b6c <ILI9341_drawChar+0x284>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <ILI9341_drawChar+0xcc>
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2baf      	cmp	r3, #175	; 0xaf
 80009ac:	d902      	bls.n	80009b4 <ILI9341_drawChar+0xcc>
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	3301      	adds	r3, #1
 80009b2:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e0c9      	b.n	8000b4e <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d102      	bne.n	80009c8 <ILI9341_drawChar+0xe0>
      line = 0x0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]
 80009c6:	e00b      	b.n	80009e0 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 80009c8:	78fa      	ldrb	r2, [r7, #3]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a65      	ldr	r2, [pc, #404]	; (8000b70 <ILI9341_drawChar+0x288>)
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	737b      	strb	r3, [r7, #13]
 80009e4:	e0a8      	b.n	8000b38 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d04b      	beq.n	8000a88 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 80009f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d110      	bne.n	8000a1a <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 80009f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	4413      	add	r3, r2
 8000a02:	b298      	uxth	r0, r3
 8000a04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	883a      	ldrh	r2, [r7, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	f7ff fec8 	bl	80007a8 <ILI9341_DrawPixel>
 8000a18:	e085      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a26:	fb01 f303 	mul.w	r3, r1, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a36:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a3a:	fb01 f303 	mul.w	r3, r1, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	461c      	mov	r4, r3
 8000a42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	441a      	add	r2, r3
 8000a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a50:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a66:	441a      	add	r2, r3
 8000a68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a6c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a70:	fb01 f303 	mul.w	r3, r1, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	883b      	ldrh	r3, [r7, #0]
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	462a      	mov	r2, r5
 8000a80:	4621      	mov	r1, r4
 8000a82:	f7ff fef5 	bl	8000870 <ILI9341_Fill_Rect>
 8000a86:	e04e      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8000a88:	8c3a      	ldrh	r2, [r7, #32]
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d04a      	beq.n	8000b26 <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000a90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d110      	bne.n	8000aba <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	8c3a      	ldrh	r2, [r7, #32]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f7ff fe78 	bl	80007a8 <ILI9341_DrawPixel>
 8000ab8:	e035      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000aba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ac6:	fb01 f303 	mul.w	r3, r1, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ad6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ada:	fb01 f303 	mul.w	r3, r1, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	441a      	add	r2, r3
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	461d      	mov	r5, r3
 8000afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b06:	441a      	add	r2, r3
 8000b08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b0c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	461a      	mov	r2, r3
 8000b18:	8c3b      	ldrh	r3, [r7, #32]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	462a      	mov	r2, r5
 8000b20:	4621      	mov	r1, r4
 8000b22:	f7ff fea5 	bl	8000870 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000b2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	737b      	strb	r3, [r7, #13]
 8000b38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	f77f af52 	ble.w	80009e6 <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	f77f af31 	ble.w	80009ba <ILI9341_drawChar+0xd2>
 8000b58:	e002      	b.n	8000b60 <ILI9341_drawChar+0x278>
    return;
 8000b5a:	bf00      	nop
 8000b5c:	e000      	b.n	8000b60 <ILI9341_drawChar+0x278>
    return;
 8000b5e:	bf00      	nop
    }
  }
}
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bdb0      	pop	{r4, r5, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200001a0 	.word	0x200001a0
 8000b70:	080080b8 	.word	0x080080b8

08000b74 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	817b      	strh	r3, [r7, #10]
 8000b86:	460b      	mov	r3, r1
 8000b88:	813b      	strh	r3, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	0052      	lsls	r2, r2, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	82fb      	strh	r3, [r7, #22]
 8000ba4:	e01a      	b.n	8000bdc <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	8afa      	ldrh	r2, [r7, #22]
 8000baa:	fb12 f303 	smulbb	r3, r2, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	897b      	ldrh	r3, [r7, #10]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b218      	sxth	r0, r3
 8000bb8:	8afb      	ldrh	r3, [r7, #22]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	88fc      	ldrh	r4, [r7, #6]
 8000bc2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	f7ff fe89 	bl	80008e8 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	82fb      	strh	r3, [r7, #22]
 8000bdc:	8afb      	ldrh	r3, [r7, #22]
 8000bde:	2b27      	cmp	r3, #39	; 0x27
 8000be0:	d805      	bhi.n	8000bee <ILI9341_printText+0x7a>
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1db      	bne.n	8000ba6 <ILI9341_printText+0x32>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}
	...

08000bf8 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d832      	bhi.n	8000c70 <ILI9341_setRotation+0x78>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <ILI9341_setRotation+0x18>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c35 	.word	0x08000c35
 8000c18:	08000c49 	.word	0x08000c49
 8000c1c:	08000c5d 	.word	0x08000c5d
	{
		case 1:
			rotationNum = 1;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f7ff fc4a 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c2c:	2088      	movs	r0, #136	; 0x88
 8000c2e:	f7ff fc7b 	bl	8000528 <ILI9341_SendData>
			break;
 8000c32:	e027      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c3a:	2036      	movs	r0, #54	; 0x36
 8000c3c:	f7ff fc40 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f7ff fc71 	bl	8000528 <ILI9341_SendData>
			break;
 8000c46:	e01d      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f7ff fc36 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000c54:	2048      	movs	r0, #72	; 0x48
 8000c56:	f7ff fc67 	bl	8000528 <ILI9341_SendData>
			break;
 8000c5a:	e013      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c62:	2036      	movs	r0, #54	; 0x36
 8000c64:	f7ff fc2c 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c68:	20e8      	movs	r0, #232	; 0xe8
 8000c6a:	f7ff fc5d 	bl	8000528 <ILI9341_SendData>
			break;
 8000c6e:	e009      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c76:	2036      	movs	r0, #54	; 0x36
 8000c78:	f7ff fc22 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c7c:	2088      	movs	r0, #136	; 0x88
 8000c7e:	f7ff fc53 	bl	8000528 <ILI9341_SendData>
			break;
 8000c82:	bf00      	nop
	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f000 fb17 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f841 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 f957 	bl	8000f50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca2:	f000 f8a9 	bl	8000df8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000ca6:	f006 fca3 	bl	80075f0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000caa:	f000 f8db 	bl	8000e64 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <main+0x7c>)
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <main+0x7c>)
 8000cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc4:	4911      	ldr	r1, [pc, #68]	; (8000d0c <main+0x7c>)
 8000cc6:	4812      	ldr	r0, [pc, #72]	; (8000d10 <main+0x80>)
 8000cc8:	f7ff fcae 	bl	8000628 <ILI9341_Init>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1); //Keeps screen on
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <main+0x7c>)
 8000cd2:	f000 fe3d 	bl	8001950 <HAL_GPIO_WritePin>
  ILI9341_setRotation(1); //Rotation vertical, pins at top
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff ff8e 	bl	8000bf8 <ILI9341_setRotation>
  //TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
  ILI9341_Fill(COLOR_BLUE);
 8000cdc:	201f      	movs	r0, #31
 8000cde:	f7ff fd83 	bl	80007e8 <ILI9341_Fill>
  ILI9341_printText("Hello World", 20, 40, COLOR_WHITE, COLOR_BLACK, 2);
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <main+0x84>)
 8000cf4:	f7ff ff3e 	bl	8000b74 <ILI9341_printText>
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET); //Initialize motor direction to CW
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <main+0x88>)
 8000cfe:	f000 fe27 	bl	8001950 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start motor pulse
 8000d02:	2100      	movs	r1, #0
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <main+0x8c>)
 8000d06:	f002 ff17 	bl	8003b38 <HAL_TIM_PWM_Start>
  	}
  */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <main+0x7a>
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	2000047c 	.word	0x2000047c
 8000d14:	08008064 	.word	0x08008064
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	20000434 	.word	0x20000434

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	; 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 f984 	bl	800803c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <SystemClock_Config+0xd4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <SystemClock_Config+0xd4>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <SystemClock_Config+0xd4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000d9c:	2390      	movs	r3, #144	; 0x90
 8000d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000da4:	2305      	movs	r3, #5
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 ff6b 	bl	8002c88 <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000db8:	f000 f944 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 f9ce 	bl	8003178 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000de2:	f000 f92f 	bl	8001044 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	; 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <MX_SPI1_Init+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e44:	220a      	movs	r2, #10
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e4a:	f002 fb3d 	bl	80034c8 <HAL_SPI_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e54:	f000 f8f6 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000047c 	.word	0x2000047c
 8000e60:	40013000 	.word	0x40013000

08000e64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <MX_TIM4_Init+0xe8>)
 8000e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000e9c:	224f      	movs	r2, #79	; 0x4f
 8000e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000ea8:	2231      	movs	r2, #49	; 0x31
 8000eaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eb8:	4823      	ldr	r0, [pc, #140]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000eba:	f002 fd95 	bl	80039e8 <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000ec4:	f000 f8be 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000ed6:	f002 ffb5 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ee0:	f000 f8b0 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ee4:	4818      	ldr	r0, [pc, #96]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000ee6:	f002 fdce 	bl	8003a86 <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 f8a8 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4619      	mov	r1, r3
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000f04:	f003 fb72 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000f0e:	f000 f899 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f12:	2360      	movs	r3, #96	; 0x60
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000f16:	2331      	movs	r3, #49	; 0x31
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000f2a:	f002 fecd 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000f34:	f000 f886 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM4_Init+0xe4>)
 8000f3a:	f000 f91b 	bl	8001174 <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3738      	adds	r7, #56	; 0x38
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000434 	.word	0x20000434
 8000f4c:	40000800 	.word	0x40000800

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_GPIO_Init+0xec>)
 8000fdc:	f000 fcb8 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000fe6:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_GPIO_Init+0xec>)
 8000fe8:	f000 fcb2 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_GPIO_Init+0xf0>)
 8000ff2:	f000 fcad 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000ff6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <MX_GPIO_Init+0xec>)
 8001010:	f000 fb02 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0xf0>)
 800102c:	f000 faf4 	bl	8001618 <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	40020400 	.word	0x40020400

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_MspInit+0x4c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x4c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_SPI_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23e0      	movs	r3, #224	; 0xe0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110a:	2305      	movs	r3, #5
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_SPI_MspInit+0x8c>)
 8001116:	f000 fa7f 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013000 	.word	0x40013000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40000800 	.word	0x40000800
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11d      	bne.n	80011d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PUL_Pin;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PUL_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_TIM_MspPostInit+0x70>)
 80011ce:	f000 fa23 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40000800 	.word	0x40000800
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f89a 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <OTG_FS_IRQHandler+0x10>)
 8001242:	f000 fcee 	bl	8001c22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200019a8 	.word	0x200019a8

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f006 fe99 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fcf3 	bl	8000c90 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80012b8:	080085d8 	.word	0x080085d8
  ldr r2, =_sbss
 80012bc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80012c0:	20001db0 	.word	0x20001db0

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f94f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fea8 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f967 	bl	80015fe <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f92f 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000004 	.word	0x20000004
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c
 8001390:	200004d4 	.word	0x200004d4

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200004d4 	.word	0x200004d4

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff3e 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff31 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e16b      	b.n	800190c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 815a 	bne.w	8001906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80b4 	beq.w	8001906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_GPIO_Init+0x310>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x314>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x318>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x31c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x328>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x330>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x20a>
 800181e:	2307      	movs	r3, #7
 8001820:	e00e      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001822:	2308      	movs	r3, #8
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001826:	2306      	movs	r3, #6
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	; (8001928 <HAL_GPIO_Init+0x310>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_GPIO_Init+0x334>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_GPIO_Init+0x334>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_GPIO_Init+0x334>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <HAL_GPIO_Init+0x334>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_GPIO_Init+0x334>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_GPIO_Init+0x334>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f ae90 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001984:	b08f      	sub	sp, #60	; 0x3c
 8001986:	af0a      	add	r7, sp, #40	; 0x28
 8001988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e10f      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f005 fffe 	bl	80079b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 ff9b 	bl	800490e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	687e      	ldr	r6, [r7, #4]
 80019e0:	466d      	mov	r5, sp
 80019e2:	f106 0410 	add.w	r4, r6, #16
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f002 fe72 	bl	80046e4 <USB_CoreInit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0d0      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 ff89 	bl	8004930 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e04a      	b.n	8001aba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	333d      	adds	r3, #61	; 0x3d
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	333c      	adds	r3, #60	; 0x3c
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	b298      	uxth	r0, r3
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3342      	adds	r3, #66	; 0x42
 8001a60:	4602      	mov	r2, r0
 8001a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	333f      	adds	r3, #63	; 0x3f
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3344      	adds	r3, #68	; 0x44
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3348      	adds	r3, #72	; 0x48
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3350      	adds	r3, #80	; 0x50
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3af      	bcc.n	8001a24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e044      	b.n	8001b54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3b5      	bcc.n	8001aca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	687e      	ldr	r6, [r7, #4]
 8001b66:	466d      	mov	r5, sp
 8001b68:	f106 0410 	add.w	r4, r6, #16
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7c:	1d33      	adds	r3, r6, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f002 feff 	bl	8004984 <USB_DevInit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00d      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 ff47 	bl	8005a40 <USB_DevDisconnect>

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_Start+0x1c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e020      	b.n	8001c1a <HAL_PCD_Start+0x5e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d109      	bne.n	8001bfc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 fe73 	bl	80048ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fef7 	bl	80059fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b08d      	sub	sp, #52	; 0x34
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 ffb5 	bl	8005ba8 <USB_GetMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 839d 	bne.w	8002380 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 ff19 	bl	8005a82 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8393 	beq.w	800237e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 ff10 	bl	8005a82 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d107      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f002 0202 	and.w	r2, r2, #2
 8001c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fefe 	bl	8005a82 <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d161      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0210 	bic.w	r2, r2, #16
 8001c9e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	0c5b      	lsrs	r3, r3, #17
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d124      	bne.n	8001d16 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d035      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6a38      	ldr	r0, [r7, #32]
 8001cec:	f003 fd64 	bl	80057b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfc:	441a      	add	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	441a      	add	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	e016      	b.n	8001d44 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	0c5b      	lsrs	r3, r3, #17
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d110      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6a38      	ldr	r0, [r7, #32]
 8001d2e:	f003 fd43 	bl	80057b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d3e:	441a      	add	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0210 	orr.w	r2, r2, #16
 8001d52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fe92 	bl	8005a82 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d68:	d16e      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fe98 	bl	8005aa8 <USB_ReadDevAllOutEpInterrupt>
 8001d78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d7a:	e062      	b.n	8001e42 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d057      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 febd 	bl	8005b10 <USB_ReadDevOutEPInterrupt>
 8001d96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fdb0 	bl	800291c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 feaa 	bl	8002b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df6:	461a      	mov	r2, r3
 8001df8:	2310      	movs	r3, #16
 8001dfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e12:	461a      	mov	r2, r3
 8001e14:	2320      	movs	r3, #32
 8001e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	3301      	adds	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d199      	bne.n	8001d7c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fe18 	bl	8005a82 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e5c:	f040 80c0 	bne.w	8001fe0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fe39 	bl	8005adc <USB_ReadDevAllInEpInterrupt>
 8001e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e70:	e0b2      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a7 	beq.w	8001fcc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fe5f 	bl	8005b4c <USB_ReadDevInEPInterrupt>
 8001e8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d057      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69f9      	ldr	r1, [r7, #28]
 8001eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001eba:	4013      	ands	r3, r2
 8001ebc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2301      	movs	r3, #1
 8001ece:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d132      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3348      	adds	r3, #72	; 0x48
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4403      	add	r3, r0
 8001ef8:	3344      	adds	r3, #68	; 0x44
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4419      	add	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4403      	add	r3, r0
 8001f0c:	3348      	adds	r3, #72	; 0x48
 8001f0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d113      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x31c>
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d108      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f36:	461a      	mov	r2, r3
 8001f38:	2101      	movs	r1, #1
 8001f3a:	f003 fe67 	bl	8005c0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f005 fdb4 	bl	8007ab2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f60:	461a      	mov	r2, r3
 8001f62:	2308      	movs	r3, #8
 8001f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2310      	movs	r3, #16
 8001f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fc1b 	bl	8002802 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f47f af49 	bne.w	8001e72 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fd4c 	bl	8005a82 <USB_ReadInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ff4:	d122      	bne.n	800203c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fe26 	bl	8002c70 <HAL_PCDEx_LPM_Callback>
 8002024:	e002      	b.n	800202c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f005 fdba 	bl	8007ba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800203a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fd1e 	bl	8005a82 <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002050:	d112      	bne.n	8002078 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f005 fd76 	bl	8007b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002076:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fd00 	bl	8005a82 <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208c:	f040 80c7 	bne.w	800221e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2110      	movs	r1, #16
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fdce 	bl	8004c4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b4:	e056      	b.n	8002164 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c2:	461a      	mov	r2, r3
 80020c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020e8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020fa:	0151      	lsls	r1, r2, #5
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	440a      	add	r2, r1
 8002100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002108:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800211c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	440a      	add	r2, r1
 8002134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002138:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800213c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	440a      	add	r2, r1
 8002154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002158:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800215c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	3301      	adds	r3, #1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d3a3      	bcc.n	80020b6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002180:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219a:	f043 030b 	orr.w	r3, r3, #11
 800219e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b0:	f043 030b 	orr.w	r3, r3, #11
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	e015      	b.n	80021e4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021de:	f043 030b 	orr.w	r3, r3, #11
 80021e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002208:	461a      	mov	r2, r3
 800220a:	f003 fcff 	bl	8005c0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800221c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fc2d 	bl	8005a82 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002232:	d124      	bne.n	800227e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fcc3 	bl	8005bc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fd63 	bl	8004d0e <USB_GetDevSpeed>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681c      	ldr	r4, [r3, #0]
 8002254:	f001 f92c 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 8002258:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f002 faa0 	bl	80047a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f005 fc4a 	bl	8007b02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800227c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fbfd 	bl	8005a82 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d10a      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fc27 	bl	8007ae6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f002 0208 	and.w	r2, r2, #8
 80022a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fbe8 	bl	8005a82 <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022bc:	d10f      	bne.n	80022de <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f005 fc89 	bl	8007be0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fbcd 	bl	8005a82 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f2:	d10f      	bne.n	8002314 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 fc5c 	bl	8007bbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fbb2 	bl	8005a82 <USB_ReadInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d10a      	bne.n	8002340 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f005 fc6a 	bl	8007c04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800233e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fb9c 	bl	8005a82 <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d115      	bne.n	8002380 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f005 fc5a 	bl	8007c20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	e000      	b.n	8002380 <HAL_PCD_IRQHandler+0x75e>
      return;
 800237e:	bf00      	nop
    }
  }
}
 8002380:	3734      	adds	r7, #52	; 0x34
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}

08002386 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_SetAddress+0x1a>
 800239c:	2302      	movs	r3, #2
 800239e:	e013      	b.n	80023c8 <HAL_PCD_SetAddress+0x42>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fafa 	bl	80059b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	70fb      	strb	r3, [r7, #3]
 80023e2:	460b      	mov	r3, r1
 80023e4:	803b      	strh	r3, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da0f      	bge.n	8002416 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	3338      	adds	r3, #56	; 0x38
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	705a      	strb	r2, [r3, #1]
 8002414:	e00f      	b.n	8002436 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	3304      	adds	r3, #4
 800242e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002442:	883a      	ldrh	r2, [r7, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	78ba      	ldrb	r2, [r7, #2]
 800244c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d102      	bne.n	800246c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_EP_Open+0xaa>
 8002476:	2302      	movs	r3, #2
 8002478:	e00e      	b.n	8002498 <HAL_PCD_EP_Open+0xc8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fc65 	bl	8004d58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002496:	7afb      	ldrb	r3, [r7, #11]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da0f      	bge.n	80024d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	705a      	strb	r2, [r3, #1]
 80024d2:	e00f      	b.n	80024f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_PCD_EP_Close+0x6e>
 800250a:	2302      	movs	r3, #2
 800250c:	e00e      	b.n	800252c <HAL_PCD_EP_Close+0x8c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fca3 	bl	8004e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	460b      	mov	r3, r1
 8002542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f003 020f 	and.w	r2, r3, #15
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	3304      	adds	r3, #4
 800255c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2200      	movs	r2, #0
 8002574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	b2da      	uxtb	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6979      	ldr	r1, [r7, #20]
 80025a8:	f002 ff7e 	bl	80054a8 <USB_EP0StartXfer>
 80025ac:	e008      	b.n	80025c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6979      	ldr	r1, [r7, #20]
 80025bc:	f002 fd30 	bl	8005020 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025ec:	681b      	ldr	r3, [r3, #0]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	460b      	mov	r3, r1
 8002608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3338      	adds	r3, #56	; 0x38
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2201      	movs	r2, #1
 8002638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	b2da      	uxtb	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6979      	ldr	r1, [r7, #20]
 800266c:	f002 ff1c 	bl	80054a8 <USB_EP0StartXfer>
 8002670:	e008      	b.n	8002684 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	f002 fcce 	bl	8005020 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d901      	bls.n	80026ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e050      	b.n	800274e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da0f      	bge.n	80026d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3338      	adds	r3, #56	; 0x38
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	705a      	strb	r2, [r3, #1]
 80026d2:	e00d      	b.n	80026f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	3304      	adds	r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_PCD_EP_SetStall+0x82>
 800270c:	2302      	movs	r3, #2
 800270e:	e01e      	b.n	800274e <HAL_PCD_EP_SetStall+0xc0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f873 	bl	800580a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800273e:	461a      	mov	r2, r3
 8002740:	f003 fa64 	bl	8005c0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d901      	bls.n	8002774 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e042      	b.n	80027fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da0f      	bge.n	800279c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3338      	adds	r3, #56	; 0x38
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	705a      	strb	r2, [r3, #1]
 800279a:	e00f      	b.n	80027bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_PCD_EP_ClrStall+0x86>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00e      	b.n	80027fa <HAL_PCD_EP_ClrStall+0xa4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 f87b 	bl	80058e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b08a      	sub	sp, #40	; 0x28
 8002806:	af02      	add	r7, sp, #8
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	3338      	adds	r3, #56	; 0x38
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	3304      	adds	r3, #4
 8002828:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	429a      	cmp	r2, r3
 8002834:	d901      	bls.n	800283a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06c      	b.n	8002914 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d902      	bls.n	8002856 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3303      	adds	r3, #3
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285e:	e02b      	b.n	80028b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	429a      	cmp	r2, r3
 8002874:	d902      	bls.n	800287c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3303      	adds	r3, #3
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002894:	b2db      	uxtb	r3, r3
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4603      	mov	r3, r0
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f002 ff57 	bl	800574e <USB_WritePacket>

    ep->xfer_buff  += len;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	441a      	add	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d809      	bhi.n	80028e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d203      	bcs.n	80028e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1be      	bne.n	8002860 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d811      	bhi.n	8002912 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	2201      	movs	r2, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	43db      	mvns	r3, r3
 8002908:	6939      	ldr	r1, [r7, #16]
 800290a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800290e:	4013      	ands	r3, r2
 8002910:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	333c      	adds	r3, #60	; 0x3c
 8002934:	3304      	adds	r3, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b01      	cmp	r3, #1
 8002950:	f040 80a0 	bne.w	8002a94 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a72      	ldr	r2, [pc, #456]	; (8002b2c <PCD_EP_OutXfrComplete_int+0x210>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f240 80dd 	bls.w	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d7 	beq.w	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002980:	461a      	mov	r2, r3
 8002982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002986:	6093      	str	r3, [r2, #8]
 8002988:	e0cb      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	2320      	movs	r3, #32
 80029a4:	6093      	str	r3, [r2, #8]
 80029a6:	e0bc      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 80b7 	bne.w	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a5d      	ldr	r2, [pc, #372]	; (8002b2c <PCD_EP_OutXfrComplete_int+0x210>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d90f      	bls.n	80029dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d2:	461a      	mov	r2, r3
 80029d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e0a2      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a02:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4403      	add	r3, r0
 8002a12:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a16:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4403      	add	r3, r0
 8002a3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4419      	add	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4403      	add	r3, r0
 8002a50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a54:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d114      	bne.n	8002a86 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2101      	movs	r1, #1
 8002a82:	f003 f8c3 	bl	8005c0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f004 fff5 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
 8002a92:	e046      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d124      	bne.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab8:	6093      	str	r3, [r2, #8]
 8002aba:	e032      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f004 ffcc 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
 8002ae4:	e01d      	b.n	8002b22 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d114      	bne.n	8002b16 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2100      	movs	r1, #0
 8002b12:	f003 f87b 	bl	8005c0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f004 ffad 	bl	8007a7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	4f54300a 	.word	0x4f54300a
 8002b30:	4f54310a 	.word	0x4f54310a

08002b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	333c      	adds	r3, #60	; 0x3c
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d90e      	bls.n	8002b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f004 ff65 	bl	8007a58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d90c      	bls.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2101      	movs	r1, #1
 8002bac:	f003 f82e 	bl	8005c0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	4f54300a 	.word	0x4f54300a

08002bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bde:	883b      	ldrh	r3, [r7, #0]
 8002be0:	0419      	lsls	r1, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
 8002bec:	e028      	b.n	8002c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e00d      	b.n	8002c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	3340      	adds	r3, #64	; 0x40
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d3ec      	bcc.n	8002c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c28:	883b      	ldrh	r3, [r7, #0]
 8002c2a:	0418      	lsls	r0, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4302      	orrs	r2, r0
 8002c38:	3340      	adds	r3, #64	; 0x40
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e264      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	4ba3      	ldr	r3, [pc, #652]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b99      	ldr	r3, [pc, #612]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e23f      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a90      	ldr	r2, [pc, #576]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a8a      	ldr	r2, [pc, #552]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002d20:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a83      	ldr	r2, [pc, #524]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a80      	ldr	r2, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fb28 	bl	8001394 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fb24 	bl	8001394 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e204      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb14 	bl	8001394 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fb10 	bl	8001394 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1f0      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002daa:	4b62      	ldr	r3, [pc, #392]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d11c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1c4      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4952      	ldr	r1, [pc, #328]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e03a      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x2b0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fac9 	bl	8001394 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fac5 	bl	8001394 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1a5      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4940      	ldr	r1, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_OscConfig+0x2b0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe faa8 	bl	8001394 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fe faa4 	bl	8001394 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e184      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d030      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_RCC_OscConfig+0x2b4>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fa88 	bl	8001394 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fe fa84 	bl	8001394 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e164      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x200>
 8002ea6:	e015      	b.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_OscConfig+0x2b4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fa71 	bl	8001394 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fa6d 	bl	8001394 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e14d      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a0 	beq.w	8003022 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_OscConfig+0x2b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d121      	bne.n	8002f62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCC_OscConfig+0x2b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_RCC_OscConfig+0x2b8>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fa33 	bl	8001394 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	e011      	b.n	8002f56 <HAL_RCC_OscConfig+0x2ce>
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470000 	.word	0x42470000
 8002f3c:	42470e80 	.word	0x42470e80
 8002f40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f44:	f7fe fa26 	bl	8001394 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e106      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x4e4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
 8002f6a:	4b81      	ldr	r3, [pc, #516]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	e01c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x32a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d10c      	bne.n	8002f9a <HAL_RCC_OscConfig+0x312>
 8002f80:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e00b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x32a>
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a74      	ldr	r2, [pc, #464]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d015      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe f9eb 	bl	8001394 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe f9e7 	bl	8001394 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0c5      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd8:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ee      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x33a>
 8002fe4:	e014      	b.n	8003010 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f9d5 	bl	8001394 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f9d1 	bl	8001394 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0af      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003004:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ee      	bne.n	8002fee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b56      	ldr	r3, [pc, #344]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a55      	ldr	r2, [pc, #340]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 800301c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 809b 	beq.w	8003162 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d05c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d141      	bne.n	80030c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fe f9a5 	bl	8001394 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe f9a1 	bl	8001394 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e081      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	4937      	ldr	r1, [pc, #220]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe f97a 	bl	8001394 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe f976 	bl	8001394 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e056      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x41c>
 80030c2:	e04e      	b.n	8003162 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe f963 	bl	8001394 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f95f 	bl	8001394 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e03f      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x44a>
 80030f0:	e037      	b.n	8003162 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e032      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d028      	beq.n	800315e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d121      	bne.n	800315e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d11a      	bne.n	800315e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312e:	4013      	ands	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003134:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d107      	bne.n	800315e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40007000 	.word	0x40007000
 8003170:	40023800 	.word	0x40023800
 8003174:	42470060 	.word	0x42470060

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe f894 	bl	8001394 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe f890 	bl	8001394 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd fff4 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	080085b8 	.word	0x080085b8
 800333c:	20000004 	.word	0x20000004
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334a:	2100      	movs	r1, #0
 800334c:	6079      	str	r1, [r7, #4]
 800334e:	2100      	movs	r1, #0
 8003350:	60f9      	str	r1, [r7, #12]
 8003352:	2100      	movs	r1, #0
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003356:	2100      	movs	r1, #0
 8003358:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335a:	4952      	ldr	r1, [pc, #328]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800335c:	6889      	ldr	r1, [r1, #8]
 800335e:	f001 010c 	and.w	r1, r1, #12
 8003362:	2908      	cmp	r1, #8
 8003364:	d00d      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3e>
 8003366:	2908      	cmp	r1, #8
 8003368:	f200 8094 	bhi.w	8003494 <HAL_RCC_GetSysClockFreq+0x150>
 800336c:	2900      	cmp	r1, #0
 800336e:	d002      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x32>
 8003370:	2904      	cmp	r1, #4
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x38>
 8003374:	e08e      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003376:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003378:	60bb      	str	r3, [r7, #8]
       break;
 800337a:	e08e      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCC_GetSysClockFreq+0x168>)
 800337e:	60bb      	str	r3, [r7, #8]
      break;
 8003380:	e08b      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003382:	4948      	ldr	r1, [pc, #288]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003384:	6849      	ldr	r1, [r1, #4]
 8003386:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800338a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338c:	4945      	ldr	r1, [pc, #276]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800338e:	6849      	ldr	r1, [r1, #4]
 8003390:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003394:	2900      	cmp	r1, #0
 8003396:	d024      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003398:	4942      	ldr	r1, [pc, #264]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800339a:	6849      	ldr	r1, [r1, #4]
 800339c:	0989      	lsrs	r1, r1, #6
 800339e:	4608      	mov	r0, r1
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033a8:	f04f 0500 	mov.w	r5, #0
 80033ac:	ea00 0204 	and.w	r2, r0, r4
 80033b0:	ea01 0305 	and.w	r3, r1, r5
 80033b4:	493d      	ldr	r1, [pc, #244]	; (80034ac <HAL_RCC_GetSysClockFreq+0x168>)
 80033b6:	fb01 f003 	mul.w	r0, r1, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	fb01 f102 	mul.w	r1, r1, r2
 80033c0:	1844      	adds	r4, r0, r1
 80033c2:	493a      	ldr	r1, [pc, #232]	; (80034ac <HAL_RCC_GetSysClockFreq+0x168>)
 80033c4:	fba2 0101 	umull	r0, r1, r2, r1
 80033c8:	1863      	adds	r3, r4, r1
 80033ca:	4619      	mov	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	f7fc fef8 	bl	80001c8 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e04a      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b30      	ldr	r3, [pc, #192]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	461a      	mov	r2, r3
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	ea02 0400 	and.w	r4, r2, r0
 80033fa:	ea03 0501 	and.w	r5, r3, r1
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	014b      	lsls	r3, r1, #5
 800340c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003410:	0142      	lsls	r2, r0, #5
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	1b00      	subs	r0, r0, r4
 8003418:	eb61 0105 	sbc.w	r1, r1, r5
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	018b      	lsls	r3, r1, #6
 8003426:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800342a:	0182      	lsls	r2, r0, #6
 800342c:	1a12      	subs	r2, r2, r0
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	00d9      	lsls	r1, r3, #3
 800343c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003440:	00d0      	lsls	r0, r2, #3
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	1912      	adds	r2, r2, r4
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	f04f 0000 	mov.w	r0, #0
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	0299      	lsls	r1, r3, #10
 8003456:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800345a:	0290      	lsls	r0, r2, #10
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	461a      	mov	r2, r3
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	f7fc feac 	bl	80001c8 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003496:	60bb      	str	r3, [r7, #8]
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	68bb      	ldr	r3, [r7, #8]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdb0      	pop	{r4, r5, r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	017d7840 	.word	0x017d7840

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07b      	b.n	80035d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ea:	d009      	beq.n	8003500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e005      	b.n	8003500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fdc0 	bl	80010a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	f003 0104 	and.w	r1, r3, #4
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f003 0210 	and.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b088      	sub	sp, #32
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_SPI_Transmit+0x22>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e126      	b.n	800384a <HAL_SPI_Transmit+0x270>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003604:	f7fd fec6 	bl	8001394 <HAL_GetTick>
 8003608:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800361e:	e10b      	b.n	8003838 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_SPI_Transmit+0x52>
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003630:	e102      	b.n	8003838 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d10f      	bne.n	800369a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d007      	beq.n	80036b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	d14b      	bne.n	800375a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_Transmit+0xf6>
 80036ca:	8afb      	ldrh	r3, [r7, #22]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d13e      	bne.n	800374e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036f4:	e02b      	b.n	800374e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d112      	bne.n	800372a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	86da      	strh	r2, [r3, #54]	; 0x36
 8003728:	e011      	b.n	800374e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372a:	f7fd fe33 	bl	8001394 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d803      	bhi.n	8003742 <HAL_SPI_Transmit+0x168>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x16e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800374c:	e074      	b.n	8003838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ce      	bne.n	80036f6 <HAL_SPI_Transmit+0x11c>
 8003758:	e04c      	b.n	80037f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Transmit+0x18e>
 8003762:	8afb      	ldrh	r3, [r7, #22]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d140      	bne.n	80037ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800378e:	e02c      	b.n	80037ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d113      	bne.n	80037c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80037c4:	e011      	b.n	80037ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c6:	f7fd fde5 	bl	8001394 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d803      	bhi.n	80037de <HAL_SPI_Transmit+0x204>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d102      	bne.n	80037e4 <HAL_SPI_Transmit+0x20a>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037e8:	e026      	b.n	8003838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1cd      	bne.n	8003790 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f8b3 	bl	8003964 <SPI_EndRxTxTransaction>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e000      	b.n	8003838 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003848:	7ffb      	ldrb	r3, [r7, #31]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003864:	f7fd fd96 	bl	8001394 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003874:	f7fd fd8e 	bl	8001394 <HAL_GetTick>
 8003878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	0d1b      	lsrs	r3, r3, #20
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388a:	e054      	b.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d050      	beq.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003894:	f7fd fd7e 	bl	8001394 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d902      	bls.n	80038aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13d      	bne.n	8003926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d111      	bne.n	80038e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	d004      	beq.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d107      	bne.n	80038e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f0:	d10f      	bne.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e017      	b.n	8003956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3b01      	subs	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d19b      	bne.n	800388c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000004 	.word	0x20000004

08003964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <SPI_EndRxTxTransaction+0x7c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <SPI_EndRxTxTransaction+0x80>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0d5b      	lsrs	r3, r3, #21
 800397c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398e:	d112      	bne.n	80039b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff5a 	bl	8003854 <SPI_WaitFlagStateUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e00f      	b.n	80039d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3b01      	subs	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b80      	cmp	r3, #128	; 0x80
 80039ce:	d0f2      	beq.n	80039b6 <SPI_EndRxTxTransaction+0x52>
 80039d0:	e000      	b.n	80039d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80039d2:	bf00      	nop
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000004 	.word	0x20000004
 80039e4:	165e9f81 	.word	0x165e9f81

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e041      	b.n	8003a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fb8e 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fad0 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e041      	b.n	8003b1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f839 	bl	8003b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f000 fa81 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_TIM_PWM_Start+0x24>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e022      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x6a>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d109      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x3e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e015      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x6a>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d109      	bne.n	8003b90 <HAL_TIM_PWM_Start+0x58>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e008      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x6a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07c      	b.n	8003ca4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <HAL_TIM_PWM_Start+0x82>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb8:	e013      	b.n	8003be2 <HAL_TIM_PWM_Start+0xaa>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d104      	bne.n	8003bca <HAL_TIM_PWM_Start+0x92>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	e00b      	b.n	8003be2 <HAL_TIM_PWM_Start+0xaa>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_PWM_Start+0xa2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	e003      	b.n	8003be2 <HAL_TIM_PWM_Start+0xaa>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fcd8 	bl	80045a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <HAL_TIM_PWM_Start+0x174>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_PWM_Start+0xcc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <HAL_TIM_PWM_Start+0x178>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_PWM_Start+0xd0>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_TIM_PWM_Start+0xd2>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_TIM_PWM_Start+0x174>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d01d      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <HAL_TIM_PWM_Start+0x17c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_TIM_PWM_Start+0x180>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_PWM_Start+0x184>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIM_PWM_Start+0x178>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIM_PWM_Start+0x188>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x136>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIM_PWM_Start+0x18c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d010      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	e007      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40001800 	.word	0x40001800

08003cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0ac      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	f200 809f 	bhi.w	8003e30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003e31 	.word	0x08003e31
 8003d00:	08003e31 	.word	0x08003e31
 8003d04:	08003e31 	.word	0x08003e31
 8003d08:	08003d6d 	.word	0x08003d6d
 8003d0c:	08003e31 	.word	0x08003e31
 8003d10:	08003e31 	.word	0x08003e31
 8003d14:	08003e31 	.word	0x08003e31
 8003d18:	08003daf 	.word	0x08003daf
 8003d1c:	08003e31 	.word	0x08003e31
 8003d20:	08003e31 	.word	0x08003e31
 8003d24:	08003e31 	.word	0x08003e31
 8003d28:	08003def 	.word	0x08003def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f9ea 	bl	800410c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
      break;
 8003d6a:	e062      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa3a 	bl	80041ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]
      break;
 8003dac:	e041      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fa8f 	bl	80042d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	61da      	str	r2, [r3, #28]
      break;
 8003dec:	e021      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fae3 	bl	80043c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_ConfigClockSource+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0b3      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x180>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd0>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	f000 8085 	beq.w	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xa2>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x116>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xf6>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x136>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x156>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x156>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x156>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fb33 	bl	8004560 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04e      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f000 fb1c 	bl	8004560 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03b      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fa90 	bl	800446c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	; 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fae9 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02b      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 faaf 	bl	80044ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	; 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fad9 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01b      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 fa70 	bl	800446c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fac9 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 fac0 	bl	800452a <TIM_ITRx_SetConfig>
        break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d027      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d023      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <TIM_Base_SetConfig+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <TIM_Base_SetConfig+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0302 	bic.w	r3, r3, #2
 8004154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <TIM_OC1_SetConfig+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_OC1_SetConfig+0x64>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <TIM_OC1_SetConfig+0xdc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10c      	bne.n	800418a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0308 	bic.w	r3, r3, #8
 8004176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <TIM_OC1_SetConfig+0xd8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC1_SetConfig+0x8e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <TIM_OC1_SetConfig+0xdc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400

080041ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0210 	bic.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a22      	ldr	r2, [pc, #136]	; (80042d0 <TIM_OC2_SetConfig+0xe4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_OC2_SetConfig+0x68>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <TIM_OC2_SetConfig+0xe8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10d      	bne.n	8004270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <TIM_OC2_SetConfig+0xe4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC2_SetConfig+0x94>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <TIM_OC2_SetConfig+0xe8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d113      	bne.n	80042a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40010400 	.word	0x40010400

080042d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <TIM_OC3_SetConfig+0xe0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_OC3_SetConfig+0x66>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a20      	ldr	r2, [pc, #128]	; (80043bc <TIM_OC3_SetConfig+0xe4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10d      	bne.n	800435a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <TIM_OC3_SetConfig+0xe0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_OC3_SetConfig+0x92>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC3_SetConfig+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d113      	bne.n	8004392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010400 	.word	0x40010400

080043c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	031b      	lsls	r3, r3, #12
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <TIM_OC4_SetConfig+0xa4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC4_SetConfig+0x68>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <TIM_OC4_SetConfig+0xa8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40010400 	.word	0x40010400

0800446c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 030a 	bic.w	r3, r3, #10
 80044a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b087      	sub	sp, #28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	f043 0307 	orr.w	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2201      	movs	r2, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	401a      	ands	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e05a      	b.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d01d      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10c      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40001800 	.word	0x40001800

080046e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046e4:	b084      	sub	sp, #16
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	f107 001c 	add.w	r0, r7, #28
 80046f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d122      	bne.n	8004742 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 fac6 	bl	8005cc8 <USB_CoreReset>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e01a      	b.n	8004778 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 faba 	bl	8005cc8 <USB_CoreReset>
 8004754:	4603      	mov	r3, r0
 8004756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
 800476a:	e005      	b.n	8004778 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10b      	bne.n	8004796 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f043 0206 	orr.w	r2, r3, #6
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a2:	b004      	add	sp, #16
 80047a4:	4770      	bx	lr
	...

080047a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d165      	bne.n	8004888 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a41      	ldr	r2, [pc, #260]	; (80048c4 <USB_SetTurnaroundTime+0x11c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d906      	bls.n	80047d2 <USB_SetTurnaroundTime+0x2a>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a40      	ldr	r2, [pc, #256]	; (80048c8 <USB_SetTurnaroundTime+0x120>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d202      	bcs.n	80047d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047cc:	230f      	movs	r3, #15
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e062      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a3c      	ldr	r2, [pc, #240]	; (80048c8 <USB_SetTurnaroundTime+0x120>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d306      	bcc.n	80047e8 <USB_SetTurnaroundTime+0x40>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <USB_SetTurnaroundTime+0x124>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d202      	bcs.n	80047e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047e2:	230e      	movs	r3, #14
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e057      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a38      	ldr	r2, [pc, #224]	; (80048cc <USB_SetTurnaroundTime+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d306      	bcc.n	80047fe <USB_SetTurnaroundTime+0x56>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <USB_SetTurnaroundTime+0x128>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d202      	bcs.n	80047fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047f8:	230d      	movs	r3, #13
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e04c      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <USB_SetTurnaroundTime+0x128>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d306      	bcc.n	8004814 <USB_SetTurnaroundTime+0x6c>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4a32      	ldr	r2, [pc, #200]	; (80048d4 <USB_SetTurnaroundTime+0x12c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d802      	bhi.n	8004814 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800480e:	230c      	movs	r3, #12
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e041      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <USB_SetTurnaroundTime+0x12c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <USB_SetTurnaroundTime+0x82>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a2e      	ldr	r2, [pc, #184]	; (80048d8 <USB_SetTurnaroundTime+0x130>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d802      	bhi.n	800482a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004824:	230b      	movs	r3, #11
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e036      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <USB_SetTurnaroundTime+0x130>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d906      	bls.n	8004840 <USB_SetTurnaroundTime+0x98>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <USB_SetTurnaroundTime+0x134>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d802      	bhi.n	8004840 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800483a:	230a      	movs	r3, #10
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e02b      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a26      	ldr	r2, [pc, #152]	; (80048dc <USB_SetTurnaroundTime+0x134>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <USB_SetTurnaroundTime+0xae>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <USB_SetTurnaroundTime+0x138>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d202      	bcs.n	8004856 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004850:	2309      	movs	r3, #9
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e020      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <USB_SetTurnaroundTime+0x138>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d306      	bcc.n	800486c <USB_SetTurnaroundTime+0xc4>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <USB_SetTurnaroundTime+0x13c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d802      	bhi.n	800486c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004866:	2308      	movs	r3, #8
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e015      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <USB_SetTurnaroundTime+0x13c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d906      	bls.n	8004882 <USB_SetTurnaroundTime+0xda>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <USB_SetTurnaroundTime+0x140>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d202      	bcs.n	8004882 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800487c:	2307      	movs	r3, #7
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e00a      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004882:	2306      	movs	r3, #6
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e007      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800488e:	2309      	movs	r3, #9
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e001      	b.n	8004898 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004894:	2309      	movs	r3, #9
 8004896:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	00d8acbf 	.word	0x00d8acbf
 80048c8:	00e4e1c0 	.word	0x00e4e1c0
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	01067380 	.word	0x01067380
 80048d4:	011a499f 	.word	0x011a499f
 80048d8:	01312cff 	.word	0x01312cff
 80048dc:	014ca43f 	.word	0x014ca43f
 80048e0:	016e3600 	.word	0x016e3600
 80048e4:	01a6ab1f 	.word	0x01a6ab1f
 80048e8:	01e84800 	.word	0x01e84800

080048ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d106      	bne.n	800495c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e00b      	b.n	8004974 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e001      	b.n	8004974 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e003      	b.n	800497c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004974:	2032      	movs	r0, #50	; 0x32
 8004976:	f7fc fd19 	bl	80013ac <HAL_Delay>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004984:	b084      	sub	sp, #16
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e009      	b.n	80049b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3340      	adds	r3, #64	; 0x40
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0e      	cmp	r3, #14
 80049bc:	d9f2      	bls.n	80049a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11c      	bne.n	80049fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d2:	f043 0302 	orr.w	r3, r3, #2
 80049d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
 80049fc:	e00b      	b.n	8004a16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	4619      	mov	r1, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	461a      	mov	r2, r3
 8004a32:	680b      	ldr	r3, [r1, #0]
 8004a34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10c      	bne.n	8004a56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a42:	2100      	movs	r1, #0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f949 	bl	8004cdc <USB_SetDevSpeed>
 8004a4a:	e008      	b.n	8004a5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f944 	bl	8004cdc <USB_SetDevSpeed>
 8004a54:	e003      	b.n	8004a5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a56:	2103      	movs	r1, #3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f93f 	bl	8004cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a5e:	2110      	movs	r1, #16
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8f3 	bl	8004c4c <USB_FlushTxFifo>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f911 	bl	8004c98 <USB_FlushRxFifo>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	461a      	mov	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e043      	b.n	8004b32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac0:	d118      	bne.n	8004af4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e013      	b.n	8004b06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aea:	461a      	mov	r2, r3
 8004aec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e008      	b.n	8004b06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	2300      	movs	r3, #0
 8004b04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	461a      	mov	r2, r3
 8004b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3b7      	bcc.n	8004aaa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e043      	b.n	8004bc8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b56:	d118      	bne.n	8004b8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e013      	b.n	8004b9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e008      	b.n	8004b9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3b7      	bcc.n	8004b40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <USB_DevInit+0x2c4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f043 0208 	orr.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c44:	b004      	add	sp, #16
 8004c46:	4770      	bx	lr
 8004c48:	803c3800 	.word	0x803c3800

08004c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	019b      	lsls	r3, r3, #6
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <USB_FlushTxFifo+0x48>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d0f0      	beq.n	8004c66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	00030d40 	.word	0x00030d40

08004c98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3301      	adds	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <USB_FlushRxFifo+0x40>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e006      	b.n	8004cca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d0f0      	beq.n	8004caa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	00030d40 	.word	0x00030d40

08004cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
 8004d32:	e00a      	b.n	8004d4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d002      	beq.n	8004d40 <USB_GetDevSpeed+0x32>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d102      	bne.n	8004d46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
 8004d44:	e001      	b.n	8004d4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d46:	230f      	movs	r3, #15
 8004d48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	785b      	ldrb	r3, [r3, #1]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d13a      	bne.n	8004dea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d155      	bne.n	8004e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	78db      	ldrb	r3, [r3, #3]
 8004dc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	059b      	lsls	r3, r3, #22
 8004dce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e036      	b.n	8004e58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11a      	bne.n	8004e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d161      	bne.n	8004f48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9a:	d11f      	bne.n	8004edc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4013      	ands	r3, r2
 8004efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f20:	4013      	ands	r3, r2
 8004f22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	0159      	lsls	r1, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <USB_DeactivateEndpoint+0x1b0>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
 8004f46:	e060      	b.n	800500a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5e:	d11f      	bne.n	8004fa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	0159      	lsls	r1, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	440b      	add	r3, r1
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	4619      	mov	r1, r3
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <USB_DeactivateEndpoint+0x1b4>)
 8005006:	4013      	ands	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	ec337800 	.word	0xec337800
 800501c:	eff37800 	.word	0xeff37800

08005020 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 815c 	bne.w	80052fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d132      	bne.n	80050b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800506c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	0cdb      	lsrs	r3, r3, #19
 80050aa:	04db      	lsls	r3, r3, #19
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	e074      	b.n	800519a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	0cdb      	lsrs	r3, r3, #19
 80050cc:	04db      	lsls	r3, r3, #19
 80050ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6959      	ldr	r1, [r3, #20]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	440b      	add	r3, r1
 800510c:	1e59      	subs	r1, r3, #1
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	fbb1 f3f3 	udiv	r3, r1, r3
 8005116:	04d9      	lsls	r1, r3, #19
 8005118:	4b9d      	ldr	r3, [pc, #628]	; (8005390 <USB_EPStartXfer+0x370>)
 800511a:	400b      	ands	r3, r1
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	0148      	lsls	r0, r1, #5
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	4401      	add	r1, r0
 8005124:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005142:	69b9      	ldr	r1, [r7, #24]
 8005144:	0148      	lsls	r0, r1, #5
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	4401      	add	r1, r0
 800514a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d11f      	bne.n	800519a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005178:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005198:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d14b      	bne.n	8005238 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	78db      	ldrb	r3, [r3, #3]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d128      	bne.n	8005216 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e00f      	b.n	8005216 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e12f      	b.n	8005498 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005256:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d015      	beq.n	800528c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8117 	beq.w	8005498 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005286:	4313      	orrs	r3, r2
 8005288:	634b      	str	r3, [r1, #52]	; 0x34
 800528a:	e105      	b.n	8005498 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d110      	bne.n	80052be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e00f      	b.n	80052de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	68d9      	ldr	r1, [r3, #12]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	b298      	uxth	r0, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fa2b 	bl	800574e <USB_WritePacket>
 80052f8:	e0ce      	b.n	8005498 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	0cdb      	lsrs	r3, r3, #19
 8005316:	04db      	lsls	r3, r3, #19
 8005318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800533c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d126      	bne.n	8005394 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	0148      	lsls	r0, r1, #5
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	4401      	add	r1, r0
 8005364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005368:	4313      	orrs	r3, r2
 800536a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538a:	6113      	str	r3, [r2, #16]
 800538c:	e036      	b.n	80053fc <USB_EPStartXfer+0x3dc>
 800538e:	bf00      	nop
 8005390:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4413      	add	r3, r2
 800539e:	1e5a      	subs	r2, r3, #1
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	8afb      	ldrh	r3, [r7, #22]
 80053ba:	04d9      	lsls	r1, r3, #19
 80053bc:	4b39      	ldr	r3, [pc, #228]	; (80054a4 <USB_EPStartXfer+0x484>)
 80053be:	400b      	ands	r3, r1
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	0148      	lsls	r0, r1, #5
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	4401      	add	r1, r0
 80053c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	8af9      	ldrh	r1, [r7, #22]
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	0148      	lsls	r0, r1, #5
 80053f0:	69f9      	ldr	r1, [r7, #28]
 80053f2:	4401      	add	r1, r0
 80053f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053f8:	4313      	orrs	r3, r2
 80053fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10d      	bne.n	800541e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68d9      	ldr	r1, [r3, #12]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	460a      	mov	r2, r1
 800541c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d128      	bne.n	8005478 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d110      	bne.n	8005458 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e00f      	b.n	8005478 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	1ff80000 	.word	0x1ff80000

080054a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 80cd 	bne.w	8005664 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d132      	bne.n	8005538 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005530:	0cdb      	lsrs	r3, r3, #19
 8005532:	04db      	lsls	r3, r3, #19
 8005534:	6113      	str	r3, [r2, #16]
 8005536:	e04e      	b.n	80055d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005552:	0cdb      	lsrs	r3, r3, #19
 8005554:	04db      	lsls	r3, r3, #19
 8005556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800557a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d903      	bls.n	8005590 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c6:	6939      	ldr	r1, [r7, #16]
 80055c8:	0148      	lsls	r0, r1, #5
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	4401      	add	r1, r0
 80055ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d11e      	bne.n	800561a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e092      	b.n	8005740 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005638:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d07e      	beq.n	8005740 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565e:	4313      	orrs	r3, r2
 8005660:	634b      	str	r3, [r1, #52]	; 0x34
 8005662:	e06d      	b.n	8005740 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567e:	0cdb      	lsrs	r3, r3, #19
 8005680:	04db      	lsls	r3, r3, #19
 8005682:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ee:	6939      	ldr	r1, [r7, #16]
 80056f0:	0148      	lsls	r0, r1, #5
 80056f2:	6979      	ldr	r1, [r7, #20]
 80056f4:	4401      	add	r1, r0
 80056f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056fa:	4313      	orrs	r3, r2
 80056fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10d      	bne.n	8005720 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	68d9      	ldr	r1, [r3, #12]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	460a      	mov	r2, r1
 800571e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800573e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800574e:	b480      	push	{r7}
 8005750:	b089      	sub	sp, #36	; 0x24
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	4611      	mov	r1, r2
 800575a:	461a      	mov	r2, r3
 800575c:	460b      	mov	r3, r1
 800575e:	71fb      	strb	r3, [r7, #7]
 8005760:	4613      	mov	r3, r2
 8005762:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800576c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11a      	bne.n	80057aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005774:	88bb      	ldrh	r3, [r7, #4]
 8005776:	3303      	adds	r3, #3
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e00f      	b.n	80057a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	031a      	lsls	r2, r3, #12
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	461a      	mov	r2, r3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	3301      	adds	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d3eb      	bcc.n	8005782 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3724      	adds	r7, #36	; 0x24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	3303      	adds	r3, #3
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e00b      	b.n	80057f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3304      	adds	r3, #4
 80057ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	3301      	adds	r3, #1
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3ef      	bcc.n	80057dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057fc:	69fb      	ldr	r3, [r7, #28]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3724      	adds	r7, #36	; 0x24
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d12c      	bne.n	8005880 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db12      	blt.n	800585e <USB_EPSetStall+0x54>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00f      	beq.n	800585e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005858:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800585c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e02b      	b.n	80058d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db12      	blt.n	80058b8 <USB_EPSetStall+0xae>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00f      	beq.n	80058b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d128      	bne.n	8005954 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d003      	beq.n	8005932 <USB_EPClearStall+0x4c>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d138      	bne.n	80059a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e027      	b.n	80059a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005972:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d003      	beq.n	8005984 <USB_EPClearStall+0x9e>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d10f      	bne.n	80059a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4313      	orrs	r3, r2
 80059ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2c:	f023 0302 	bic.w	r3, r3, #2
 8005a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	0c1b      	lsrs	r3, r3, #16
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	b29b      	uxth	r3, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	460b      	mov	r3, r1
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	333c      	adds	r3, #60	; 0x3c
 8005c22:	3304      	adds	r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <USB_EP0_OutStart+0xb8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d90a      	bls.n	8005c46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c40:	d101      	bne.n	8005c46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e037      	b.n	8005cb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 0318 	orr.w	r3, r3, #24
 8005c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10f      	bne.n	8005cb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	4f54300a 	.word	0x4f54300a

08005cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <USB_CoreReset+0x64>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e01b      	b.n	8005d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	daf2      	bge.n	8005cd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <USB_CoreReset+0x64>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e006      	b.n	8005d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d0f0      	beq.n	8005cfe <USB_CoreReset+0x36>

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	00030d40 	.word	0x00030d40

08005d30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d40:	f002 f906 	bl	8007f50 <USBD_static_malloc>
 8005d44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e066      	b.n	8005e26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	7c1b      	ldrb	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d119      	bne.n	8005d9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	2181      	movs	r1, #129	; 0x81
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 ffca 	bl	8007d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d80:	2202      	movs	r2, #2
 8005d82:	2101      	movs	r1, #1
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 ffc0 	bl	8007d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2210      	movs	r2, #16
 8005d96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d9a:	e016      	b.n	8005dca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	2202      	movs	r2, #2
 8005da0:	2181      	movs	r1, #129	; 0x81
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 ffb1 	bl	8007d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dae:	2340      	movs	r3, #64	; 0x40
 8005db0:	2202      	movs	r2, #2
 8005db2:	2101      	movs	r1, #1
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 ffa8 	bl	8007d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dca:	2308      	movs	r3, #8
 8005dcc:	2203      	movs	r2, #3
 8005dce:	2182      	movs	r1, #130	; 0x82
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 ff9a 	bl	8007d0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7c1b      	ldrb	r3, [r3, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 f86b 	bl	8007ee8 <USBD_LL_PrepareReceive>
 8005e12:	e007      	b.n	8005e24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 f862 	bl	8007ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	460b      	mov	r3, r1
 8005e38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e3a:	2181      	movs	r1, #129	; 0x81
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 ff8a 	bl	8007d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e48:	2101      	movs	r1, #1
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 ff83 	bl	8007d56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e58:	2182      	movs	r1, #130	; 0x82
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 ff7b 	bl	8007d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f002 f86e 	bl	8007f6c <USBD_static_free>
    pdev->pClassData = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e0af      	b.n	800602c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d03f      	beq.n	8005f58 <USBD_CDC_Setup+0xb4>
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	f040 809f 	bne.w	800601c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	88db      	ldrh	r3, [r3, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02e      	beq.n	8005f44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da16      	bge.n	8005f1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005efc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	88d2      	ldrh	r2, [r2, #6]
 8005f02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	88db      	ldrh	r3, [r3, #6]
 8005f08:	2b07      	cmp	r3, #7
 8005f0a:	bf28      	it	cs
 8005f0c:	2307      	movcs	r3, #7
 8005f0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	89fa      	ldrh	r2, [r7, #14]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fae9 	bl	80074ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005f1c:	e085      	b.n	800602a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	785a      	ldrb	r2, [r3, #1]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	88db      	ldrh	r3, [r3, #6]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f34:	6939      	ldr	r1, [r7, #16]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 fb02 	bl	8007546 <USBD_CtlPrepareRx>
      break;
 8005f42:	e072      	b.n	800602a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	7850      	ldrb	r0, [r2, #1]
 8005f50:	2200      	movs	r2, #0
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	4798      	blx	r3
      break;
 8005f56:	e068      	b.n	800602a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b0b      	cmp	r3, #11
 8005f5e:	d852      	bhi.n	8006006 <USBD_CDC_Setup+0x162>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <USBD_CDC_Setup+0xc4>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f99 	.word	0x08005f99
 8005f6c:	08006015 	.word	0x08006015
 8005f70:	08006007 	.word	0x08006007
 8005f74:	08006007 	.word	0x08006007
 8005f78:	08006007 	.word	0x08006007
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	08006007 	.word	0x08006007
 8005f84:	08006007 	.word	0x08006007
 8005f88:	08006007 	.word	0x08006007
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	08005fc3 	.word	0x08005fc3
 8005f94:	08005fed 	.word	0x08005fed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d107      	bne.n	8005fb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fa4:	f107 030a 	add.w	r3, r7, #10
 8005fa8:	2202      	movs	r2, #2
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fa9e 	bl	80074ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fb2:	e032      	b.n	800601a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fa28 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc0:	e02b      	b.n	800601a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fce:	f107 030d 	add.w	r3, r7, #13
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 fa89 	bl	80074ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fdc:	e01d      	b.n	800601a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fa13 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fea:	e016      	b.n	800601a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d00f      	beq.n	8006018 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fa06 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006004:	e008      	b.n	8006018 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f9ff 	bl	800740c <USBD_CtlError>
          ret = USBD_FAIL;
 800600e:	2303      	movs	r3, #3
 8006010:	75fb      	strb	r3, [r7, #23]
          break;
 8006012:	e002      	b.n	800601a <USBD_CDC_Setup+0x176>
          break;
 8006014:	bf00      	nop
 8006016:	e008      	b.n	800602a <USBD_CDC_Setup+0x186>
          break;
 8006018:	bf00      	nop
      }
      break;
 800601a:	e006      	b.n	800602a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f9f4 	bl	800740c <USBD_CtlError>
      ret = USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	75fb      	strb	r3, [r7, #23]
      break;
 8006028:	bf00      	nop
  }

  return (uint8_t)ret;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006046:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006052:	2303      	movs	r3, #3
 8006054:	e04f      	b.n	80060f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3318      	adds	r3, #24
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d029      	beq.n	80060c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	3318      	adds	r3, #24
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	78f9      	ldrb	r1, [r7, #3]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	460b      	mov	r3, r1
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4403      	add	r3, r0
 8006094:	3344      	adds	r3, #68	; 0x44
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	fbb2 f1f3 	udiv	r1, r2, r3
 800609c:	fb03 f301 	mul.w	r3, r3, r1
 80060a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	3318      	adds	r3, #24
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060ba:	78f9      	ldrb	r1, [r7, #3]
 80060bc:	2300      	movs	r3, #0
 80060be:	2200      	movs	r2, #0
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fef0 	bl	8007ea6 <USBD_LL_Transmit>
 80060c6:	e015      	b.n	80060f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e015      	b.n	800614c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 ff00 	bl	8007f2a <USBD_LL_GetRxDataSize>
 800612a:	4602      	mov	r2, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006146:	4611      	mov	r1, r2
 8006148:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800616a:	2303      	movs	r3, #3
 800616c:	e01b      	b.n	80061a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d015      	beq.n	80061a4 <USBD_CDC_EP0_RxReady+0x50>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800617e:	2bff      	cmp	r3, #255	; 0xff
 8006180:	d010      	beq.n	80061a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006190:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006198:	b292      	uxth	r2, r2
 800619a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2243      	movs	r2, #67	; 0x43
 80061bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000098 	.word	0x20000098

080061d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2243      	movs	r2, #67	; 0x43
 80061dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061de:	4b03      	ldr	r3, [pc, #12]	; (80061ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000054 	.word	0x20000054

080061f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2243      	movs	r2, #67	; 0x43
 80061fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061fe:	4b03      	ldr	r3, [pc, #12]	; (800620c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	200000dc 	.word	0x200000dc

08006210 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	220a      	movs	r2, #10
 800621c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800621e:	4b03      	ldr	r3, [pc, #12]	; (800622c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20000010 	.word	0x20000010

08006230 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	e004      	b.n	800624e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800625a:	b480      	push	{r7}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e008      	b.n	800628a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e004      	b.n	80062bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e016      	b.n	8006314 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7c1b      	ldrb	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062f8:	2101      	movs	r1, #1
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fdf4 	bl	8007ee8 <USBD_LL_PrepareReceive>
 8006300:	e007      	b.n	8006312 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	2101      	movs	r1, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fdeb 	bl	8007ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	e01f      	b.n	8006374 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	79fa      	ldrb	r2, [r7, #7]
 8006366:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 fc67 	bl	8007c3c <USBD_LL_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	e016      	b.n	80063c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f107 020e 	add.w	r2, r7, #14
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
 80063b8:	4602      	mov	r2, r0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fc7e 	bl	8007cd4 <USBD_LL_Start>
 80063d8:	4603      	mov	r3, r0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	4611      	mov	r1, r2
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
  }

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 ff90 	bl	8007398 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	2b02      	cmp	r3, #2
 800649a:	d01a      	beq.n	80064d2 <USBD_LL_SetupStage+0x72>
 800649c:	2b02      	cmp	r3, #2
 800649e:	d822      	bhi.n	80064e6 <USBD_LL_SetupStage+0x86>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <USBD_LL_SetupStage+0x4a>
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d00a      	beq.n	80064be <USBD_LL_SetupStage+0x5e>
 80064a8:	e01d      	b.n	80064e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa62 	bl	800697c <USBD_StdDevReq>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
      break;
 80064bc:	e020      	b.n	8006500 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fac6 	bl	8006a58 <USBD_StdItfReq>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e016      	b.n	8006500 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fb05 	bl	8006aea <USBD_StdEPReq>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]
      break;
 80064e4:	e00c      	b.n	8006500 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 fc4d 	bl	8007d94 <USBD_LL_StallEP>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]
      break;
 80064fe:	bf00      	nop
  }

  return ret;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	460b      	mov	r3, r1
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d138      	bne.n	8006590 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006524:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800652c:	2b03      	cmp	r3, #3
 800652e:	d14a      	bne.n	80065c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	429a      	cmp	r2, r3
 800653a:	d913      	bls.n	8006564 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	1ad2      	subs	r2, r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4293      	cmp	r3, r2
 8006554:	bf28      	it	cs
 8006556:	4613      	movcs	r3, r2
 8006558:	461a      	mov	r2, r3
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 f80f 	bl	8007580 <USBD_CtlContinueRx>
 8006562:	e030      	b.n	80065c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b03      	cmp	r3, #3
 800656e:	d10b      	bne.n	8006588 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 f80a 	bl	80075a2 <USBD_CtlSendStatus>
 800658e:	e01a      	b.n	80065c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b03      	cmp	r3, #3
 800659a:	d114      	bne.n	80065c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00e      	beq.n	80065c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	7afa      	ldrb	r2, [r7, #11]
 80065b2:	4611      	mov	r1, r2
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	4798      	blx	r3
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	e000      	b.n	80065c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d16b      	bne.n	80066bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3314      	adds	r3, #20
 80065e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d156      	bne.n	80066a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d914      	bls.n	800662a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	1ad2      	subs	r2, r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	461a      	mov	r2, r3
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 ff84 	bl	8007524 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661c:	2300      	movs	r3, #0
 800661e:	2200      	movs	r2, #0
 8006620:	2100      	movs	r1, #0
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 fc60 	bl	8007ee8 <USBD_LL_PrepareReceive>
 8006628:	e03b      	b.n	80066a2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d11c      	bne.n	8006670 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800663e:	429a      	cmp	r2, r3
 8006640:	d316      	bcc.n	8006670 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800664c:	429a      	cmp	r2, r3
 800664e:	d20f      	bcs.n	8006670 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006650:	2200      	movs	r2, #0
 8006652:	2100      	movs	r1, #0
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 ff65 	bl	8007524 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006662:	2300      	movs	r3, #0
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f001 fc3d 	bl	8007ee8 <USBD_LL_PrepareReceive>
 800666e:	e018      	b.n	80066a2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b03      	cmp	r3, #3
 800667a:	d10b      	bne.n	8006694 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006694:	2180      	movs	r1, #128	; 0x80
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 fb7c 	bl	8007d94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 ff93 	bl	80075c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d122      	bne.n	80066f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fe98 	bl	80063e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066ba:	e01a      	b.n	80066f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d114      	bne.n	80066f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00e      	beq.n	80066f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	7afa      	ldrb	r2, [r7, #11]
 80066de:	4611      	mov	r1, r2
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	e000      	b.n	80066f4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	e02f      	b.n	8006790 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00f      	beq.n	800675a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6852      	ldr	r2, [r2, #4]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	4611      	mov	r1, r2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fad2 	bl	8007d0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2240      	movs	r2, #64	; 0x40
 8006772:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fac4 	bl	8007d0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2240      	movs	r2, #64	; 0x40
 800678c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2204      	movs	r2, #4
 80067d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d106      	bne.n	8006806 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006826:	2303      	movs	r3, #3
 8006828:	e012      	b.n	8006850 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b03      	cmp	r3, #3
 8006834:	d10b      	bne.n	800684e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	e014      	b.n	800689c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d10d      	bne.n	800689a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	4611      	mov	r1, r2
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e014      	b.n	80068e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d10d      	bne.n	80068e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	78fa      	ldrb	r2, [r7, #3]
 80068e0:	4611      	mov	r1, r2
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	4611      	mov	r1, r2
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
  }

  return USBD_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3301      	adds	r3, #1
 8006954:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800695c:	8a3b      	ldrh	r3, [r7, #16]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	b21a      	sxth	r2, r3
 8006962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006966:	4313      	orrs	r3, r2
 8006968:	b21b      	sxth	r3, r3
 800696a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800696c:	89fb      	ldrh	r3, [r7, #14]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d005      	beq.n	80069a2 <USBD_StdDevReq+0x26>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d853      	bhi.n	8006a42 <USBD_StdDevReq+0xc6>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <USBD_StdDevReq+0x3a>
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d14f      	bne.n	8006a42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e04a      	b.n	8006a4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d83b      	bhi.n	8006a36 <USBD_StdDevReq+0xba>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_StdDevReq+0x48>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006a2d 	.word	0x08006a2d
 80069cc:	08006a37 	.word	0x08006a37
 80069d0:	08006a23 	.word	0x08006a23
 80069d4:	08006a37 	.word	0x08006a37
 80069d8:	080069f7 	.word	0x080069f7
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	08006a37 	.word	0x08006a37
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a01 	.word	0x08006a01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9de 	bl	8006db0 <USBD_GetDescriptor>
          break;
 80069f4:	e024      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb43 	bl	8007084 <USBD_SetAddress>
          break;
 80069fe:	e01f      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fb82 	bl	800710c <USBD_SetConfig>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a0c:	e018      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fc21 	bl	8007258 <USBD_GetConfig>
          break;
 8006a16:	e013      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc52 	bl	80072c4 <USBD_GetStatus>
          break;
 8006a20:	e00e      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fc81 	bl	800732c <USBD_SetFeature>
          break;
 8006a2a:	e009      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fc90 	bl	8007354 <USBD_ClrFeature>
          break;
 8006a34:	e004      	b.n	8006a40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fce7 	bl	800740c <USBD_CtlError>
          break;
 8006a3e:	bf00      	nop
      }
      break;
 8006a40:	e004      	b.n	8006a4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fce1 	bl	800740c <USBD_CtlError>
      break;
 8006a4a:	bf00      	nop
  }

  return ret;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d005      	beq.n	8006a7e <USBD_StdItfReq+0x26>
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d82f      	bhi.n	8006ad6 <USBD_StdItfReq+0x7e>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <USBD_StdItfReq+0x26>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d12b      	bne.n	8006ad6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d81d      	bhi.n	8006ac8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	889b      	ldrh	r3, [r3, #4]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d813      	bhi.n	8006abe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	88db      	ldrh	r3, [r3, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d110      	bne.n	8006ad2 <USBD_StdItfReq+0x7a>
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fd73 	bl	80075a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006abc:	e009      	b.n	8006ad2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fca3 	bl	800740c <USBD_CtlError>
          break;
 8006ac6:	e004      	b.n	8006ad2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fc9e 	bl	800740c <USBD_CtlError>
          break;
 8006ad0:	e000      	b.n	8006ad4 <USBD_StdItfReq+0x7c>
          break;
 8006ad2:	bf00      	nop
      }
      break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fc97 	bl	800740c <USBD_CtlError>
      break;
 8006ade:	bf00      	nop
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	889b      	ldrh	r3, [r3, #4]
 8006afc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d007      	beq.n	8006b1a <USBD_StdEPReq+0x30>
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	f200 8145 	bhi.w	8006d9a <USBD_StdEPReq+0x2b0>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00c      	beq.n	8006b2e <USBD_StdEPReq+0x44>
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	f040 8140 	bne.w	8006d9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e13a      	b.n	8006da4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d007      	beq.n	8006b46 <USBD_StdEPReq+0x5c>
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	f300 8129 	bgt.w	8006d8e <USBD_StdEPReq+0x2a4>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d07f      	beq.n	8006c40 <USBD_StdEPReq+0x156>
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d03c      	beq.n	8006bbe <USBD_StdEPReq+0xd4>
 8006b44:	e123      	b.n	8006d8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d002      	beq.n	8006b58 <USBD_StdEPReq+0x6e>
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d016      	beq.n	8006b84 <USBD_StdEPReq+0x9a>
 8006b56:	e02c      	b.n	8006bb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <USBD_StdEPReq+0x90>
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d00a      	beq.n	8006b7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f913 	bl	8007d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f90f 	bl	8007d94 <USBD_LL_StallEP>
 8006b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b78:	e020      	b.n	8006bbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc45 	bl	800740c <USBD_CtlError>
              break;
 8006b82:	e01b      	b.n	8006bbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	885b      	ldrh	r3, [r3, #2]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10e      	bne.n	8006baa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <USBD_StdEPReq+0xc0>
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	2b80      	cmp	r3, #128	; 0x80
 8006b96:	d008      	beq.n	8006baa <USBD_StdEPReq+0xc0>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f8f5 	bl	8007d94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fcf9 	bl	80075a2 <USBD_CtlSendStatus>

              break;
 8006bb0:	e004      	b.n	8006bbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fc29 	bl	800740c <USBD_CtlError>
              break;
 8006bba:	bf00      	nop
          }
          break;
 8006bbc:	e0ec      	b.n	8006d98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d002      	beq.n	8006bd0 <USBD_StdEPReq+0xe6>
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d016      	beq.n	8006bfc <USBD_StdEPReq+0x112>
 8006bce:	e030      	b.n	8006c32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <USBD_StdEPReq+0x108>
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b80      	cmp	r3, #128	; 0x80
 8006bda:	d00a      	beq.n	8006bf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f8d7 	bl	8007d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be6:	2180      	movs	r1, #128	; 0x80
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f8d3 	bl	8007d94 <USBD_LL_StallEP>
 8006bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bf0:	e025      	b.n	8006c3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc09 	bl	800740c <USBD_CtlError>
              break;
 8006bfa:	e020      	b.n	8006c3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	885b      	ldrh	r3, [r3, #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11b      	bne.n	8006c3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f8dd 	bl	8007dd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fcc2 	bl	80075a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c30:	e004      	b.n	8006c3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fbe9 	bl	800740c <USBD_CtlError>
              break;
 8006c3a:	e000      	b.n	8006c3e <USBD_StdEPReq+0x154>
              break;
 8006c3c:	bf00      	nop
          }
          break;
 8006c3e:	e0ab      	b.n	8006d98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d002      	beq.n	8006c52 <USBD_StdEPReq+0x168>
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d032      	beq.n	8006cb6 <USBD_StdEPReq+0x1cc>
 8006c50:	e097      	b.n	8006d82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <USBD_StdEPReq+0x17e>
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d004      	beq.n	8006c68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fbd3 	bl	800740c <USBD_CtlError>
                break;
 8006c66:	e091      	b.n	8006d8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da0b      	bge.n	8006c88 <USBD_StdEPReq+0x19e>
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	3310      	adds	r3, #16
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	3304      	adds	r3, #4
 8006c86:	e00b      	b.n	8006ca0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2202      	movs	r2, #2
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fc1d 	bl	80074ee <USBD_CtlSendData>
              break;
 8006cb4:	e06a      	b.n	8006d8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da11      	bge.n	8006ce2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3324      	adds	r3, #36	; 0x24
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d117      	bne.n	8006d08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fb96 	bl	800740c <USBD_CtlError>
                  break;
 8006ce0:	e054      	b.n	8006d8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb83 	bl	800740c <USBD_CtlError>
                  break;
 8006d06:	e041      	b.n	8006d8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0b      	bge.n	8006d28 <USBD_StdEPReq+0x23e>
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	3310      	adds	r3, #16
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	e00b      	b.n	8006d40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <USBD_StdEPReq+0x264>
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d103      	bne.n	8006d56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e00e      	b.n	8006d74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 f858 	bl	8007e10 <USBD_LL_IsStallEP>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e002      	b.n	8006d74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2202      	movs	r2, #2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fbb7 	bl	80074ee <USBD_CtlSendData>
              break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fb41 	bl	800740c <USBD_CtlError>
              break;
 8006d8a:	bf00      	nop
          }
          break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb3b 	bl	800740c <USBD_CtlError>
          break;
 8006d96:	bf00      	nop
      }
      break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb35 	bl	800740c <USBD_CtlError>
      break;
 8006da2:	bf00      	nop
  }

  return ret;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	885b      	ldrh	r3, [r3, #2]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	f200 8128 	bhi.w	8007026 <USBD_GetDescriptor+0x276>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_GetDescriptor+0x2c>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08007027 	.word	0x08007027
 8006dec:	08007027 	.word	0x08007027
 8006df0:	08006fc7 	.word	0x08006fc7
 8006df4:	08006ff3 	.word	0x08006ff3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	7c12      	ldrb	r2, [r2, #16]
 8006e04:	f107 0108 	add.w	r1, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
      break;
 8006e0e:	e112      	b.n	8007036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7c1b      	ldrb	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e32:	e100      	b.n	8007036 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	701a      	strb	r2, [r3, #0]
      break;
 8006e4e:	e0f2      	b.n	8007036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	885b      	ldrh	r3, [r3, #2]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	f200 80ac 	bhi.w	8006fb4 <USBD_GetDescriptor+0x204>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBD_GetDescriptor+0xb4>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006eb1 	.word	0x08006eb1
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006f19 	.word	0x08006f19
 8006e74:	08006f4d 	.word	0x08006f4d
 8006e78:	08006f81 	.word	0x08006f81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7c12      	ldrb	r2, [r2, #16]
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9e:	e091      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fab2 	bl	800740c <USBD_CtlError>
            err++;
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	72fb      	strb	r3, [r7, #11]
          break;
 8006eae:	e089      	b.n	8006fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	f107 0108 	add.w	r1, r7, #8
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed2:	e077      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa98 	bl	800740c <USBD_CtlError>
            err++;
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee2:	e06f      	b.n	8006fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7c12      	ldrb	r2, [r2, #16]
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f06:	e05d      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa7e 	bl	800740c <USBD_CtlError>
            err++;
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	3301      	adds	r3, #1
 8006f14:	72fb      	strb	r3, [r7, #11]
          break;
 8006f16:	e055      	b.n	8006fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f3a:	e043      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa64 	bl	800740c <USBD_CtlError>
            err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
          break;
 8006f4a:	e03b      	b.n	8006fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6e:	e029      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa4a 	bl	800740c <USBD_CtlError>
            err++;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7e:	e021      	b.n	8006fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa2:	e00f      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa30 	bl	800740c <USBD_CtlError>
            err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb2:	e007      	b.n	8006fc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa28 	bl	800740c <USBD_CtlError>
          err++;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fc2:	bf00      	nop
      }
      break;
 8006fc4:	e037      	b.n	8007036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7c1b      	ldrb	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	f107 0208 	add.w	r2, r7, #8
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4798      	blx	r3
 8006fde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fe0:	e029      	b.n	8007036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fa11 	bl	800740c <USBD_CtlError>
        err++;
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	3301      	adds	r3, #1
 8006fee:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff0:	e021      	b.n	8007036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7c1b      	ldrb	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f107 0208 	add.w	r2, r7, #8
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
 800700a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	2207      	movs	r2, #7
 8007012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007014:	e00f      	b.n	8007036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f9f7 	bl	800740c <USBD_CtlError>
        err++;
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	3301      	adds	r3, #1
 8007022:	72fb      	strb	r3, [r7, #11]
      break;
 8007024:	e007      	b.n	8007036 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f9ef 	bl	800740c <USBD_CtlError>
      err++;
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	3301      	adds	r3, #1
 8007032:	72fb      	strb	r3, [r7, #11]
      break;
 8007034:	bf00      	nop
  }

  if (err != 0U)
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d11e      	bne.n	800707a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d016      	beq.n	8007072 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007044:	893b      	ldrh	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88da      	ldrh	r2, [r3, #6]
 800704e:	893b      	ldrh	r3, [r7, #8]
 8007050:	4293      	cmp	r3, r2
 8007052:	bf28      	it	cs
 8007054:	4613      	movcs	r3, r2
 8007056:	b29b      	uxth	r3, r3
 8007058:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800705a:	893b      	ldrh	r3, [r7, #8]
 800705c:	461a      	mov	r2, r3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa44 	bl	80074ee <USBD_CtlSendData>
 8007066:	e009      	b.n	800707c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9ce 	bl	800740c <USBD_CtlError>
 8007070:	e004      	b.n	800707c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa95 	bl	80075a2 <USBD_CtlSendStatus>
 8007078:	e000      	b.n	800707c <USBD_GetDescriptor+0x2cc>
    return;
 800707a:	bf00      	nop
  }
}
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop

08007084 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	889b      	ldrh	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d131      	bne.n	80070fa <USBD_SetAddress+0x76>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12d      	bne.n	80070fa <USBD_SetAddress+0x76>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	2b7f      	cmp	r3, #127	; 0x7f
 80070a4:	d829      	bhi.n	80070fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d104      	bne.n	80070c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f9a3 	bl	800740c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	e01d      	b.n	8007104 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fec7 	bl	8007e68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa61 	bl	80075a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	e009      	b.n	8007104 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f8:	e004      	b.n	8007104 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f985 	bl	800740c <USBD_CtlError>
  }
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	4b4c      	ldr	r3, [pc, #304]	; (8007254 <USBD_SetConfig+0x148>)
 8007122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <USBD_SetConfig+0x148>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d905      	bls.n	8007138 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f96c 	bl	800740c <USBD_CtlError>
    return USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e088      	b.n	800724a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <USBD_SetConfig+0x3e>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d025      	beq.n	8007194 <USBD_SetConfig+0x88>
 8007148:	e071      	b.n	800722e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800714a:	4b42      	ldr	r3, [pc, #264]	; (8007254 <USBD_SetConfig+0x148>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01c      	beq.n	800718c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007152:	4b40      	ldr	r3, [pc, #256]	; (8007254 <USBD_SetConfig+0x148>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <USBD_SetConfig+0x148>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff f948 	bl	80063f8 <USBD_SetClassConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f949 	bl	800740c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800717a:	e065      	b.n	8007248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa10 	bl	80075a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2203      	movs	r2, #3
 8007186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800718a:	e05d      	b.n	8007248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa08 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 8007192:	e059      	b.n	8007248 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007194:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <USBD_SetConfig+0x148>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d112      	bne.n	80071c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071a4:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <USBD_SetConfig+0x148>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <USBD_SetConfig+0x148>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f93b 	bl	8006430 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9f1 	bl	80075a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071c0:	e042      	b.n	8007248 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <USBD_SetConfig+0x148>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d02a      	beq.n	8007226 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f929 	bl	8006430 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <USBD_SetConfig+0x148>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <USBD_SetConfig+0x148>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff f902 	bl	80063f8 <USBD_SetClassConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00f      	beq.n	800721e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f903 	bl	800740c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff f90e 	bl	8006430 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800721c:	e014      	b.n	8007248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9bf 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 8007224:	e010      	b.n	8007248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9bb 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 800722c:	e00c      	b.n	8007248 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8eb 	bl	800740c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <USBD_SetConfig+0x148>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff f8f7 	bl	8006430 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000212 	.word	0x20000212

08007258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d004      	beq.n	8007274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8cd 	bl	800740c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007272:	e023      	b.n	80072bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	dc02      	bgt.n	8007286 <USBD_GetConfig+0x2e>
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc03      	bgt.n	800728c <USBD_GetConfig+0x34>
 8007284:	e015      	b.n	80072b2 <USBD_GetConfig+0x5a>
 8007286:	2b03      	cmp	r3, #3
 8007288:	d00b      	beq.n	80072a2 <USBD_GetConfig+0x4a>
 800728a:	e012      	b.n	80072b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3308      	adds	r3, #8
 8007296:	2201      	movs	r2, #1
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f927 	bl	80074ee <USBD_CtlSendData>
        break;
 80072a0:	e00c      	b.n	80072bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	2201      	movs	r2, #1
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f91f 	bl	80074ee <USBD_CtlSendData>
        break;
 80072b0:	e004      	b.n	80072bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8a9 	bl	800740c <USBD_CtlError>
        break;
 80072ba:	bf00      	nop
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d81e      	bhi.n	800731a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d004      	beq.n	80072ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f890 	bl	800740c <USBD_CtlError>
        break;
 80072ec:	e01a      	b.n	8007324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	330c      	adds	r3, #12
 800730e:	2202      	movs	r2, #2
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8eb 	bl	80074ee <USBD_CtlSendData>
      break;
 8007318:	e004      	b.n	8007324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f875 	bl	800740c <USBD_CtlError>
      break;
 8007322:	bf00      	nop
  }
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f92b 	bl	80075a2 <USBD_CtlSendStatus>
  }
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	2b02      	cmp	r3, #2
 800736a:	d80b      	bhi.n	8007384 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	885b      	ldrh	r3, [r3, #2]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d10c      	bne.n	800738e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f910 	bl	80075a2 <USBD_CtlSendStatus>
      }
      break;
 8007382:	e004      	b.n	800738e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f840 	bl	800740c <USBD_CtlError>
      break;
 800738c:	e000      	b.n	8007390 <USBD_ClrFeature+0x3c>
      break;
 800738e:	bf00      	nop
  }
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	781a      	ldrb	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff fabb 	bl	800693e <SWAPBYTE>
 80073c8:	4603      	mov	r3, r0
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff faae 	bl	800693e <SWAPBYTE>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff faa1 	bl	800693e <SWAPBYTE>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	80da      	strh	r2, [r3, #6]
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007416:	2180      	movs	r1, #128	; 0x80
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fcbb 	bl	8007d94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800741e:	2100      	movs	r1, #0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fcb7 	bl	8007d94 <USBD_LL_StallEP>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d036      	beq.n	80074b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007448:	6938      	ldr	r0, [r7, #16]
 800744a:	f000 f836 	bl	80074ba <USBD_GetLen>
 800744e:	4603      	mov	r3, r0
 8007450:	3301      	adds	r3, #1
 8007452:	b29b      	uxth	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	7812      	ldrb	r2, [r2, #0]
 8007466:	701a      	strb	r2, [r3, #0]
  idx++;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	3301      	adds	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4413      	add	r3, r2
 8007474:	2203      	movs	r2, #3
 8007476:	701a      	strb	r2, [r3, #0]
  idx++;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	3301      	adds	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800747e:	e013      	b.n	80074a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4413      	add	r3, r2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
    idx++;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	3301      	adds	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e7      	bne.n	8007480 <USBD_GetString+0x52>
 80074b0:	e000      	b.n	80074b4 <USBD_GetString+0x86>
    return;
 80074b2:	bf00      	nop
  }
}
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074ca:	e005      	b.n	80074d8 <USBD_GetLen+0x1e>
  {
    len++;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	3301      	adds	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f5      	bne.n	80074cc <USBD_GetLen+0x12>
  }

  return len;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fcc6 	bl	8007ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fcb5 	bl	8007ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2203      	movs	r2, #3
 8007556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	2100      	movs	r1, #0
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fcb9 	bl	8007ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fca8 	bl	8007ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075b2:	2300      	movs	r3, #0
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc74 	bl	8007ea6 <USBD_LL_Transmit>

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2205      	movs	r2, #5
 80075d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d8:	2300      	movs	r3, #0
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc82 	bl	8007ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4912      	ldr	r1, [pc, #72]	; (8007640 <MX_USB_DEVICE_Init+0x50>)
 80075f8:	4812      	ldr	r0, [pc, #72]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 80075fa:	f7fe fe8f 	bl	800631c <USBD_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007604:	f7f9 fd1e 	bl	8001044 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007608:	490f      	ldr	r1, [pc, #60]	; (8007648 <MX_USB_DEVICE_Init+0x58>)
 800760a:	480e      	ldr	r0, [pc, #56]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800760c:	f7fe feb6 	bl	800637c <USBD_RegisterClass>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007616:	f7f9 fd15 	bl	8001044 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800761a:	490c      	ldr	r1, [pc, #48]	; (800764c <MX_USB_DEVICE_Init+0x5c>)
 800761c:	4809      	ldr	r0, [pc, #36]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800761e:	f7fe fe07 	bl	8006230 <USBD_CDC_RegisterInterface>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007628:	f7f9 fd0c 	bl	8001044 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800762c:	4805      	ldr	r0, [pc, #20]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800762e:	f7fe fecc 	bl	80063ca <USBD_Start>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007638:	f7f9 fd04 	bl	8001044 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000134 	.word	0x20000134
 8007644:	200004d8 	.word	0x200004d8
 8007648:	2000001c 	.word	0x2000001c
 800764c:	20000120 	.word	0x20000120

08007650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007654:	2200      	movs	r2, #0
 8007656:	4905      	ldr	r1, [pc, #20]	; (800766c <CDC_Init_FS+0x1c>)
 8007658:	4805      	ldr	r0, [pc, #20]	; (8007670 <CDC_Init_FS+0x20>)
 800765a:	f7fe fdfe 	bl	800625a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800765e:	4905      	ldr	r1, [pc, #20]	; (8007674 <CDC_Init_FS+0x24>)
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <CDC_Init_FS+0x20>)
 8007662:	f7fe fe18 	bl	8006296 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20000fa8 	.word	0x20000fa8
 8007670:	200004d8 	.word	0x200004d8
 8007674:	200007a8 	.word	0x200007a8

08007678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800767c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800767e:	4618      	mov	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
 8007694:	4613      	mov	r3, r2
 8007696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	2b23      	cmp	r3, #35	; 0x23
 800769c:	d84a      	bhi.n	8007734 <CDC_Control_FS+0xac>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <CDC_Control_FS+0x1c>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	08007735 	.word	0x08007735
 80076a8:	08007735 	.word	0x08007735
 80076ac:	08007735 	.word	0x08007735
 80076b0:	08007735 	.word	0x08007735
 80076b4:	08007735 	.word	0x08007735
 80076b8:	08007735 	.word	0x08007735
 80076bc:	08007735 	.word	0x08007735
 80076c0:	08007735 	.word	0x08007735
 80076c4:	08007735 	.word	0x08007735
 80076c8:	08007735 	.word	0x08007735
 80076cc:	08007735 	.word	0x08007735
 80076d0:	08007735 	.word	0x08007735
 80076d4:	08007735 	.word	0x08007735
 80076d8:	08007735 	.word	0x08007735
 80076dc:	08007735 	.word	0x08007735
 80076e0:	08007735 	.word	0x08007735
 80076e4:	08007735 	.word	0x08007735
 80076e8:	08007735 	.word	0x08007735
 80076ec:	08007735 	.word	0x08007735
 80076f0:	08007735 	.word	0x08007735
 80076f4:	08007735 	.word	0x08007735
 80076f8:	08007735 	.word	0x08007735
 80076fc:	08007735 	.word	0x08007735
 8007700:	08007735 	.word	0x08007735
 8007704:	08007735 	.word	0x08007735
 8007708:	08007735 	.word	0x08007735
 800770c:	08007735 	.word	0x08007735
 8007710:	08007735 	.word	0x08007735
 8007714:	08007735 	.word	0x08007735
 8007718:	08007735 	.word	0x08007735
 800771c:	08007735 	.word	0x08007735
 8007720:	08007735 	.word	0x08007735
 8007724:	08007735 	.word	0x08007735
 8007728:	08007735 	.word	0x08007735
 800772c:	08007735 	.word	0x08007735
 8007730:	08007735 	.word	0x08007735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007734:	bf00      	nop
  }

  return (USBD_OK);
 8007736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4805      	ldr	r0, [pc, #20]	; (8007768 <CDC_Receive_FS+0x24>)
 8007752:	f7fe fda0 	bl	8006296 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007756:	4804      	ldr	r0, [pc, #16]	; (8007768 <CDC_Receive_FS+0x24>)
 8007758:	f7fe fdb6 	bl	80062c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800775c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200004d8 	.word	0x200004d8

0800776c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800777e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2212      	movs	r2, #18
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000150 	.word	0x20000150

080077b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000164 	.word	0x20000164

080077d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077f0:	f7ff fe1d 	bl	800742e <USBD_GetString>
 80077f4:	e004      	b.n	8007800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077fc:	f7ff fe17 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200017a8 	.word	0x200017a8
 8007810:	08008070 	.word	0x08008070

08007814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4904      	ldr	r1, [pc, #16]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007826:	f7ff fe02 	bl	800742e <USBD_GetString>
  return USBD_StrDesc;
 800782a:	4b02      	ldr	r3, [pc, #8]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	200017a8 	.word	0x200017a8
 8007838:	08008088 	.word	0x08008088

0800783c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	221a      	movs	r2, #26
 800784c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800784e:	f000 f843 	bl	80078d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007852:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000168 	.word	0x20000168

08007860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4907      	ldr	r1, [pc, #28]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007876:	4808      	ldr	r0, [pc, #32]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007878:	f7ff fdd9 	bl	800742e <USBD_GetString>
 800787c:	e004      	b.n	8007888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4904      	ldr	r1, [pc, #16]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007882:	4805      	ldr	r0, [pc, #20]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007884:	f7ff fdd3 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200017a8 	.word	0x200017a8
 8007898:	0800809c 	.word	0x0800809c

0800789c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4907      	ldr	r1, [pc, #28]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078b2:	4808      	ldr	r0, [pc, #32]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078b4:	f7ff fdbb 	bl	800742e <USBD_GetString>
 80078b8:	e004      	b.n	80078c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078be:	4805      	ldr	r0, [pc, #20]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c0:	f7ff fdb5 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200017a8 	.word	0x200017a8
 80078d4:	080080a8 	.word	0x080080a8

080078d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <Get_SerialNum+0x44>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <Get_SerialNum+0x48>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <Get_SerialNum+0x4c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078fe:	2208      	movs	r2, #8
 8007900:	4909      	ldr	r1, [pc, #36]	; (8007928 <Get_SerialNum+0x50>)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f814 	bl	8007930 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007908:	2204      	movs	r2, #4
 800790a:	4908      	ldr	r1, [pc, #32]	; (800792c <Get_SerialNum+0x54>)
 800790c:	68b8      	ldr	r0, [r7, #8]
 800790e:	f000 f80f 	bl	8007930 <IntToUnicode>
  }
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	1fff7a10 	.word	0x1fff7a10
 8007920:	1fff7a14 	.word	0x1fff7a14
 8007924:	1fff7a18 	.word	0x1fff7a18
 8007928:	2000016a 	.word	0x2000016a
 800792c:	2000017a 	.word	0x2000017a

08007930 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
 8007946:	e027      	b.n	8007998 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	2b09      	cmp	r3, #9
 800794e:	d80b      	bhi.n	8007968 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	0f1b      	lsrs	r3, r3, #28
 8007954:	b2da      	uxtb	r2, r3
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4619      	mov	r1, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	440b      	add	r3, r1
 8007960:	3230      	adds	r2, #48	; 0x30
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e00a      	b.n	800797e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0f1b      	lsrs	r3, r3, #28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4619      	mov	r1, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	440b      	add	r3, r1
 8007978:	3237      	adds	r2, #55	; 0x37
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	3301      	adds	r3, #1
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	3301      	adds	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	7dfa      	ldrb	r2, [r7, #23]
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	429a      	cmp	r2, r3
 800799e:	d3d3      	bcc.n	8007948 <IntToUnicode+0x18>
  }
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d0:	d13a      	bne.n	8007a48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	4a1d      	ldr	r2, [pc, #116]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	6313      	str	r3, [r2, #48]	; 0x30
 80079e2:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f4:	2302      	movs	r3, #2
 80079f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079fc:	2303      	movs	r3, #3
 80079fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a00:	230a      	movs	r3, #10
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a04:	f107 0314 	add.w	r3, r7, #20
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4812      	ldr	r0, [pc, #72]	; (8007a54 <HAL_PCD_MspInit+0xa4>)
 8007a0c:	f7f9 fe04 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	4a0e      	ldr	r2, [pc, #56]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a24:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a2c:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <HAL_PCD_MspInit+0xa0>)
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2043      	movs	r0, #67	; 0x43
 8007a3e:	f7f9 fdb4 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a42:	2043      	movs	r0, #67	; 0x43
 8007a44:	f7f9 fdcd 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a48:	bf00      	nop
 8007a4a:	3728      	adds	r7, #40	; 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40020000 	.word	0x40020000

08007a58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fe fcf6 	bl	8006460 <USBD_LL_SetupStage>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7fe fd30 	bl	800650a <USBD_LL_DataOutStage>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3348      	adds	r3, #72	; 0x48
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f7fe fd79 	bl	80065d0 <USBD_LL_DataInStage>
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fe8d 	bl	8006814 <USBD_LL_SOF>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d102      	bne.n	8007b1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
 8007b1a:	e008      	b.n	8007b2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d102      	bne.n	8007b2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e001      	b.n	8007b2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b2a:	f7f9 fa8b 	bl	8001044 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b34:	7bfa      	ldrb	r2, [r7, #15]
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fe2d 	bl	8006798 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fdd9 	bl	80066fc <USBD_LL_Reset>
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe28 	bl	80067b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <HAL_PCD_SuspendCallback+0x48>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	4a03      	ldr	r2, [pc, #12]	; (8007b9c <HAL_PCD_SuspendCallback+0x48>)
 8007b8e:	f043 0306 	orr.w	r3, r3, #6
 8007b92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	e000ed00 	.word	0xe000ed00

08007ba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fe18 	bl	80067e4 <USBD_LL_Resume>
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fe66 	bl	80068a4 <USBD_LL_IsoOUTIncomplete>
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fe2e 	bl	8006858 <USBD_LL_IsoINIncomplete>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fe6c 	bl	80068f0 <USBD_LL_DevConnected>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fe69 	bl	8006906 <USBD_LL_DevDisconnected>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d13c      	bne.n	8007cc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c4c:	4a20      	ldr	r2, [pc, #128]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c64:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c66:	2204      	movs	r2, #4
 8007c68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c6a:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c70:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c76:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c78:	2202      	movs	r2, #2
 8007c7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c7c:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c8e:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c94:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c9a:	480d      	ldr	r0, [pc, #52]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007c9c:	f7f9 fe71 	bl	8001982 <HAL_PCD_Init>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ca6:	f7f9 f9cd 	bl	8001044 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007caa:	2180      	movs	r1, #128	; 0x80
 8007cac:	4808      	ldr	r0, [pc, #32]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007cae:	f7fa ffce 	bl	8002c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cb2:	2240      	movs	r2, #64	; 0x40
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4806      	ldr	r0, [pc, #24]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007cb8:	f7fa ff82 	bl	8002bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <USBD_LL_Init+0x94>)
 8007cc2:	f7fa ff7d 	bl	8002bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200019a8 	.word	0x200019a8

08007cd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7f9 ff66 	bl	8001bbc <HAL_PCD_Start>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f942 	bl	8007f80 <USBD_Get_USB_Status>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	4608      	mov	r0, r1
 8007d14:	4611      	mov	r1, r2
 8007d16:	461a      	mov	r2, r3
 8007d18:	4603      	mov	r3, r0
 8007d1a:	70fb      	strb	r3, [r7, #3]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70bb      	strb	r3, [r7, #2]
 8007d20:	4613      	mov	r3, r2
 8007d22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d32:	78bb      	ldrb	r3, [r7, #2]
 8007d34:	883a      	ldrh	r2, [r7, #0]
 8007d36:	78f9      	ldrb	r1, [r7, #3]
 8007d38:	f7fa fb4a 	bl	80023d0 <HAL_PCD_EP_Open>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f91c 	bl	8007f80 <USBD_Get_USB_Status>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fa fb93 	bl	80024a0 <HAL_PCD_EP_Close>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f8fd 	bl	8007f80 <USBD_Get_USB_Status>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fa fc6b 	bl	800268e <HAL_PCD_EP_SetStall>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f8de 	bl	8007f80 <USBD_Get_USB_Status>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fa fcb0 	bl	8002756 <HAL_PCD_EP_ClrStall>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f8bf 	bl	8007f80 <USBD_Get_USB_Status>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da0b      	bge.n	8007e44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	333e      	adds	r3, #62	; 0x3e
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	e00b      	b.n	8007e5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fa fa7d 	bl	8002386 <HAL_PCD_SetAddress>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f874 	bl	8007f80 <USBD_Get_USB_Status>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ec4:	7af9      	ldrb	r1, [r7, #11]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	f7fa fb96 	bl	80025fa <HAL_PCD_EP_Transmit>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f853 	bl	8007f80 <USBD_Get_USB_Status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ede:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f06:	7af9      	ldrb	r1, [r7, #11]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	f7fa fb12 	bl	8002534 <HAL_PCD_EP_Receive>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f832 	bl	8007f80 <USBD_Get_USB_Status>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fa fb42 	bl	80025ca <HAL_PCD_EP_GetRxCount>
 8007f46:	4603      	mov	r3, r0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <USBD_static_malloc+0x18>)
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	20000214 	.word	0x20000214

08007f6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d817      	bhi.n	8007fc4 <USBD_Get_USB_Status+0x44>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <USBD_Get_USB_Status+0x1c>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fb3 	.word	0x08007fb3
 8007fa4:	08007fb9 	.word	0x08007fb9
 8007fa8:	08007fbf 	.word	0x08007fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb0:	e00b      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb6:	e008      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbc:	e005      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc2:	e002      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	bf00      	nop
  }
  return usb_status;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4d0d      	ldr	r5, [pc, #52]	; (8008010 <__libc_init_array+0x38>)
 8007fdc:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <__libc_init_array+0x3c>)
 8007fde:	1b64      	subs	r4, r4, r5
 8007fe0:	10a4      	asrs	r4, r4, #2
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	42a6      	cmp	r6, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	4d0b      	ldr	r5, [pc, #44]	; (8008018 <__libc_init_array+0x40>)
 8007fea:	4c0c      	ldr	r4, [pc, #48]	; (800801c <__libc_init_array+0x44>)
 8007fec:	f000 f82e 	bl	800804c <_init>
 8007ff0:	1b64      	subs	r4, r4, r5
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	2600      	movs	r6, #0
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008000:	4798      	blx	r3
 8008002:	3601      	adds	r6, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f855 3b04 	ldr.w	r3, [r5], #4
 800800a:	4798      	blx	r3
 800800c:	3601      	adds	r6, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	080085d0 	.word	0x080085d0
 8008014:	080085d0 	.word	0x080085d0
 8008018:	080085d0 	.word	0x080085d0
 800801c:	080085d4 	.word	0x080085d4

08008020 <memcpy>:
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	f100 33ff 	add.w	r3, r0, #4294967295
 8008028:	d100      	bne.n	800802c <memcpy+0xc>
 800802a:	4770      	bx	lr
 800802c:	b510      	push	{r4, lr}
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008036:	4291      	cmp	r1, r2
 8008038:	d1f9      	bne.n	800802e <memcpy+0xe>
 800803a:	bd10      	pop	{r4, pc}

0800803c <memset>:
 800803c:	4402      	add	r2, r0
 800803e:	4603      	mov	r3, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <_init>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

08008058 <_fini>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	bf00      	nop
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr
