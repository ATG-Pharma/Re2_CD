
Cartridge_Depositor_PCB_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007794  08007794  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800779c  0800779c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000184  08007928  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  08007928  00021d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016454  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ea  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000398f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c18  00000000  00000000  0003b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011560  00000000  00000000  0003ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbda7  00000000  00000000  00051488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d22f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  0010d284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007218 	.word	0x08007218

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08007218 	.word	0x08007218

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <ILI9341_SendCommand+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <ILI9341_SendCommand+0x58>)
 80004d4:	8811      	ldrh	r1, [r2, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f983 	bl	80017e4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <ILI9341_SendCommand+0x60>)
 80004e4:	8811      	ldrh	r1, [r2, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 f97b 	bl	80017e4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80004ee:	f107 010f 	add.w	r1, r7, #15
 80004f2:	2305      	movs	r3, #5
 80004f4:	2201      	movs	r2, #1
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <ILI9341_SendCommand+0x64>)
 80004f8:	f002 ffd3 	bl	80034a2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <ILI9341_SendCommand+0x60>)
 8000502:	8811      	ldrh	r1, [r2, #0]
 8000504:	2201      	movs	r2, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f001 f96c 	bl	80017e4 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000204 	.word	0x20000204
 8000518:	20000208 	.word	0x20000208
 800051c:	200001fc 	.word	0x200001fc
 8000520:	20000200 	.word	0x20000200
 8000524:	200001a4 	.word	0x200001a4

08000528 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <ILI9341_SendData+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <ILI9341_SendData+0x58>)
 800053c:	8811      	ldrh	r1, [r2, #0]
 800053e:	2201      	movs	r2, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f94f 	bl	80017e4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <ILI9341_SendData+0x5c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <ILI9341_SendData+0x60>)
 800054c:	8811      	ldrh	r1, [r2, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f947 	bl	80017e4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000556:	f107 010f 	add.w	r1, r7, #15
 800055a:	2305      	movs	r3, #5
 800055c:	2201      	movs	r2, #1
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9341_SendData+0x64>)
 8000560:	f002 ff9f 	bl	80034a2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <ILI9341_SendData+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <ILI9341_SendData+0x60>)
 800056a:	8811      	ldrh	r1, [r2, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f938 	bl	80017e4 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000204 	.word	0x20000204
 8000580:	20000208 	.word	0x20000208
 8000584:	200001fc 	.word	0x200001fc
 8000588:	20000200 	.word	0x20000200
 800058c:	200001a4 	.word	0x200001a4

08000590 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4623      	mov	r3, r4
 80005a0:	80fb      	strh	r3, [r7, #6]
 80005a2:	4603      	mov	r3, r0
 80005a4:	80bb      	strh	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
 80005aa:	4613      	mov	r3, r2
 80005ac:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f7ff ff86 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffb3 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffae 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffa7 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa2 	bl	8000528 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80005e4:	202b      	movs	r0, #43	; 0x2b
 80005e6:	f7ff ff6b 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff98 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff93 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000602:	883b      	ldrh	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff8c 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff87 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ff50 	bl	80004c0 <ILI9341_SendCommand>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	4853      	ldr	r0, [pc, #332]	; (800078c <ILI9341_Init+0x164>)
 800063e:	f006 fdd5 	bl	80071ec <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000642:	4a53      	ldr	r2, [pc, #332]	; (8000790 <ILI9341_Init+0x168>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000648:	4a52      	ldr	r2, [pc, #328]	; (8000794 <ILI9341_Init+0x16c>)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800064e:	4a52      	ldr	r2, [pc, #328]	; (8000798 <ILI9341_Init+0x170>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000654:	4a51      	ldr	r2, [pc, #324]	; (800079c <ILI9341_Init+0x174>)
 8000656:	8b3b      	ldrh	r3, [r7, #24]
 8000658:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <ILI9341_Init+0x168>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a4d      	ldr	r2, [pc, #308]	; (8000794 <ILI9341_Init+0x16c>)
 8000660:	8811      	ldrh	r1, [r2, #0]
 8000662:	2201      	movs	r2, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f8bd 	bl	80017e4 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800066a:	4a4d      	ldr	r2, [pc, #308]	; (80007a0 <ILI9341_Init+0x178>)
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000670:	4a4c      	ldr	r2, [pc, #304]	; (80007a4 <ILI9341_Init+0x17c>)
 8000672:	8c3b      	ldrh	r3, [r7, #32]
 8000674:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000676:	8c3b      	ldrh	r3, [r7, #32]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	69f8      	ldr	r0, [r7, #28]
 800067e:	f001 f8b1 	bl	80017e4 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff1c 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fdd9 	bl	8001240 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800068e:	2028      	movs	r0, #40	; 0x28
 8000690:	f7ff ff16 	bl	80004c0 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000694:	20c0      	movs	r0, #192	; 0xc0
 8000696:	f7ff ff13 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f7ff ff44 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80006a0:	20c1      	movs	r0, #193	; 0xc1
 80006a2:	f7ff ff0d 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80006a6:	2011      	movs	r0, #17
 80006a8:	f7ff ff3e 	bl	8000528 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80006ac:	20c5      	movs	r0, #197	; 0xc5
 80006ae:	f7ff ff07 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80006b2:	2035      	movs	r0, #53	; 0x35
 80006b4:	f7ff ff38 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80006b8:	203e      	movs	r0, #62	; 0x3e
 80006ba:	f7ff ff35 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80006be:	20c7      	movs	r0, #199	; 0xc7
 80006c0:	f7ff fefe 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80006c4:	20be      	movs	r0, #190	; 0xbe
 80006c6:	f7ff ff2f 	bl	8000528 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f7ff fef8 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80006d0:	2048      	movs	r0, #72	; 0x48
 80006d2:	f7ff ff29 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80006d6:	203a      	movs	r0, #58	; 0x3a
 80006d8:	f7ff fef2 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80006dc:	2055      	movs	r0, #85	; 0x55
 80006de:	f7ff ff23 	bl	8000528 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80006e2:	20b1      	movs	r0, #177	; 0xb1
 80006e4:	f7ff feec 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff1d 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80006ee:	201f      	movs	r0, #31
 80006f0:	f7ff ff1a 	bl	8000528 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80006f4:	202a      	movs	r0, #42	; 0x2a
 80006f6:	f7ff fee3 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff14 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff11 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff0e 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800070c:	20ef      	movs	r0, #239	; 0xef
 800070e:	f7ff ff0b 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000712:	202b      	movs	r0, #43	; 0x2b
 8000714:	f7ff fed4 	bl	80004c0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff05 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff02 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff feff 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f7ff fefc 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000730:	2034      	movs	r0, #52	; 0x34
 8000732:	f7ff fec5 	bl	80004c0 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000736:	20b7      	movs	r0, #183	; 0xb7
 8000738:	f7ff fec2 	bl	80004c0 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800073c:	2007      	movs	r0, #7
 800073e:	f7ff fef3 	bl	8000528 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000742:	20b6      	movs	r0, #182	; 0xb6
 8000744:	f7ff febc 	bl	80004c0 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000748:	200a      	movs	r0, #10
 800074a:	f7ff feed 	bl	8000528 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800074e:	2082      	movs	r0, #130	; 0x82
 8000750:	f7ff feea 	bl	8000528 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000754:	2027      	movs	r0, #39	; 0x27
 8000756:	f7ff fee7 	bl	8000528 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fee4 	bl	8000528 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000760:	2011      	movs	r0, #17
 8000762:	f7ff fead 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fd6a 	bl	8001240 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 800076c:	2029      	movs	r0, #41	; 0x29
 800076e:	f7ff fea7 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f000 fd64 	bl	8001240 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000778:	202c      	movs	r0, #44	; 0x2c
 800077a:	f7ff fea1 	bl	80004c0 <ILI9341_SendCommand>
   HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fd5e 	bl	8001240 <HAL_Delay>
 }
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001a4 	.word	0x200001a4
 8000790:	200001fc 	.word	0x200001fc
 8000794:	20000200 	.word	0x20000200
 8000798:	20000204 	.word	0x20000204
 800079c:	20000208 	.word	0x20000208
 80007a0:	2000020c 	.word	0x2000020c
 80007a4:	20000210 	.word	0x20000210

080007a8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	80bb      	strh	r3, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	88fa      	ldrh	r2, [r7, #6]
 80007be:	88b9      	ldrh	r1, [r7, #4]
 80007c0:	88f8      	ldrh	r0, [r7, #6]
 80007c2:	f7ff fee5 	bl	8000590 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff feaa 	bl	8000528 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fea5 	bl	8000528 <ILI9341_SendData>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80007f2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80007f6:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <ILI9341_Fill+0x84>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d003      	beq.n	800080c <ILI9341_Fill+0x24>
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <ILI9341_Fill+0x84>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d107      	bne.n	800081c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800080c:	f240 133f 	movw	r3, #319	; 0x13f
 8000810:	22ef      	movs	r2, #239	; 0xef
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff febb 	bl	8000590 <ILI9341_SetCursorPosition>
 800081a:	e00e      	b.n	800083a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <ILI9341_Fill+0x84>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d003      	beq.n	800082c <ILI9341_Fill+0x44>
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <ILI9341_Fill+0x84>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d116      	bne.n	800085a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800082c:	23ef      	movs	r3, #239	; 0xef
 800082e:	f240 123f 	movw	r2, #319	; 0x13f
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff feab 	bl	8000590 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800083a:	e00e      	b.n	800085a <ILI9341_Fill+0x72>
			n--;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3b01      	subs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	b29b      	uxth	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe6c 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe67 	bl	8000528 <ILI9341_SendData>
	while (n) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1ed      	bne.n	800083c <ILI9341_Fill+0x54>
	}
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	3301      	adds	r3, #1
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	1a8a      	subs	r2, r1, r2
 800088c:	3201      	adds	r2, #1
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800089a:	d902      	bls.n	80008a2 <ILI9341_Fill_Rect+0x32>
 800089c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008a0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b298      	uxth	r0, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f7ff fe6d 	bl	8000590 <ILI9341_SetCursorPosition>
	while (n) {
 80008b6:	e00e      	b.n	80008d6 <ILI9341_Fill_Rect+0x66>
			n--;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80008be:	8c3b      	ldrh	r3, [r7, #32]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe2e 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80008cc:	8c3b      	ldrh	r3, [r7, #32]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe29 	bl	8000528 <ILI9341_SendData>
	while (n) {
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ed      	bne.n	80008b8 <ILI9341_Fill_Rect+0x48>
	}
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80008e8:	b5b0      	push	{r4, r5, r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
 8000902:	4613      	mov	r3, r2
 8000904:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000906:	4b98      	ldr	r3, [pc, #608]	; (8000b68 <ILI9341_drawChar+0x280>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d003      	beq.n	8000916 <ILI9341_drawChar+0x2e>
 800090e:	4b96      	ldr	r3, [pc, #600]	; (8000b68 <ILI9341_drawChar+0x280>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d11f      	bne.n	8000956 <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091a:	2bef      	cmp	r3, #239	; 0xef
 800091c:	f300 811d 	bgt.w	8000b5a <ILI9341_drawChar+0x272>
 8000920:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000924:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000928:	f280 8117 	bge.w	8000b5a <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800092c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000930:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 800093e:	2b00      	cmp	r3, #0
 8000940:	f340 810b 	ble.w	8000b5a <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc21      	bgt.n	8000998 <ILI9341_drawChar+0xb0>
    return;
 8000954:	e101      	b.n	8000b5a <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800095a:	2bef      	cmp	r3, #239	; 0xef
 800095c:	f300 80ff 	bgt.w	8000b5e <ILI9341_drawChar+0x276>
 8000960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000964:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000968:	f280 80f9 	bge.w	8000b5e <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800096c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000970:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 800097e:	2b00      	cmp	r3, #0
 8000980:	f340 80ed 	ble.w	8000b5e <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000984:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000990:	2b00      	cmp	r3, #0
 8000992:	f340 80e4 	ble.w	8000b5e <ILI9341_drawChar+0x276>
 8000996:	e000      	b.n	800099a <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000998:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800099a:	4b74      	ldr	r3, [pc, #464]	; (8000b6c <ILI9341_drawChar+0x284>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <ILI9341_drawChar+0xcc>
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2baf      	cmp	r3, #175	; 0xaf
 80009ac:	d902      	bls.n	80009b4 <ILI9341_drawChar+0xcc>
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	3301      	adds	r3, #1
 80009b2:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e0c9      	b.n	8000b4e <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d102      	bne.n	80009c8 <ILI9341_drawChar+0xe0>
      line = 0x0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]
 80009c6:	e00b      	b.n	80009e0 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 80009c8:	78fa      	ldrb	r2, [r7, #3]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a65      	ldr	r2, [pc, #404]	; (8000b70 <ILI9341_drawChar+0x288>)
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	737b      	strb	r3, [r7, #13]
 80009e4:	e0a8      	b.n	8000b38 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d04b      	beq.n	8000a88 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 80009f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d110      	bne.n	8000a1a <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 80009f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	4413      	add	r3, r2
 8000a02:	b298      	uxth	r0, r3
 8000a04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	883a      	ldrh	r2, [r7, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	f7ff fec8 	bl	80007a8 <ILI9341_DrawPixel>
 8000a18:	e085      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a26:	fb01 f303 	mul.w	r3, r1, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a36:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a3a:	fb01 f303 	mul.w	r3, r1, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	461c      	mov	r4, r3
 8000a42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	441a      	add	r2, r3
 8000a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a50:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a66:	441a      	add	r2, r3
 8000a68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a6c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a70:	fb01 f303 	mul.w	r3, r1, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	883b      	ldrh	r3, [r7, #0]
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	462a      	mov	r2, r5
 8000a80:	4621      	mov	r1, r4
 8000a82:	f7ff fef5 	bl	8000870 <ILI9341_Fill_Rect>
 8000a86:	e04e      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8000a88:	8c3a      	ldrh	r2, [r7, #32]
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d04a      	beq.n	8000b26 <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000a90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d110      	bne.n	8000aba <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	8c3a      	ldrh	r2, [r7, #32]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f7ff fe78 	bl	80007a8 <ILI9341_DrawPixel>
 8000ab8:	e035      	b.n	8000b26 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000aba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ac6:	fb01 f303 	mul.w	r3, r1, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ad6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ada:	fb01 f303 	mul.w	r3, r1, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	441a      	add	r2, r3
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	461d      	mov	r5, r3
 8000afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b06:	441a      	add	r2, r3
 8000b08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b0c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	461a      	mov	r2, r3
 8000b18:	8c3b      	ldrh	r3, [r7, #32]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	462a      	mov	r2, r5
 8000b20:	4621      	mov	r1, r4
 8000b22:	f7ff fea5 	bl	8000870 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000b2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	737b      	strb	r3, [r7, #13]
 8000b38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	f77f af52 	ble.w	80009e6 <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	f77f af31 	ble.w	80009ba <ILI9341_drawChar+0xd2>
 8000b58:	e002      	b.n	8000b60 <ILI9341_drawChar+0x278>
    return;
 8000b5a:	bf00      	nop
 8000b5c:	e000      	b.n	8000b60 <ILI9341_drawChar+0x278>
    return;
 8000b5e:	bf00      	nop
    }
  }
}
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bdb0      	pop	{r4, r5, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200001a0 	.word	0x200001a0
 8000b70:	08007284 	.word	0x08007284

08000b74 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	817b      	strh	r3, [r7, #10]
 8000b86:	460b      	mov	r3, r1
 8000b88:	813b      	strh	r3, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	0052      	lsls	r2, r2, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	82fb      	strh	r3, [r7, #22]
 8000ba4:	e01a      	b.n	8000bdc <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	8afa      	ldrh	r2, [r7, #22]
 8000baa:	fb12 f303 	smulbb	r3, r2, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	897b      	ldrh	r3, [r7, #10]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b218      	sxth	r0, r3
 8000bb8:	8afb      	ldrh	r3, [r7, #22]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	88fc      	ldrh	r4, [r7, #6]
 8000bc2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	f7ff fe89 	bl	80008e8 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	82fb      	strh	r3, [r7, #22]
 8000bdc:	8afb      	ldrh	r3, [r7, #22]
 8000bde:	2b27      	cmp	r3, #39	; 0x27
 8000be0:	d805      	bhi.n	8000bee <ILI9341_printText+0x7a>
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1db      	bne.n	8000ba6 <ILI9341_printText+0x32>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}
	...

08000bf8 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d832      	bhi.n	8000c70 <ILI9341_setRotation+0x78>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <ILI9341_setRotation+0x18>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c35 	.word	0x08000c35
 8000c18:	08000c49 	.word	0x08000c49
 8000c1c:	08000c5d 	.word	0x08000c5d
	{
		case 1:
			rotationNum = 1;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f7ff fc4a 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c2c:	2088      	movs	r0, #136	; 0x88
 8000c2e:	f7ff fc7b 	bl	8000528 <ILI9341_SendData>
			break;
 8000c32:	e027      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c3a:	2036      	movs	r0, #54	; 0x36
 8000c3c:	f7ff fc40 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f7ff fc71 	bl	8000528 <ILI9341_SendData>
			break;
 8000c46:	e01d      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f7ff fc36 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000c54:	2048      	movs	r0, #72	; 0x48
 8000c56:	f7ff fc67 	bl	8000528 <ILI9341_SendData>
			break;
 8000c5a:	e013      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c62:	2036      	movs	r0, #54	; 0x36
 8000c64:	f7ff fc2c 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c68:	20e8      	movs	r0, #232	; 0xe8
 8000c6a:	f7ff fc5d 	bl	8000528 <ILI9341_SendData>
			break;
 8000c6e:	e009      	b.n	8000c84 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <ILI9341_setRotation+0x94>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c76:	2036      	movs	r0, #54	; 0x36
 8000c78:	f7ff fc22 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c7c:	2088      	movs	r0, #136	; 0x88
 8000c7e:	f7ff fc53 	bl	8000528 <ILI9341_SendData>
			break;
 8000c82:	bf00      	nop
	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000

08000c90 <move1Sec>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void move1Sec(GPIO_PinState dir){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (I2C_SDA_GPIO_Port, I2C_SDA_Pin, dir);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <move1Sec+0x44>)
 8000ca2:	f000 fd9f 	bl	80017e4 <HAL_GPIO_WritePin>
	int t = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
	while(t<1000){
 8000caa:	e009      	b.n	8000cc0 <move1Sec+0x30>
		HAL_GPIO_TogglePin (I2C_SCL_GPIO_Port, I2C_SCL_Pin);
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <move1Sec+0x44>)
 8000cb0:	f000 fdb1 	bl	8001816 <HAL_GPIO_TogglePin>
		HAL_Delay (1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 fac3 	bl	8001240 <HAL_Delay>
		t++;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
	while(t<1000){
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc6:	dbf1      	blt.n	8000cac <move1Sec+0x1c>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 fa3d 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f839 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f8d9 	bl	8000e9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cea:	f000 f8a1 	bl	8000e30 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000cee:	f005 fd65 	bl	80067bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <main+0x74>)
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <main+0x74>)
 8000d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d08:	4910      	ldr	r1, [pc, #64]	; (8000d4c <main+0x74>)
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <main+0x78>)
 8000d0c:	f7ff fc8c 	bl	8000628 <ILI9341_Init>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <main+0x74>)
 8000d16:	f000 fd65 	bl	80017e4 <HAL_GPIO_WritePin>
  ILI9341_setRotation(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff6c 	bl	8000bf8 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_BLUE);
 8000d20:	201f      	movs	r0, #31
 8000d22:	f7ff fd61 	bl	80007e8 <ILI9341_Fill>
  ILI9341_printText("Hello World", 20, 40, COLOR_WHITE, COLOR_BLACK, 2);
 8000d26:	2302      	movs	r3, #2
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2114      	movs	r1, #20
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <main+0x7c>)
 8000d38:	f7ff ff1c 	bl	8000b74 <ILI9341_printText>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  move1Sec(DIR_POS);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff ffa7 	bl	8000c90 <move1Sec>
	  move1Sec(DIR_NEG);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ffa4 	bl	8000c90 <move1Sec>
	  move1Sec(DIR_POS);
 8000d48:	e7f8      	b.n	8000d3c <main+0x64>
 8000d4a:	bf00      	nop
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	20000434 	.word	0x20000434
 8000d54:	08007230 	.word	0x08007230

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fa4e 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <SystemClock_Config+0xd4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <SystemClock_Config+0xd4>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <SystemClock_Config+0xd4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000dd4:	2390      	movs	r3, #144	; 0x90
 8000dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 feb3 	bl	8002b50 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000df0:	f000 f8ce 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 f916 	bl	8003040 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e1a:	f000 f8b9 	bl	8000f90 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f002 fa85 	bl	8003390 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f880 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000434 	.word	0x20000434
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_GPIO_Init+0xe8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000f28:	f000 fc5c 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000f32:	4815      	ldr	r0, [pc, #84]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000f34:	f000 fc56 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I2C_SCL_Pin|I2C_SDA_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	21c0      	movs	r1, #192	; 0xc0
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <MX_GPIO_Init+0xf0>)
 8000f3e:	f000 fc51 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000f42:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000f5c:	f000 faa6 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_GPIO_Init+0xf0>)
 8000f78:	f000 fa98 	bl	80014ac <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_SPI_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_SPI_MspInit+0x88>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x88>)
 8001018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_SPI_MspInit+0x88>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_SPI_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_SPI_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_SPI_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001046:	23e0      	movs	r3, #224	; 0xe0
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_SPI_MspInit+0x8c>)
 8001062:	f000 fa23 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013000 	.word	0x40013000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f89a 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <OTG_FS_IRQHandler+0x10>)
 80010d6:	f000 fd08 	bl	8001aea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20001960 	.word	0x20001960

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd7 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f006 f835 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fdcd 	bl	8000cd8 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800114c:	080077a4 	.word	0x080077a4
  ldr r2, =_sbss
 8001150:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001154:	20001d68 	.word	0x20001d68

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f94f 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff ff04 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f967 	bl	8001492 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f92f 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000004 	.word	0x20000004
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	20000008 	.word	0x20000008

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000000c 	.word	0x2000000c
 8001224:	2000048c 	.word	0x2000048c

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000048c 	.word	0x2000048c

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000000c 	.word	0x2000000c

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e16b      	b.n	80017a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 815a 	bne.w	800179a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d130      	bne.n	8001560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d017      	beq.n	800159c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d123      	bne.n	80015f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0203 	and.w	r2, r3, #3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80b4 	beq.w	800179a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a5f      	ldr	r2, [pc, #380]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_GPIO_Init+0x310>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x314>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x318>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_Init+0x222>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <HAL_GPIO_Init+0x31c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_Init+0x21e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x320>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x21a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x324>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x216>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x328>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x212>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x32c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x20e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_GPIO_Init+0x330>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x20a>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00e      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016b6:	2308      	movs	r3, #8
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x310>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_GPIO_Init+0x334>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_GPIO_Init+0x334>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_GPIO_Init+0x334>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae90 	bls.w	80014c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43d9      	mvns	r1, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	400b      	ands	r3, r1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800184a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184c:	b08f      	sub	sp, #60	; 0x3c
 800184e:	af0a      	add	r7, sp, #40	; 0x28
 8001850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e10f      	b.n	8001a7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f005 f980 	bl	8006b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f91d 	bl	8003ada <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	687e      	ldr	r6, [r7, #4]
 80018a8:	466d      	mov	r5, sp
 80018aa:	f106 0410 	add.w	r4, r6, #16
 80018ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80018be:	1d33      	adds	r3, r6, #4
 80018c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f001 fff4 	bl	80038b0 <USB_CoreInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0d0      	b.n	8001a7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f90b 	bl	8003afc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e04a      	b.n	8001982 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	333d      	adds	r3, #61	; 0x3d
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	333c      	adds	r3, #60	; 0x3c
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	b298      	uxth	r0, r3
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	3342      	adds	r3, #66	; 0x42
 8001928:	4602      	mov	r2, r0
 800192a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	333f      	adds	r3, #63	; 0x3f
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3344      	adds	r3, #68	; 0x44
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3348      	adds	r3, #72	; 0x48
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3350      	adds	r3, #80	; 0x50
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3301      	adds	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3af      	bcc.n	80018ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e044      	b.n	8001a1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3b5      	bcc.n	8001992 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	687e      	ldr	r6, [r7, #4]
 8001a2e:	466d      	mov	r5, sp
 8001a30:	f106 0410 	add.w	r4, r6, #16
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a44:	1d33      	adds	r3, r6, #4
 8001a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f002 f881 	bl	8003b50 <USB_DevInit>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00d      	b.n	8001a7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f8c9 	bl	8004c0c <USB_DevDisconnect>

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_Start+0x1c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e020      	b.n	8001ae2 <HAL_PCD_Start+0x5e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d109      	bne.n	8001ac4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fff5 	bl	8003ab8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f879 	bl	8004bca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b08d      	sub	sp, #52	; 0x34
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 f937 	bl	8004d74 <USB_GetMode>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 839d 	bne.w	8002248 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f89b 	bl	8004c4e <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8393 	beq.w	8002246 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 f892 	bl	8004c4e <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f002 0202 	and.w	r2, r2, #2
 8001b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f880 	bl	8004c4e <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d161      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0210 	bic.w	r2, r2, #16
 8001b66:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	0c5b      	lsrs	r3, r3, #17
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d124      	bne.n	8001bde <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d035      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6a38      	ldr	r0, [r7, #32]
 8001bb4:	f002 fee6 	bl	8004984 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc4:	441a      	add	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd6:	441a      	add	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e016      	b.n	8001c0c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	0c5b      	lsrs	r3, r3, #17
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d110      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6a38      	ldr	r0, [r7, #32]
 8001bf6:	f002 fec5 	bl	8004984 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c06:	441a      	add	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f814 	bl	8004c4e <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c30:	d16e      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f81a 	bl	8004c74 <USB_ReadDevAllOutEpInterrupt>
 8001c40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c42:	e062      	b.n	8001d0a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d057      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f83f 	bl	8004cdc <USB_ReadDevOutEPInterrupt>
 8001c5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c76:	461a      	mov	r2, r3
 8001c78:	2301      	movs	r3, #1
 8001c7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fdb0 	bl	80027e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 feaa 	bl	80029fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2320      	movs	r3, #32
 8001cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d199      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 ff9a 	bl	8004c4e <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d24:	f040 80c0 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 ffbb 	bl	8004ca8 <USB_ReadDevAllInEpInterrupt>
 8001d32:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d38:	e0b2      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a7 	beq.w	8001e94 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 ffe1 	bl	8004d18 <USB_ReadDevInEPInterrupt>
 8001d56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d057      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2201      	movs	r2, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69f9      	ldr	r1, [r7, #28]
 8001d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d82:	4013      	ands	r3, r2
 8001d84:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d92:	461a      	mov	r2, r3
 8001d94:	2301      	movs	r3, #1
 8001d96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d132      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3348      	adds	r3, #72	; 0x48
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4403      	add	r3, r0
 8001dc0:	3344      	adds	r3, #68	; 0x44
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4419      	add	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4403      	add	r3, r0
 8001dd4:	3348      	adds	r3, #72	; 0x48
 8001dd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d113      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3350      	adds	r3, #80	; 0x50
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d108      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2101      	movs	r1, #1
 8001e02:	f002 ffe9 	bl	8004dd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f004 ff36 	bl	8006c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e44:	461a      	mov	r2, r3
 8001e46:	2310      	movs	r3, #16
 8001e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e60:	461a      	mov	r2, r3
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2302      	movs	r3, #2
 8001e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fc1b 	bl	80026ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3301      	adds	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f47f af49 	bne.w	8001d3a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fece 	bl	8004c4e <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ebc:	d122      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fe26 	bl	8002b38 <HAL_PCDEx_LPM_Callback>
 8001eec:	e002      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f004 ff3c 	bl	8006d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fea0 	bl	8004c4e <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f18:	d112      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f004 fef8 	bl	8006d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fe82 	bl	8004c4e <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f54:	f040 80c7 	bne.w	80020e6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2110      	movs	r1, #16
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 ff50 	bl	8003e18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7c:	e056      	b.n	800202c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fb0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc2:	0151      	lsls	r1, r2, #5
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fe4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff6:	0151      	lsls	r1, r2, #5
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	440a      	add	r2, r1
 8001ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002016:	0151      	lsls	r1, r2, #5
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	440a      	add	r2, r1
 800201c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002024:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	3301      	adds	r3, #1
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002032:	429a      	cmp	r2, r3
 8002034:	d3a3      	bcc.n	8001f7e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002044:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002048:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002062:	f043 030b 	orr.w	r3, r3, #11
 8002066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002078:	f043 030b 	orr.w	r3, r3, #11
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	e015      	b.n	80020ac <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800208e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002092:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002096:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a6:	f043 030b 	orr.w	r3, r3, #11
 80020aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020d0:	461a      	mov	r2, r3
 80020d2:	f002 fe81 	bl	8004dd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fdaf 	bl	8004c4e <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fa:	d124      	bne.n	8002146 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fe45 	bl	8004d90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f001 fee5 	bl	8003eda <USB_GetDevSpeed>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	f001 f92c 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8002120:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4620      	mov	r0, r4
 800212c:	f001 fc22 	bl	8003974 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f004 fdcc 	bl	8006cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002144:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fd7f 	bl	8004c4e <USB_ReadInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b08      	cmp	r3, #8
 8002158:	d10a      	bne.n	8002170 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f004 fda9 	bl	8006cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f002 0208 	and.w	r2, r2, #8
 800216e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fd6a 	bl	8004c4e <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002184:	d10f      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f004 fe0b 	bl	8006dac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fd4f 	bl	8004c4e <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ba:	d10f      	bne.n	80021dc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f004 fdde 	bl	8006d88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fd34 	bl	8004c4e <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f0:	d10a      	bne.n	8002208 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f004 fdec 	bl	8006dd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fd1e 	bl	8004c4e <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b04      	cmp	r3, #4
 800221a:	d115      	bne.n	8002248 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 fddc 	bl	8006dec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	e000      	b.n	8002248 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002246:	bf00      	nop
    }
  }
}
 8002248:	3734      	adds	r7, #52	; 0x34
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}

0800224e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_PCD_SetAddress+0x1a>
 8002264:	2302      	movs	r3, #2
 8002266:	e013      	b.n	8002290 <HAL_PCD_SetAddress+0x42>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fc7c 	bl	8004b7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	70fb      	strb	r3, [r7, #3]
 80022aa:	460b      	mov	r3, r1
 80022ac:	803b      	strh	r3, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	da0f      	bge.n	80022de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3338      	adds	r3, #56	; 0x38
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	705a      	strb	r2, [r3, #1]
 80022dc:	e00f      	b.n	80022fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 020f 	and.w	r2, r3, #15
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	3304      	adds	r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800230a:	883a      	ldrh	r2, [r7, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	78ba      	ldrb	r2, [r7, #2]
 8002314:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002328:	78bb      	ldrb	r3, [r7, #2]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d102      	bne.n	8002334 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_PCD_EP_Open+0xaa>
 800233e:	2302      	movs	r3, #2
 8002340:	e00e      	b.n	8002360 <HAL_PCD_EP_Open+0xc8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fde7 	bl	8003f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800235e:	7afb      	ldrb	r3, [r7, #11]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da0f      	bge.n	800239c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3338      	adds	r3, #56	; 0x38
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	705a      	strb	r2, [r3, #1]
 800239a:	e00f      	b.n	80023bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PCD_EP_Close+0x6e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e00e      	b.n	80023f4 <HAL_PCD_EP_Close+0x8c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fe25 	bl	8004034 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	460b      	mov	r3, r1
 800240a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	b2da      	uxtb	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	f002 f900 	bl	8004674 <USB_EP0StartXfer>
 8002474:	e008      	b.n	8002488 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6979      	ldr	r1, [r7, #20]
 8002484:	f001 feb2 	bl	80041ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024b4:	681b      	ldr	r3, [r3, #0]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3338      	adds	r3, #56	; 0x38
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	b2da      	uxtb	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6979      	ldr	r1, [r7, #20]
 8002534:	f002 f89e 	bl	8004674 <USB_EP0StartXfer>
 8002538:	e008      	b.n	800254c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	6979      	ldr	r1, [r7, #20]
 8002548:	f001 fe50 	bl	80041ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d901      	bls.n	8002574 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e050      	b.n	8002616 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	da0f      	bge.n	800259c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	3338      	adds	r3, #56	; 0x38
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
 800259a:	e00d      	b.n	80025b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_EP_SetStall+0x82>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e01e      	b.n	8002616 <HAL_PCD_EP_SetStall+0xc0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 f9f5 	bl	80049d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	b2d9      	uxtb	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002606:	461a      	mov	r2, r3
 8002608:	f002 fbe6 	bl	8004dd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d901      	bls.n	800263c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e042      	b.n	80026c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800263c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da0f      	bge.n	8002664 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	3338      	adds	r3, #56	; 0x38
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	3304      	adds	r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	705a      	strb	r2, [r3, #1]
 8002662:	e00f      	b.n	8002684 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 020f 	and.w	r2, r3, #15
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_PCD_EP_ClrStall+0x86>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e00e      	b.n	80026c2 <HAL_PCD_EP_ClrStall+0xa4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 f9fd 	bl	8004ab2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08a      	sub	sp, #40	; 0x28
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	3338      	adds	r3, #56	; 0x38
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	3304      	adds	r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d901      	bls.n	8002702 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06c      	b.n	80027dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3303      	adds	r3, #3
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002726:	e02b      	b.n	8002780 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	429a      	cmp	r2, r3
 800273c:	d902      	bls.n	8002744 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3303      	adds	r3, #3
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68d9      	ldr	r1, [r3, #12]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800275c:	b2db      	uxtb	r3, r3
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4603      	mov	r3, r0
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f002 f8d9 	bl	800491a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	441a      	add	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	441a      	add	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	b29b      	uxth	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	429a      	cmp	r2, r3
 8002794:	d809      	bhi.n	80027aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800279e:	429a      	cmp	r2, r3
 80027a0:	d203      	bcs.n	80027aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1be      	bne.n	8002728 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d811      	bhi.n	80027da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	2201      	movs	r2, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d6:	4013      	ands	r3, r2
 80027d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	333c      	adds	r3, #60	; 0x3c
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	f040 80a0 	bne.w	800295c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800282a:	4293      	cmp	r3, r2
 800282c:	f240 80dd 	bls.w	80029ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80d7 	beq.w	80029ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	461a      	mov	r2, r3
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	e0cb      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	461a      	mov	r2, r3
 800286a:	2320      	movs	r3, #32
 800286c:	6093      	str	r3, [r2, #8]
 800286e:	e0bc      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 80b7 	bne.w	80029ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a5d      	ldr	r2, [pc, #372]	; (80029f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d90f      	bls.n	80028a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a0:	6093      	str	r3, [r2, #8]
 80028a2:	e0a2      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	0159      	lsls	r1, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	440b      	add	r3, r1
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80028ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4403      	add	r3, r0
 80028da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4419      	add	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4403      	add	r3, r0
 8002918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800291c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d114      	bne.n	800294e <PCD_EP_OutXfrComplete_int+0x16a>
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002946:	461a      	mov	r2, r3
 8002948:	2101      	movs	r1, #1
 800294a:	f002 fa45 	bl	8004dd8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f004 f977 	bl	8006c48 <HAL_PCD_DataOutStageCallback>
 800295a:	e046      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d124      	bne.n	80029ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002980:	6093      	str	r3, [r2, #8]
 8002982:	e032      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299a:	461a      	mov	r2, r3
 800299c:	2320      	movs	r3, #32
 800299e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f004 f94e 	bl	8006c48 <HAL_PCD_DataOutStageCallback>
 80029ac:	e01d      	b.n	80029ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d114      	bne.n	80029de <PCD_EP_OutXfrComplete_int+0x1fa>
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d6:	461a      	mov	r2, r3
 80029d8:	2100      	movs	r1, #0
 80029da:	f002 f9fd 	bl	8004dd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f004 f92f 	bl	8006c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	4f54300a 	.word	0x4f54300a
 80029f8:	4f54310a 	.word	0x4f54310a

080029fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	333c      	adds	r3, #60	; 0x3c
 8002a14:	3304      	adds	r3, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d90e      	bls.n	8002a50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f004 f8e7 	bl	8006c24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d90c      	bls.n	8002a78 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a70:	461a      	mov	r2, r3
 8002a72:	2101      	movs	r1, #1
 8002a74:	f002 f9b0 	bl	8004dd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	4f54300a 	.word	0x4f54300a

08002a88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
 8002a94:	4613      	mov	r3, r2
 8002a96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aa6:	883b      	ldrh	r3, [r7, #0]
 8002aa8:	0419      	lsls	r1, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab4:	e028      	b.n	8002b08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e00d      	b.n	8002ae6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3340      	adds	r3, #64	; 0x40
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3ec      	bcc.n	8002aca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002af0:	883b      	ldrh	r3, [r7, #0]
 8002af2:	0418      	lsls	r0, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6819      	ldr	r1, [r3, #0]
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4302      	orrs	r2, r0
 8002b00:	3340      	adds	r3, #64	; 0x40
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e264      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d075      	beq.n	8002c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	4ba3      	ldr	r3, [pc, #652]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4ba0      	ldr	r3, [pc, #640]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d112      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d157      	bne.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e23f      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x74>
 8002bb6:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a90      	ldr	r2, [pc, #576]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8a      	ldr	r2, [pc, #552]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002be8:	4b84      	ldr	r3, [pc, #528]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a83      	ldr	r2, [pc, #524]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fb0e 	bl	8001228 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fb0a 	bl	8001228 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e204      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fafa 	bl	8001228 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe faf6 	bl	8001228 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1f0      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1c4      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4952      	ldr	r1, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe faaf 	bl	8001228 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fe faab 	bl	8001228 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1a5      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4940      	ldr	r1, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fa8e 	bl	8001228 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7fe fa8a 	bl	8001228 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e184      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d030      	beq.n	8002d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fa6e 	bl	8001228 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fe fa6a 	bl	8001228 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e164      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x200>
 8002d6e:	e015      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fa57 	bl	8001228 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fa53 	bl	8001228 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e14d      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a0 	beq.w	8002eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fa19 	bl	8001228 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e011      	b.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	42470e80 	.word	0x42470e80
 8002e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe fa0c 	bl	8001228 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e106      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x4e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a80      	ldr	r2, [pc, #512]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e48:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a7a      	ldr	r2, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b78      	ldr	r3, [pc, #480]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a77      	ldr	r2, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e62:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a74      	ldr	r2, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a71      	ldr	r2, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe f9d1 	bl	8001228 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f9cd 	bl	8001228 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0c5      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ee      	beq.n	8002e8a <HAL_RCC_OscConfig+0x33a>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe f9bb 	bl	8001228 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe f9b7 	bl	8001228 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0af      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a55      	ldr	r2, [pc, #340]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 809b 	beq.w	800302a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d05c      	beq.n	8002fba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d141      	bne.n	8002f8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f98b 	bl	8001228 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe f987 	bl	8001228 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e081      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	019b      	lsls	r3, r3, #6
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe f960 	bl	8001228 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe f95c 	bl	8001228 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e056      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f8a:	e04e      	b.n	800302a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe f949 	bl	8001228 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe f945 	bl	8001228 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03f      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x44a>
 8002fb8:	e037      	b.n	800302a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e032      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d028      	beq.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d121      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d11a      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ffc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40007000 	.word	0x40007000
 8003038:	40023800 	.word	0x40023800
 800303c:	42470060 	.word	0x42470060

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0cc      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d90c      	bls.n	800307c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d044      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d119      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e067      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4934      	ldr	r1, [pc, #208]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7fe f87a 	bl	8001228 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fe f876 	bl	8001228 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e04f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d20c      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd ffda 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	08007784 	.word	0x08007784
 8003204:	20000004 	.word	0x20000004
 8003208:	20000008 	.word	0x20000008

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003212:	2100      	movs	r1, #0
 8003214:	6079      	str	r1, [r7, #4]
 8003216:	2100      	movs	r1, #0
 8003218:	60f9      	str	r1, [r7, #12]
 800321a:	2100      	movs	r1, #0
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800321e:	2100      	movs	r1, #0
 8003220:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003222:	4952      	ldr	r1, [pc, #328]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003224:	6889      	ldr	r1, [r1, #8]
 8003226:	f001 010c 	and.w	r1, r1, #12
 800322a:	2908      	cmp	r1, #8
 800322c:	d00d      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x3e>
 800322e:	2908      	cmp	r1, #8
 8003230:	f200 8094 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x150>
 8003234:	2900      	cmp	r1, #0
 8003236:	d002      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x32>
 8003238:	2904      	cmp	r1, #4
 800323a:	d003      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x38>
 800323c:	e08e      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_RCC_GetSysClockFreq+0x164>)
 8003240:	60bb      	str	r3, [r7, #8]
       break;
 8003242:	e08e      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_GetSysClockFreq+0x168>)
 8003246:	60bb      	str	r3, [r7, #8]
      break;
 8003248:	e08b      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324a:	4948      	ldr	r1, [pc, #288]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 800324c:	6849      	ldr	r1, [r1, #4]
 800324e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003252:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003254:	4945      	ldr	r1, [pc, #276]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003256:	6849      	ldr	r1, [r1, #4]
 8003258:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800325c:	2900      	cmp	r1, #0
 800325e:	d024      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003260:	4942      	ldr	r1, [pc, #264]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003262:	6849      	ldr	r1, [r1, #4]
 8003264:	0989      	lsrs	r1, r1, #6
 8003266:	4608      	mov	r0, r1
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003270:	f04f 0500 	mov.w	r5, #0
 8003274:	ea00 0204 	and.w	r2, r0, r4
 8003278:	ea01 0305 	and.w	r3, r1, r5
 800327c:	493d      	ldr	r1, [pc, #244]	; (8003374 <HAL_RCC_GetSysClockFreq+0x168>)
 800327e:	fb01 f003 	mul.w	r0, r1, r3
 8003282:	2100      	movs	r1, #0
 8003284:	fb01 f102 	mul.w	r1, r1, r2
 8003288:	1844      	adds	r4, r0, r1
 800328a:	493a      	ldr	r1, [pc, #232]	; (8003374 <HAL_RCC_GetSysClockFreq+0x168>)
 800328c:	fba2 0101 	umull	r0, r1, r2, r1
 8003290:	1863      	adds	r3, r4, r1
 8003292:	4619      	mov	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	461a      	mov	r2, r3
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	f7fc ff94 	bl	80001c8 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4613      	mov	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e04a      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	461a      	mov	r2, r3
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	ea02 0400 	and.w	r4, r2, r0
 80032c2:	ea03 0501 	and.w	r5, r3, r1
 80032c6:	4620      	mov	r0, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	014b      	lsls	r3, r1, #5
 80032d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032d8:	0142      	lsls	r2, r0, #5
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	1b00      	subs	r0, r0, r4
 80032e0:	eb61 0105 	sbc.w	r1, r1, r5
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	018b      	lsls	r3, r1, #6
 80032ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032f2:	0182      	lsls	r2, r0, #6
 80032f4:	1a12      	subs	r2, r2, r0
 80032f6:	eb63 0301 	sbc.w	r3, r3, r1
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	00d9      	lsls	r1, r3, #3
 8003304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003308:	00d0      	lsls	r0, r2, #3
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1912      	adds	r2, r2, r4
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	f04f 0000 	mov.w	r0, #0
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	0299      	lsls	r1, r3, #10
 800331e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003322:	0290      	lsls	r0, r2, #10
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	461a      	mov	r2, r3
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f7fc ff48 	bl	80001c8 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4613      	mov	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	60bb      	str	r3, [r7, #8]
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_RCC_GetSysClockFreq+0x164>)
 800335e:	60bb      	str	r3, [r7, #8]
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	68bb      	ldr	r3, [r7, #8]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	017d7840 	.word	0x017d7840

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07b      	b.n	800349a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b2:	d009      	beq.n	80033c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
 80033ba:	e005      	b.n	80033c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fe02 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	ea42 0103 	orr.w	r1, r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0104 	and.w	r1, r3, #4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0210 	and.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_SPI_Transmit+0x22>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e126      	b.n	8003712 <HAL_SPI_Transmit+0x270>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034cc:	f7fd feac 	bl	8001228 <HAL_GetTick>
 80034d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034e6:	e10b      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0x52>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f8:	e102      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2203      	movs	r2, #3
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d10f      	bne.n	8003562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d007      	beq.n	8003580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	d14b      	bne.n	8003622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0xf6>
 8003592:	8afb      	ldrh	r3, [r7, #22]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d13e      	bne.n	8003616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035bc:	e02b      	b.n	8003616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d112      	bne.n	80035f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80035f0:	e011      	b.n	8003616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fd fe19 	bl	8001228 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_Transmit+0x168>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x16e>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003614:	e074      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ce      	bne.n	80035be <HAL_SPI_Transmit+0x11c>
 8003620:	e04c      	b.n	80036bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x18e>
 800362a:	8afb      	ldrh	r3, [r7, #22]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d140      	bne.n	80036b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003656:	e02c      	b.n	80036b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d113      	bne.n	800368e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36
 800368c:	e011      	b.n	80036b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368e:	f7fd fdcb 	bl	8001228 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d803      	bhi.n	80036a6 <HAL_SPI_Transmit+0x204>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_Transmit+0x20a>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036b0:	e026      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1cd      	bne.n	8003658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8b3 	bl	800382c <SPI_EndRxTxTransaction>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e000      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003710:	7ffb      	ldrb	r3, [r7, #31]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800372c:	f7fd fd7c 	bl	8001228 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800373c:	f7fd fd74 	bl	8001228 <HAL_GetTick>
 8003740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	0d1b      	lsrs	r3, r3, #20
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	e054      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d050      	beq.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800375c:	f7fd fd64 	bl	8001228 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	d902      	bls.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13d      	bne.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d111      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d004      	beq.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d107      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d10f      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e017      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d19b      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000004 	.word	0x20000004

0800382c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <SPI_EndRxTxTransaction+0x7c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <SPI_EndRxTxTransaction+0x80>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0d5b      	lsrs	r3, r3, #21
 8003844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d112      	bne.n	800387e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff5a 	bl	800371c <SPI_WaitFlagStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3b01      	subs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d0f2      	beq.n	800387e <SPI_EndRxTxTransaction+0x52>
 8003898:	e000      	b.n	800389c <SPI_EndRxTxTransaction+0x70>
        break;
 800389a:	bf00      	nop
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000004 	.word	0x20000004
 80038ac:	165e9f81 	.word	0x165e9f81

080038b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b0:	b084      	sub	sp, #16
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	f107 001c 	add.w	r0, r7, #28
 80038be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d122      	bne.n	800390e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f001 fac6 	bl	8004e94 <USB_CoreReset>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e01a      	b.n	8003944 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f001 faba 	bl	8004e94 <USB_CoreReset>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
 8003936:	e005      	b.n	8003944 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	2b01      	cmp	r3, #1
 8003948:	d10b      	bne.n	8003962 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f043 0206 	orr.w	r2, r3, #6
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800396e:	b004      	add	sp, #16
 8003970:	4770      	bx	lr
	...

08003974 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	4613      	mov	r3, r2
 8003980:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d165      	bne.n	8003a54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a41      	ldr	r2, [pc, #260]	; (8003a90 <USB_SetTurnaroundTime+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d906      	bls.n	800399e <USB_SetTurnaroundTime+0x2a>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <USB_SetTurnaroundTime+0x120>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d202      	bcs.n	800399e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003998:	230f      	movs	r3, #15
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e062      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <USB_SetTurnaroundTime+0x120>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d306      	bcc.n	80039b4 <USB_SetTurnaroundTime+0x40>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <USB_SetTurnaroundTime+0x124>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d202      	bcs.n	80039b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80039ae:	230e      	movs	r3, #14
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e057      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <USB_SetTurnaroundTime+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d306      	bcc.n	80039ca <USB_SetTurnaroundTime+0x56>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <USB_SetTurnaroundTime+0x128>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d202      	bcs.n	80039ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039c4:	230d      	movs	r3, #13
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e04c      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4a33      	ldr	r2, [pc, #204]	; (8003a9c <USB_SetTurnaroundTime+0x128>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d306      	bcc.n	80039e0 <USB_SetTurnaroundTime+0x6c>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <USB_SetTurnaroundTime+0x12c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d802      	bhi.n	80039e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039da:	230c      	movs	r3, #12
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e041      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <USB_SetTurnaroundTime+0x12c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d906      	bls.n	80039f6 <USB_SetTurnaroundTime+0x82>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <USB_SetTurnaroundTime+0x130>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d802      	bhi.n	80039f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039f0:	230b      	movs	r3, #11
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e036      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <USB_SetTurnaroundTime+0x130>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d906      	bls.n	8003a0c <USB_SetTurnaroundTime+0x98>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <USB_SetTurnaroundTime+0x134>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d802      	bhi.n	8003a0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a06:	230a      	movs	r3, #10
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e02b      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <USB_SetTurnaroundTime+0x134>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d906      	bls.n	8003a22 <USB_SetTurnaroundTime+0xae>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <USB_SetTurnaroundTime+0x138>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d202      	bcs.n	8003a22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a1c:	2309      	movs	r3, #9
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e020      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4a21      	ldr	r2, [pc, #132]	; (8003aac <USB_SetTurnaroundTime+0x138>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d306      	bcc.n	8003a38 <USB_SetTurnaroundTime+0xc4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <USB_SetTurnaroundTime+0x13c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d802      	bhi.n	8003a38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a32:	2308      	movs	r3, #8
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e015      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <USB_SetTurnaroundTime+0x13c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d906      	bls.n	8003a4e <USB_SetTurnaroundTime+0xda>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <USB_SetTurnaroundTime+0x140>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d202      	bcs.n	8003a4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a48:	2307      	movs	r3, #7
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e00a      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a4e:	2306      	movs	r3, #6
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e007      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a5a:	2309      	movs	r3, #9
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e001      	b.n	8003a64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a60:	2309      	movs	r3, #9
 8003a62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	00d8acbf 	.word	0x00d8acbf
 8003a94:	00e4e1c0 	.word	0x00e4e1c0
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	01067380 	.word	0x01067380
 8003aa0:	011a499f 	.word	0x011a499f
 8003aa4:	01312cff 	.word	0x01312cff
 8003aa8:	014ca43f 	.word	0x014ca43f
 8003aac:	016e3600 	.word	0x016e3600
 8003ab0:	01a6ab1f 	.word	0x01a6ab1f
 8003ab4:	01e84800 	.word	0x01e84800

08003ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d106      	bne.n	8003b28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e00b      	b.n	8003b40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e001      	b.n	8003b40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e003      	b.n	8003b48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003b40:	2032      	movs	r0, #50	; 0x32
 8003b42:	f7fd fb7d 	bl	8001240 <HAL_Delay>

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b50:	b084      	sub	sp, #16
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e009      	b.n	8003b84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3340      	adds	r3, #64	; 0x40
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3301      	adds	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b0e      	cmp	r3, #14
 8003b88:	d9f2      	bls.n	8003b70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11c      	bne.n	8003bca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc8:	e00b      	b.n	8003be2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	680b      	ldr	r3, [r1, #0]
 8003c00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10c      	bne.n	8003c22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f949 	bl	8003ea8 <USB_SetDevSpeed>
 8003c16:	e008      	b.n	8003c2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c18:	2101      	movs	r1, #1
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f944 	bl	8003ea8 <USB_SetDevSpeed>
 8003c20:	e003      	b.n	8003c2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c22:	2103      	movs	r1, #3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f93f 	bl	8003ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8f3 	bl	8003e18 <USB_FlushTxFifo>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f911 	bl	8003e64 <USB_FlushRxFifo>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e043      	b.n	8003cfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8c:	d118      	bne.n	8003cc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e013      	b.n	8003cd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e008      	b.n	8003cd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3b7      	bcc.n	8003c76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e043      	b.n	8003d94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d22:	d118      	bne.n	8003d56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e013      	b.n	8003d68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e008      	b.n	8003d68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3b7      	bcc.n	8003d0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <USB_DevInit+0x2c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e10:	b004      	add	sp, #16
 8003e12:	4770      	bx	lr
 8003e14:	803c3800 	.word	0x803c3800

08003e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <USB_FlushTxFifo+0x48>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e006      	b.n	8003e52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d0f0      	beq.n	8003e32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	00030d40 	.word	0x00030d40

08003e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2210      	movs	r2, #16
 8003e74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <USB_FlushRxFifo+0x40>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e006      	b.n	8003e96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d0f0      	beq.n	8003e76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	00030d40 	.word	0x00030d40

08003ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
 8003efe:	e00a      	b.n	8003f16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d002      	beq.n	8003f0c <USB_GetDevSpeed+0x32>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d102      	bne.n	8003f12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	75fb      	strb	r3, [r7, #23]
 8003f10:	e001      	b.n	8003f16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f12:	230f      	movs	r3, #15
 8003f14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d13a      	bne.n	8003fb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d155      	bne.n	8004024 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	78db      	ldrb	r3, [r3, #3]
 8003f92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	059b      	lsls	r3, r3, #22
 8003f9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e036      	b.n	8004024 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11a      	bne.n	8004024 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	78db      	ldrb	r3, [r3, #3]
 8004008:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800400a:	430b      	orrs	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004022:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d161      	bne.n	8004114 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004066:	d11f      	bne.n	80040a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004086:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c8:	4013      	ands	r3, r2
 80040ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ec:	4013      	ands	r3, r2
 80040ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	440b      	add	r3, r1
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	4619      	mov	r1, r3
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <USB_DeactivateEndpoint+0x1b0>)
 800410e:	4013      	ands	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
 8004112:	e060      	b.n	80041d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800412a:	d11f      	bne.n	800416c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800414a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	43db      	mvns	r3, r3
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800418c:	4013      	ands	r3, r2
 800418e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	43db      	mvns	r3, r3
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b0:	4013      	ands	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	0159      	lsls	r1, r3, #5
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ce:	4619      	mov	r1, r3
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <USB_DeactivateEndpoint+0x1b4>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	ec337800 	.word	0xec337800
 80041e8:	eff37800 	.word	0xeff37800

080041ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 815c 	bne.w	80044c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d132      	bne.n	800427c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004234:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	0cdb      	lsrs	r3, r3, #19
 8004276:	04db      	lsls	r3, r3, #19
 8004278:	6113      	str	r3, [r2, #16]
 800427a:	e074      	b.n	8004366 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	0cdb      	lsrs	r3, r3, #19
 8004298:	04db      	lsls	r3, r3, #19
 800429a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6959      	ldr	r1, [r3, #20]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	440b      	add	r3, r1
 80042d8:	1e59      	subs	r1, r3, #1
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e2:	04d9      	lsls	r1, r3, #19
 80042e4:	4b9d      	ldr	r3, [pc, #628]	; (800455c <USB_EPStartXfer+0x370>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	0148      	lsls	r0, r1, #5
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	4401      	add	r1, r0
 80042f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	0148      	lsls	r0, r1, #5
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	4401      	add	r1, r0
 8004316:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800431a:	4313      	orrs	r3, r2
 800431c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d11f      	bne.n	8004366 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004340:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004344:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004364:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d14b      	bne.n	8004404 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d128      	bne.n	80043e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d110      	bne.n	80043c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	e00f      	b.n	80043e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e12f      	b.n	8004664 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004422:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d015      	beq.n	8004458 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8117 	beq.w	8004664 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004452:	4313      	orrs	r3, r2
 8004454:	634b      	str	r3, [r1, #52]	; 0x34
 8004456:	e105      	b.n	8004664 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d110      	bne.n	800448a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e00f      	b.n	80044aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	b298      	uxth	r0, r3
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4603      	mov	r3, r0
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa2b 	bl	800491a <USB_WritePacket>
 80044c4:	e0ce      	b.n	8004664 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	0cdb      	lsrs	r3, r3, #19
 80044e2:	04db      	lsls	r3, r3, #19
 80044e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004500:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004504:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004508:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d126      	bne.n	8004560 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	0148      	lsls	r0, r1, #5
 800452c:	69f9      	ldr	r1, [r7, #28]
 800452e:	4401      	add	r1, r0
 8004530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004556:	6113      	str	r3, [r2, #16]
 8004558:	e036      	b.n	80045c8 <USB_EPStartXfer+0x3dc>
 800455a:	bf00      	nop
 800455c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4413      	add	r3, r2
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	04d9      	lsls	r1, r3, #19
 8004588:	4b39      	ldr	r3, [pc, #228]	; (8004670 <USB_EPStartXfer+0x484>)
 800458a:	400b      	ands	r3, r1
 800458c:	69b9      	ldr	r1, [r7, #24]
 800458e:	0148      	lsls	r0, r1, #5
 8004590:	69f9      	ldr	r1, [r7, #28]
 8004592:	4401      	add	r1, r0
 8004594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	8af9      	ldrh	r1, [r7, #22]
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	69b9      	ldr	r1, [r7, #24]
 80045ba:	0148      	lsls	r0, r1, #5
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	4401      	add	r1, r0
 80045c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	460a      	mov	r2, r1
 80045e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	78db      	ldrb	r3, [r3, #3]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d128      	bne.n	8004644 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d110      	bne.n	8004624 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00f      	b.n	8004644 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	1ff80000 	.word	0x1ff80000

08004674 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b01      	cmp	r3, #1
 8004692:	f040 80cd 	bne.w	8004830 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d132      	bne.n	8004704 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fc:	0cdb      	lsrs	r3, r3, #19
 80046fe:	04db      	lsls	r3, r3, #19
 8004700:	6113      	str	r3, [r2, #16]
 8004702:	e04e      	b.n	80047a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471e:	0cdb      	lsrs	r3, r3, #19
 8004720:	04db      	lsls	r3, r3, #19
 8004722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004746:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d903      	bls.n	800475c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	0148      	lsls	r0, r1, #5
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	4401      	add	r1, r0
 800479a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d11e      	bne.n	80047e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e092      	b.n	800490c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004804:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d07e      	beq.n	800490c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	6979      	ldr	r1, [r7, #20]
 8004826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482a:	4313      	orrs	r3, r2
 800482c:	634b      	str	r3, [r1, #52]	; 0x34
 800482e:	e06d      	b.n	800490c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484a:	0cdb      	lsrs	r3, r3, #19
 800484c:	04db      	lsls	r3, r3, #19
 800484e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800486e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004872:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ba:	6939      	ldr	r1, [r7, #16]
 80048bc:	0148      	lsls	r0, r1, #5
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	4401      	add	r1, r0
 80048c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c6:	4313      	orrs	r3, r2
 80048c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10d      	bne.n	80048ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	460a      	mov	r2, r1
 80048ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800490a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800491a:	b480      	push	{r7}
 800491c:	b089      	sub	sp, #36	; 0x24
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	4611      	mov	r1, r2
 8004926:	461a      	mov	r2, r3
 8004928:	460b      	mov	r3, r1
 800492a:	71fb      	strb	r3, [r7, #7]
 800492c:	4613      	mov	r3, r2
 800492e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004940:	88bb      	ldrh	r3, [r7, #4]
 8004942:	3303      	adds	r3, #3
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e00f      	b.n	800496e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	031a      	lsls	r2, r3, #12
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	461a      	mov	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3301      	adds	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d3eb      	bcc.n	800494e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3724      	adds	r7, #36	; 0x24
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	; 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	3303      	adds	r3, #3
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e00b      	b.n	80049c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3304      	adds	r3, #4
 80049b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3301      	adds	r3, #1
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d3ef      	bcc.n	80049a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80049c8:	69fb      	ldr	r3, [r7, #28]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d12c      	bne.n	8004a4c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db12      	blt.n	8004a2a <USB_EPSetStall+0x54>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00f      	beq.n	8004a2a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a28:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e02b      	b.n	8004aa4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	db12      	blt.n	8004a84 <USB_EPSetStall+0xae>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00f      	beq.n	8004a84 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a82:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d128      	bne.n	8004b20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	78db      	ldrb	r3, [r3, #3]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d003      	beq.n	8004afe <USB_EPClearStall+0x4c>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	78db      	ldrb	r3, [r3, #3]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d138      	bne.n	8004b70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e027      	b.n	8004b70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d003      	beq.n	8004b50 <USB_EPClearStall+0x9e>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d10f      	bne.n	8004b70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ba0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004be4:	f023 0303 	bic.w	r3, r3, #3
 8004be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf8:	f023 0302 	bic.w	r3, r3, #2
 8004bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3a:	f043 0302 	orr.w	r3, r3, #2
 8004c3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	0c1b      	lsrs	r3, r3, #16
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	b29b      	uxth	r3, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	01db      	lsls	r3, r3, #7
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d66:	68bb      	ldr	r3, [r7, #8]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0301 	and.w	r3, r3, #1
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004daa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	460b      	mov	r3, r1
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	333c      	adds	r3, #60	; 0x3c
 8004dee:	3304      	adds	r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <USB_EP0_OutStart+0xb8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d90a      	bls.n	8004e12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0c:	d101      	bne.n	8004e12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e037      	b.n	8004e82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f043 0318 	orr.w	r3, r3, #24
 8004e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e5a:	7afb      	ldrb	r3, [r7, #11]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10f      	bne.n	8004e80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	4f54300a 	.word	0x4f54300a

08004e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <USB_CoreReset+0x64>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e01b      	b.n	8004eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	daf2      	bge.n	8004ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <USB_CoreReset+0x64>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d0f0      	beq.n	8004eca <USB_CoreReset+0x36>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f0c:	f002 f906 	bl	800711c <USBD_static_malloc>
 8004f10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f20:	2302      	movs	r3, #2
 8004f22:	e066      	b.n	8004ff2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7c1b      	ldrb	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d119      	bne.n	8004f68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f38:	2202      	movs	r2, #2
 8004f3a:	2181      	movs	r1, #129	; 0x81
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 ffca 	bl	8006ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	2101      	movs	r1, #1
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 ffc0 	bl	8006ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2210      	movs	r2, #16
 8004f62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f66:	e016      	b.n	8004f96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	2181      	movs	r1, #129	; 0x81
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 ffb1 	bl	8006ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	2101      	movs	r1, #1
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 ffa8 	bl	8006ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2210      	movs	r2, #16
 8004f92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f96:	2308      	movs	r3, #8
 8004f98:	2203      	movs	r2, #3
 8004f9a:	2182      	movs	r1, #130	; 0x82
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 ff9a 	bl	8006ed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7c1b      	ldrb	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f002 f86b 	bl	80070b4 <USBD_LL_PrepareReceive>
 8004fde:	e007      	b.n	8004ff0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	2101      	movs	r1, #1
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f002 f862 	bl	80070b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005006:	2181      	movs	r1, #129	; 0x81
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 ff8a 	bl	8006f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005014:	2101      	movs	r1, #1
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 ff83 	bl	8006f22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005024:	2182      	movs	r1, #130	; 0x82
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 ff7b 	bl	8006f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005056:	4618      	mov	r0, r3
 8005058:	f002 f86e 	bl	8007138 <USBD_static_free>
    pdev->pClassData = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005080:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	e0af      	b.n	80051f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d03f      	beq.n	8005124 <USBD_CDC_Setup+0xb4>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	f040 809f 	bne.w	80051e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	88db      	ldrh	r3, [r3, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02e      	beq.n	8005110 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da16      	bge.n	80050ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80050c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	88d2      	ldrh	r2, [r2, #6]
 80050ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	88db      	ldrh	r3, [r3, #6]
 80050d4:	2b07      	cmp	r3, #7
 80050d6:	bf28      	it	cs
 80050d8:	2307      	movcs	r3, #7
 80050da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 fae9 	bl	80066ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80050e8:	e085      	b.n	80051f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	785a      	ldrb	r2, [r3, #1]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	88db      	ldrh	r3, [r3, #6]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	88db      	ldrh	r3, [r3, #6]
 8005106:	461a      	mov	r2, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 fb02 	bl	8006712 <USBD_CtlPrepareRx>
      break;
 800510e:	e072      	b.n	80051f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	7850      	ldrb	r0, [r2, #1]
 800511c:	2200      	movs	r2, #0
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	4798      	blx	r3
      break;
 8005122:	e068      	b.n	80051f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b0b      	cmp	r3, #11
 800512a:	d852      	bhi.n	80051d2 <USBD_CDC_Setup+0x162>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <USBD_CDC_Setup+0xc4>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005165 	.word	0x08005165
 8005138:	080051e1 	.word	0x080051e1
 800513c:	080051d3 	.word	0x080051d3
 8005140:	080051d3 	.word	0x080051d3
 8005144:	080051d3 	.word	0x080051d3
 8005148:	080051d3 	.word	0x080051d3
 800514c:	080051d3 	.word	0x080051d3
 8005150:	080051d3 	.word	0x080051d3
 8005154:	080051d3 	.word	0x080051d3
 8005158:	080051d3 	.word	0x080051d3
 800515c:	0800518f 	.word	0x0800518f
 8005160:	080051b9 	.word	0x080051b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d107      	bne.n	8005180 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005170:	f107 030a 	add.w	r3, r7, #10
 8005174:	2202      	movs	r2, #2
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 fa9e 	bl	80066ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800517e:	e032      	b.n	80051e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 fa28 	bl	80065d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005188:	2303      	movs	r3, #3
 800518a:	75fb      	strb	r3, [r7, #23]
          break;
 800518c:	e02b      	b.n	80051e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b03      	cmp	r3, #3
 8005198:	d107      	bne.n	80051aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800519a:	f107 030d 	add.w	r3, r7, #13
 800519e:	2201      	movs	r2, #1
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fa89 	bl	80066ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a8:	e01d      	b.n	80051e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fa13 	bl	80065d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80051b2:	2303      	movs	r3, #3
 80051b4:	75fb      	strb	r3, [r7, #23]
          break;
 80051b6:	e016      	b.n	80051e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d00f      	beq.n	80051e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 fa06 	bl	80065d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80051cc:	2303      	movs	r3, #3
 80051ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051d0:	e008      	b.n	80051e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 f9ff 	bl	80065d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80051da:	2303      	movs	r3, #3
 80051dc:	75fb      	strb	r3, [r7, #23]
          break;
 80051de:	e002      	b.n	80051e6 <USBD_CDC_Setup+0x176>
          break;
 80051e0:	bf00      	nop
 80051e2:	e008      	b.n	80051f6 <USBD_CDC_Setup+0x186>
          break;
 80051e4:	bf00      	nop
      }
      break;
 80051e6:	e006      	b.n	80051f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f001 f9f4 	bl	80065d8 <USBD_CtlError>
      ret = USBD_FAIL;
 80051f0:	2303      	movs	r3, #3
 80051f2:	75fb      	strb	r3, [r7, #23]
      break;
 80051f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800521e:	2303      	movs	r3, #3
 8005220:	e04f      	b.n	80052c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005228:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3318      	adds	r3, #24
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d029      	beq.n	8005294 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3318      	adds	r3, #24
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	78f9      	ldrb	r1, [r7, #3]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	460b      	mov	r3, r1
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	1a5b      	subs	r3, r3, r1
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4403      	add	r3, r0
 8005260:	3344      	adds	r3, #68	; 0x44
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fbb2 f1f3 	udiv	r1, r2, r3
 8005268:	fb03 f301 	mul.w	r3, r3, r1
 800526c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800526e:	2b00      	cmp	r3, #0
 8005270:	d110      	bne.n	8005294 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3318      	adds	r3, #24
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005286:	78f9      	ldrb	r1, [r7, #3]
 8005288:	2300      	movs	r3, #0
 800528a:	2200      	movs	r2, #0
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fef0 	bl	8007072 <USBD_LL_Transmit>
 8005292:	e015      	b.n	80052c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e015      	b.n	8005318 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 ff00 	bl	80070f6 <USBD_LL_GetRxDataSize>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005312:	4611      	mov	r1, r2
 8005314:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800532e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005336:	2303      	movs	r3, #3
 8005338:	e01b      	b.n	8005372 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <USBD_CDC_EP0_RxReady+0x50>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800534a:	2bff      	cmp	r3, #255	; 0xff
 800534c:	d010      	beq.n	8005370 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800535c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005364:	b292      	uxth	r2, r2
 8005366:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	; 0xff
 800536c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2243      	movs	r2, #67	; 0x43
 8005388:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000098 	.word	0x20000098

0800539c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2243      	movs	r2, #67	; 0x43
 80053a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80053aa:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20000054 	.word	0x20000054

080053bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2243      	movs	r2, #67	; 0x43
 80053c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	200000dc 	.word	0x200000dc

080053dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	220a      	movs	r2, #10
 80053e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000010 	.word	0x20000010

080053fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800540c:	2303      	movs	r3, #3
 800540e:	e004      	b.n	800541a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005426:	b480      	push	{r7}
 8005428:	b087      	sub	sp, #28
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005438:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005440:	2303      	movs	r3, #3
 8005442:	e008      	b.n	8005456 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005472:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800547a:	2303      	movs	r3, #3
 800547c:	e004      	b.n	8005488 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e016      	b.n	80054e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7c1b      	ldrb	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c4:	2101      	movs	r1, #1
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 fdf4 	bl	80070b4 <USBD_LL_PrepareReceive>
 80054cc:	e007      	b.n	80054de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054d4:	2340      	movs	r3, #64	; 0x40
 80054d6:	2101      	movs	r1, #1
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fdeb 	bl	80070b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01f      	b.n	8005540 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	79fa      	ldrb	r2, [r7, #7]
 8005532:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f001 fc67 	bl	8006e08 <USBD_LL_Init>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	e016      	b.n	800558e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f107 020e 	add.w	r2, r7, #14
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fc7e 	bl	8006ea0 <USBD_LL_Start>
 80055a4:	4603      	mov	r3, r0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	4611      	mov	r1, r2
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
  }

  return USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 ff90 	bl	8006564 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2b02      	cmp	r3, #2
 8005666:	d01a      	beq.n	800569e <USBD_LL_SetupStage+0x72>
 8005668:	2b02      	cmp	r3, #2
 800566a:	d822      	bhi.n	80056b2 <USBD_LL_SetupStage+0x86>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <USBD_LL_SetupStage+0x4a>
 8005670:	2b01      	cmp	r3, #1
 8005672:	d00a      	beq.n	800568a <USBD_LL_SetupStage+0x5e>
 8005674:	e01d      	b.n	80056b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa62 	bl	8005b48 <USBD_StdDevReq>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	e020      	b.n	80056cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fac6 	bl	8005c24 <USBD_StdItfReq>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e016      	b.n	80056cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb05 	bl	8005cb6 <USBD_StdEPReq>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e00c      	b.n	80056cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fc4d 	bl	8006f60 <USBD_LL_StallEP>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ca:	bf00      	nop
  }

  return ret;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	460b      	mov	r3, r1
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d138      	bne.n	800575c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d14a      	bne.n	8005792 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d913      	bls.n	8005730 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4293      	cmp	r3, r2
 8005720:	bf28      	it	cs
 8005722:	4613      	movcs	r3, r2
 8005724:	461a      	mov	r2, r3
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f001 f80f 	bl	800674c <USBD_CtlContinueRx>
 800572e:	e030      	b.n	8005792 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b03      	cmp	r3, #3
 800573a:	d10b      	bne.n	8005754 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f001 f80a 	bl	800676e <USBD_CtlSendStatus>
 800575a:	e01a      	b.n	8005792 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b03      	cmp	r3, #3
 8005766:	d114      	bne.n	8005792 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	7afa      	ldrb	r2, [r7, #11]
 800577e:	4611      	mov	r1, r2
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	e000      	b.n	8005794 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	460b      	mov	r3, r1
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057aa:	7afb      	ldrb	r3, [r7, #11]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d16b      	bne.n	8005888 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3314      	adds	r3, #20
 80057b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d156      	bne.n	800586e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d914      	bls.n	80057f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	461a      	mov	r2, r3
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 ff84 	bl	80066f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057e8:	2300      	movs	r3, #0
 80057ea:	2200      	movs	r2, #0
 80057ec:	2100      	movs	r1, #0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 fc60 	bl	80070b4 <USBD_LL_PrepareReceive>
 80057f4:	e03b      	b.n	800586e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d11c      	bne.n	800583c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800580a:	429a      	cmp	r2, r3
 800580c:	d316      	bcc.n	800583c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005818:	429a      	cmp	r2, r3
 800581a:	d20f      	bcs.n	800583c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800581c:	2200      	movs	r2, #0
 800581e:	2100      	movs	r1, #0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 ff65 	bl	80066f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800582e:	2300      	movs	r3, #0
 8005830:	2200      	movs	r2, #0
 8005832:	2100      	movs	r1, #0
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 fc3d 	bl	80070b4 <USBD_LL_PrepareReceive>
 800583a:	e018      	b.n	800586e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b03      	cmp	r3, #3
 8005846:	d10b      	bne.n	8005860 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f001 fb7c 	bl	8006f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 ff93 	bl	8006794 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005874:	2b01      	cmp	r3, #1
 8005876:	d122      	bne.n	80058be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff fe98 	bl	80055ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005886:	e01a      	b.n	80058be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b03      	cmp	r3, #3
 8005892:	d114      	bne.n	80058be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	7afa      	ldrb	r2, [r7, #11]
 80058aa:	4611      	mov	r1, r2
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	4798      	blx	r3
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	e000      	b.n	80058c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e02f      	b.n	800595c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005926:	2340      	movs	r3, #64	; 0x40
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fad2 	bl	8006ed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2240      	movs	r2, #64	; 0x40
 800593e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 fac4 	bl	8006ed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2240      	movs	r2, #64	; 0x40
 8005958:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005992:	b2da      	uxtb	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d106      	bne.n	80059d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e012      	b.n	8005a1c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d10b      	bne.n	8005a1a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e014      	b.n	8005a68 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d10d      	bne.n	8005a66 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	4611      	mov	r1, r2
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e014      	b.n	8005ab4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d10d      	bne.n	8005ab2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	4611      	mov	r1, r2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	4611      	mov	r1, r2
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
  }

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b087      	sub	sp, #28
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b28:	8a3b      	ldrh	r3, [r7, #16]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	b21a      	sxth	r2, r3
 8005b2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	b21b      	sxth	r3, r3
 8005b36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b38:	89fb      	ldrh	r3, [r7, #14]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d005      	beq.n	8005b6e <USBD_StdDevReq+0x26>
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d853      	bhi.n	8005c0e <USBD_StdDevReq+0xc6>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <USBD_StdDevReq+0x3a>
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d14f      	bne.n	8005c0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e04a      	b.n	8005c18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d83b      	bhi.n	8005c02 <USBD_StdDevReq+0xba>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <USBD_StdDevReq+0x48>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005c03 	.word	0x08005c03
 8005b9c:	08005bef 	.word	0x08005bef
 8005ba0:	08005c03 	.word	0x08005c03
 8005ba4:	08005bc3 	.word	0x08005bc3
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005c03 	.word	0x08005c03
 8005bb0:	08005bdb 	.word	0x08005bdb
 8005bb4:	08005bcd 	.word	0x08005bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9de 	bl	8005f7c <USBD_GetDescriptor>
          break;
 8005bc0:	e024      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb43 	bl	8006250 <USBD_SetAddress>
          break;
 8005bca:	e01f      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fb82 	bl	80062d8 <USBD_SetConfig>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8005bd8:	e018      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc21 	bl	8006424 <USBD_GetConfig>
          break;
 8005be2:	e013      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fc52 	bl	8006490 <USBD_GetStatus>
          break;
 8005bec:	e00e      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc81 	bl	80064f8 <USBD_SetFeature>
          break;
 8005bf6:	e009      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc90 	bl	8006520 <USBD_ClrFeature>
          break;
 8005c00:	e004      	b.n	8005c0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fce7 	bl	80065d8 <USBD_CtlError>
          break;
 8005c0a:	bf00      	nop
      }
      break;
 8005c0c:	e004      	b.n	8005c18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fce1 	bl	80065d8 <USBD_CtlError>
      break;
 8005c16:	bf00      	nop
  }

  return ret;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d005      	beq.n	8005c4a <USBD_StdItfReq+0x26>
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d82f      	bhi.n	8005ca2 <USBD_StdItfReq+0x7e>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <USBD_StdItfReq+0x26>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d12b      	bne.n	8005ca2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d81d      	bhi.n	8005c94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	889b      	ldrh	r3, [r3, #4]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d813      	bhi.n	8005c8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	88db      	ldrh	r3, [r3, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d110      	bne.n	8005c9e <USBD_StdItfReq+0x7a>
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fd73 	bl	800676e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c88:	e009      	b.n	8005c9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fca3 	bl	80065d8 <USBD_CtlError>
          break;
 8005c92:	e004      	b.n	8005c9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fc9e 	bl	80065d8 <USBD_CtlError>
          break;
 8005c9c:	e000      	b.n	8005ca0 <USBD_StdItfReq+0x7c>
          break;
 8005c9e:	bf00      	nop
      }
      break;
 8005ca0:	e004      	b.n	8005cac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fc97 	bl	80065d8 <USBD_CtlError>
      break;
 8005caa:	bf00      	nop
  }

  return ret;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	889b      	ldrh	r3, [r3, #4]
 8005cc8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d007      	beq.n	8005ce6 <USBD_StdEPReq+0x30>
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	f200 8145 	bhi.w	8005f66 <USBD_StdEPReq+0x2b0>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <USBD_StdEPReq+0x44>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	f040 8140 	bne.w	8005f66 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e13a      	b.n	8005f70 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d007      	beq.n	8005d12 <USBD_StdEPReq+0x5c>
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	f300 8129 	bgt.w	8005f5a <USBD_StdEPReq+0x2a4>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07f      	beq.n	8005e0c <USBD_StdEPReq+0x156>
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d03c      	beq.n	8005d8a <USBD_StdEPReq+0xd4>
 8005d10:	e123      	b.n	8005f5a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d002      	beq.n	8005d24 <USBD_StdEPReq+0x6e>
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d016      	beq.n	8005d50 <USBD_StdEPReq+0x9a>
 8005d22:	e02c      	b.n	8005d7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00d      	beq.n	8005d46 <USBD_StdEPReq+0x90>
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	2b80      	cmp	r3, #128	; 0x80
 8005d2e:	d00a      	beq.n	8005d46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 f913 	bl	8006f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 f90f 	bl	8006f60 <USBD_LL_StallEP>
 8005d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d44:	e020      	b.n	8005d88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc45 	bl	80065d8 <USBD_CtlError>
              break;
 8005d4e:	e01b      	b.n	8005d88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	885b      	ldrh	r3, [r3, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10e      	bne.n	8005d76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <USBD_StdEPReq+0xc0>
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	2b80      	cmp	r3, #128	; 0x80
 8005d62:	d008      	beq.n	8005d76 <USBD_StdEPReq+0xc0>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	88db      	ldrh	r3, [r3, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f8f5 	bl	8006f60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fcf9 	bl	800676e <USBD_CtlSendStatus>

              break;
 8005d7c:	e004      	b.n	8005d88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fc29 	bl	80065d8 <USBD_CtlError>
              break;
 8005d86:	bf00      	nop
          }
          break;
 8005d88:	e0ec      	b.n	8005f64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d002      	beq.n	8005d9c <USBD_StdEPReq+0xe6>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d016      	beq.n	8005dc8 <USBD_StdEPReq+0x112>
 8005d9a:	e030      	b.n	8005dfe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <USBD_StdEPReq+0x108>
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d00a      	beq.n	8005dbe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f8d7 	bl	8006f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 f8d3 	bl	8006f60 <USBD_LL_StallEP>
 8005dba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dbc:	e025      	b.n	8005e0a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc09 	bl	80065d8 <USBD_CtlError>
              break;
 8005dc6:	e020      	b.n	8005e0a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	885b      	ldrh	r3, [r3, #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11b      	bne.n	8005e08 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 f8dd 	bl	8006f9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fcc2 	bl	800676e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005dfc:	e004      	b.n	8005e08 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fbe9 	bl	80065d8 <USBD_CtlError>
              break;
 8005e06:	e000      	b.n	8005e0a <USBD_StdEPReq+0x154>
              break;
 8005e08:	bf00      	nop
          }
          break;
 8005e0a:	e0ab      	b.n	8005f64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d002      	beq.n	8005e1e <USBD_StdEPReq+0x168>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d032      	beq.n	8005e82 <USBD_StdEPReq+0x1cc>
 8005e1c:	e097      	b.n	8005f4e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <USBD_StdEPReq+0x17e>
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d004      	beq.n	8005e34 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fbd3 	bl	80065d8 <USBD_CtlError>
                break;
 8005e32:	e091      	b.n	8005f58 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da0b      	bge.n	8005e54 <USBD_StdEPReq+0x19e>
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	e00b      	b.n	8005e6c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2202      	movs	r2, #2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fc1d 	bl	80066ba <USBD_CtlSendData>
              break;
 8005e80:	e06a      	b.n	8005f58 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da11      	bge.n	8005eae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3324      	adds	r3, #36	; 0x24
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d117      	bne.n	8005ed4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb96 	bl	80065d8 <USBD_CtlError>
                  break;
 8005eac:	e054      	b.n	8005f58 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	f003 020f 	and.w	r2, r3, #15
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fb83 	bl	80065d8 <USBD_CtlError>
                  break;
 8005ed2:	e041      	b.n	8005f58 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da0b      	bge.n	8005ef4 <USBD_StdEPReq+0x23e>
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	3310      	adds	r3, #16
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	e00b      	b.n	8005f0c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <USBD_StdEPReq+0x264>
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d103      	bne.n	8005f22 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e00e      	b.n	8005f40 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f858 	bl	8006fdc <USBD_LL_IsStallEP>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2202      	movs	r2, #2
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fbb7 	bl	80066ba <USBD_CtlSendData>
              break;
 8005f4c:	e004      	b.n	8005f58 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fb41 	bl	80065d8 <USBD_CtlError>
              break;
 8005f56:	bf00      	nop
          }
          break;
 8005f58:	e004      	b.n	8005f64 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb3b 	bl	80065d8 <USBD_CtlError>
          break;
 8005f62:	bf00      	nop
      }
      break;
 8005f64:	e004      	b.n	8005f70 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb35 	bl	80065d8 <USBD_CtlError>
      break;
 8005f6e:	bf00      	nop
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	2b06      	cmp	r3, #6
 8005f9e:	f200 8128 	bhi.w	80061f2 <USBD_GetDescriptor+0x276>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <USBD_GetDescriptor+0x2c>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	080061f3 	.word	0x080061f3
 8005fb8:	080061f3 	.word	0x080061f3
 8005fbc:	08006193 	.word	0x08006193
 8005fc0:	080061bf 	.word	0x080061bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7c12      	ldrb	r2, [r2, #16]
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	60f8      	str	r0, [r7, #12]
      break;
 8005fda:	e112      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f107 0208 	add.w	r2, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ffe:	e100      	b.n	8006202 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e0f2      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	885b      	ldrh	r3, [r3, #2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b05      	cmp	r3, #5
 8006024:	f200 80ac 	bhi.w	8006180 <USBD_GetDescriptor+0x204>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <USBD_GetDescriptor+0xb4>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006049 	.word	0x08006049
 8006034:	0800607d 	.word	0x0800607d
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060e5 	.word	0x080060e5
 8006040:	08006119 	.word	0x08006119
 8006044:	0800614d 	.word	0x0800614d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e091      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fab2 	bl	80065d8 <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e089      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e077      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa98 	bl	80065d8 <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e06f      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e05d      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa7e 	bl	80065d8 <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e055      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e043      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa64 	bl	80065d8 <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e03b      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e029      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa4a 	bl	80065d8 <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e021      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e00f      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa30 	bl	80065d8 <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e007      	b.n	8006190 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa28 	bl	80065d8 <USBD_CtlError>
          err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800618e:	bf00      	nop
      }
      break;
 8006190:	e037      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	4610      	mov	r0, r2
 80061a8:	4798      	blx	r3
 80061aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061ac:	e029      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa11 	bl	80065d8 <USBD_CtlError>
        err++;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	3301      	adds	r3, #1
 80061ba:	72fb      	strb	r3, [r7, #11]
      break;
 80061bc:	e021      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10d      	bne.n	80061e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
 80061d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	2207      	movs	r2, #7
 80061de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e00f      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9f7 	bl	80065d8 <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e007      	b.n	8006202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9ef 	bl	80065d8 <USBD_CtlError>
      err++;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3301      	adds	r3, #1
 80061fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006200:	bf00      	nop
  }

  if (err != 0U)
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11e      	bne.n	8006246 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d016      	beq.n	800623e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	88da      	ldrh	r2, [r3, #6]
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	4293      	cmp	r3, r2
 800621e:	bf28      	it	cs
 8006220:	4613      	movcs	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	461a      	mov	r2, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa44 	bl	80066ba <USBD_CtlSendData>
 8006232:	e009      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9ce 	bl	80065d8 <USBD_CtlError>
 800623c:	e004      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa95 	bl	800676e <USBD_CtlSendStatus>
 8006244:	e000      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    return;
 8006246:	bf00      	nop
  }
}
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	889b      	ldrh	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d131      	bne.n	80062c6 <USBD_SetAddress+0x76>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d12d      	bne.n	80062c6 <USBD_SetAddress+0x76>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	885b      	ldrh	r3, [r3, #2]
 800626e:	2b7f      	cmp	r3, #127	; 0x7f
 8006270:	d829      	bhi.n	80062c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	885b      	ldrh	r3, [r3, #2]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d104      	bne.n	8006294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9a3 	bl	80065d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	e01d      	b.n	80062d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7bfa      	ldrb	r2, [r7, #15]
 8006298:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fec7 	bl	8007034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa61 	bl	800676e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ba:	e009      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	e004      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f985 	bl	80065d8 <USBD_CtlError>
  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	885b      	ldrh	r3, [r3, #2]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	4b4c      	ldr	r3, [pc, #304]	; (8006420 <USBD_SetConfig+0x148>)
 80062ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062f0:	4b4b      	ldr	r3, [pc, #300]	; (8006420 <USBD_SetConfig+0x148>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d905      	bls.n	8006304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f96c 	bl	80065d8 <USBD_CtlError>
    return USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e088      	b.n	8006416 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d002      	beq.n	8006316 <USBD_SetConfig+0x3e>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d025      	beq.n	8006360 <USBD_SetConfig+0x88>
 8006314:	e071      	b.n	80063fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006316:	4b42      	ldr	r3, [pc, #264]	; (8006420 <USBD_SetConfig+0x148>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01c      	beq.n	8006358 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800631e:	4b40      	ldr	r3, [pc, #256]	; (8006420 <USBD_SetConfig+0x148>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006328:	4b3d      	ldr	r3, [pc, #244]	; (8006420 <USBD_SetConfig+0x148>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f948 	bl	80055c4 <USBD_SetClassConfig>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f949 	bl	80065d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006346:	e065      	b.n	8006414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa10 	bl	800676e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2203      	movs	r2, #3
 8006352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006356:	e05d      	b.n	8006414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fa08 	bl	800676e <USBD_CtlSendStatus>
      break;
 800635e:	e059      	b.n	8006414 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006360:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <USBD_SetConfig+0x148>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d112      	bne.n	800638e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006370:	4b2b      	ldr	r3, [pc, #172]	; (8006420 <USBD_SetConfig+0x148>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <USBD_SetConfig+0x148>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff f93b 	bl	80055fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9f1 	bl	800676e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800638c:	e042      	b.n	8006414 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <USBD_SetConfig+0x148>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d02a      	beq.n	80063f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff f929 	bl	80055fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <USBD_SetConfig+0x148>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063b4:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <USBD_SetConfig+0x148>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f902 	bl	80055c4 <USBD_SetClassConfig>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00f      	beq.n	80063ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f903 	bl	80065d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff f90e 	bl	80055fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80063e8:	e014      	b.n	8006414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9bf 	bl	800676e <USBD_CtlSendStatus>
      break;
 80063f0:	e010      	b.n	8006414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9bb 	bl	800676e <USBD_CtlSendStatus>
      break;
 80063f8:	e00c      	b.n	8006414 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8eb 	bl	80065d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006402:	4b07      	ldr	r3, [pc, #28]	; (8006420 <USBD_SetConfig+0x148>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff f8f7 	bl	80055fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800640e:	2303      	movs	r3, #3
 8006410:	73fb      	strb	r3, [r7, #15]
      break;
 8006412:	bf00      	nop
  }

  return ret;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000212 	.word	0x20000212

08006424 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	88db      	ldrh	r3, [r3, #6]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d004      	beq.n	8006440 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f8cd 	bl	80065d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800643e:	e023      	b.n	8006488 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	dc02      	bgt.n	8006452 <USBD_GetConfig+0x2e>
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc03      	bgt.n	8006458 <USBD_GetConfig+0x34>
 8006450:	e015      	b.n	800647e <USBD_GetConfig+0x5a>
 8006452:	2b03      	cmp	r3, #3
 8006454:	d00b      	beq.n	800646e <USBD_GetConfig+0x4a>
 8006456:	e012      	b.n	800647e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3308      	adds	r3, #8
 8006462:	2201      	movs	r2, #1
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f927 	bl	80066ba <USBD_CtlSendData>
        break;
 800646c:	e00c      	b.n	8006488 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	2201      	movs	r2, #1
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f91f 	bl	80066ba <USBD_CtlSendData>
        break;
 800647c:	e004      	b.n	8006488 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8a9 	bl	80065d8 <USBD_CtlError>
        break;
 8006486:	bf00      	nop
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d81e      	bhi.n	80064e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d004      	beq.n	80064ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f890 	bl	80065d8 <USBD_CtlError>
        break;
 80064b8:	e01a      	b.n	80064f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f043 0202 	orr.w	r2, r3, #2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	330c      	adds	r3, #12
 80064da:	2202      	movs	r2, #2
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8eb 	bl	80066ba <USBD_CtlSendData>
      break;
 80064e4:	e004      	b.n	80064f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f875 	bl	80065d8 <USBD_CtlError>
      break;
 80064ee:	bf00      	nop
  }
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	885b      	ldrh	r3, [r3, #2]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d106      	bne.n	8006518 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f92b 	bl	800676e <USBD_CtlSendStatus>
  }
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	2b02      	cmp	r3, #2
 8006536:	d80b      	bhi.n	8006550 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	885b      	ldrh	r3, [r3, #2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10c      	bne.n	800655a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f910 	bl	800676e <USBD_CtlSendStatus>
      }
      break;
 800654e:	e004      	b.n	800655a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f840 	bl	80065d8 <USBD_CtlError>
      break;
 8006558:	e000      	b.n	800655c <USBD_ClrFeature+0x3c>
      break;
 800655a:	bf00      	nop
  }
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fabb 	bl	8005b0a <SWAPBYTE>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff faae 	bl	8005b0a <SWAPBYTE>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7ff faa1 	bl	8005b0a <SWAPBYTE>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	80da      	strh	r2, [r3, #6]
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fcbb 	bl	8006f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065ea:	2100      	movs	r1, #0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fcb7 	bl	8006f60 <USBD_LL_StallEP>
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d036      	beq.n	800667e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006614:	6938      	ldr	r0, [r7, #16]
 8006616:	f000 f836 	bl	8006686 <USBD_GetLen>
 800661a:	4603      	mov	r3, r0
 800661c:	3301      	adds	r3, #1
 800661e:	b29b      	uxth	r3, r3
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	701a      	strb	r2, [r3, #0]
  idx++;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	3301      	adds	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4413      	add	r3, r2
 8006640:	2203      	movs	r2, #3
 8006642:	701a      	strb	r2, [r3, #0]
  idx++;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	3301      	adds	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800664a:	e013      	b.n	8006674 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4413      	add	r3, r2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3301      	adds	r3, #1
 800665c:	613b      	str	r3, [r7, #16]
    idx++;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	3301      	adds	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
    idx++;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	3301      	adds	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e7      	bne.n	800664c <USBD_GetString+0x52>
 800667c:	e000      	b.n	8006680 <USBD_GetString+0x86>
    return;
 800667e:	bf00      	nop
  }
}
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006696:	e005      	b.n	80066a4 <USBD_GetLen+0x1e>
  {
    len++;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	3301      	adds	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f5      	bne.n	8006698 <USBD_GetLen+0x12>
  }

  return len;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	2100      	movs	r1, #0
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fcc6 	bl	8007072 <USBD_LL_Transmit>

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	2100      	movs	r1, #0
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fcb5 	bl	8007072 <USBD_LL_Transmit>

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2203      	movs	r2, #3
 8006722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	2100      	movs	r1, #0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fcb9 	bl	80070b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	2100      	movs	r1, #0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fca8 	bl	80070b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800677e:	2300      	movs	r3, #0
 8006780:	2200      	movs	r2, #0
 8006782:	2100      	movs	r1, #0
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc74 	bl	8007072 <USBD_LL_Transmit>

  return USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2205      	movs	r2, #5
 80067a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067a4:	2300      	movs	r3, #0
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fc82 	bl	80070b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80067c0:	2200      	movs	r2, #0
 80067c2:	4912      	ldr	r1, [pc, #72]	; (800680c <MX_USB_DEVICE_Init+0x50>)
 80067c4:	4812      	ldr	r0, [pc, #72]	; (8006810 <MX_USB_DEVICE_Init+0x54>)
 80067c6:	f7fe fe8f 	bl	80054e8 <USBD_Init>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80067d0:	f7fa fbde 	bl	8000f90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80067d4:	490f      	ldr	r1, [pc, #60]	; (8006814 <MX_USB_DEVICE_Init+0x58>)
 80067d6:	480e      	ldr	r0, [pc, #56]	; (8006810 <MX_USB_DEVICE_Init+0x54>)
 80067d8:	f7fe feb6 	bl	8005548 <USBD_RegisterClass>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067e2:	f7fa fbd5 	bl	8000f90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067e6:	490c      	ldr	r1, [pc, #48]	; (8006818 <MX_USB_DEVICE_Init+0x5c>)
 80067e8:	4809      	ldr	r0, [pc, #36]	; (8006810 <MX_USB_DEVICE_Init+0x54>)
 80067ea:	f7fe fe07 	bl	80053fc <USBD_CDC_RegisterInterface>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067f4:	f7fa fbcc 	bl	8000f90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067f8:	4805      	ldr	r0, [pc, #20]	; (8006810 <MX_USB_DEVICE_Init+0x54>)
 80067fa:	f7fe fecc 	bl	8005596 <USBD_Start>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006804:	f7fa fbc4 	bl	8000f90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000134 	.word	0x20000134
 8006810:	20000490 	.word	0x20000490
 8006814:	2000001c 	.word	0x2000001c
 8006818:	20000120 	.word	0x20000120

0800681c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006820:	2200      	movs	r2, #0
 8006822:	4905      	ldr	r1, [pc, #20]	; (8006838 <CDC_Init_FS+0x1c>)
 8006824:	4805      	ldr	r0, [pc, #20]	; (800683c <CDC_Init_FS+0x20>)
 8006826:	f7fe fdfe 	bl	8005426 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800682a:	4905      	ldr	r1, [pc, #20]	; (8006840 <CDC_Init_FS+0x24>)
 800682c:	4803      	ldr	r0, [pc, #12]	; (800683c <CDC_Init_FS+0x20>)
 800682e:	f7fe fe18 	bl	8005462 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006832:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006834:	4618      	mov	r0, r3
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000f60 	.word	0x20000f60
 800683c:	20000490 	.word	0x20000490
 8006840:	20000760 	.word	0x20000760

08006844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800684a:	4618      	mov	r0, r3
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
 8006860:	4613      	mov	r3, r2
 8006862:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b23      	cmp	r3, #35	; 0x23
 8006868:	d84a      	bhi.n	8006900 <CDC_Control_FS+0xac>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <CDC_Control_FS+0x1c>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006901 	.word	0x08006901
 8006874:	08006901 	.word	0x08006901
 8006878:	08006901 	.word	0x08006901
 800687c:	08006901 	.word	0x08006901
 8006880:	08006901 	.word	0x08006901
 8006884:	08006901 	.word	0x08006901
 8006888:	08006901 	.word	0x08006901
 800688c:	08006901 	.word	0x08006901
 8006890:	08006901 	.word	0x08006901
 8006894:	08006901 	.word	0x08006901
 8006898:	08006901 	.word	0x08006901
 800689c:	08006901 	.word	0x08006901
 80068a0:	08006901 	.word	0x08006901
 80068a4:	08006901 	.word	0x08006901
 80068a8:	08006901 	.word	0x08006901
 80068ac:	08006901 	.word	0x08006901
 80068b0:	08006901 	.word	0x08006901
 80068b4:	08006901 	.word	0x08006901
 80068b8:	08006901 	.word	0x08006901
 80068bc:	08006901 	.word	0x08006901
 80068c0:	08006901 	.word	0x08006901
 80068c4:	08006901 	.word	0x08006901
 80068c8:	08006901 	.word	0x08006901
 80068cc:	08006901 	.word	0x08006901
 80068d0:	08006901 	.word	0x08006901
 80068d4:	08006901 	.word	0x08006901
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006901 	.word	0x08006901
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006901 	.word	0x08006901
 80068ec:	08006901 	.word	0x08006901
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006901 	.word	0x08006901
 80068f8:	08006901 	.word	0x08006901
 80068fc:	08006901 	.word	0x08006901
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006900:	bf00      	nop
  }

  return (USBD_OK);
 8006902:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <CDC_Receive_FS+0x24>)
 800691e:	f7fe fda0 	bl	8005462 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006922:	4804      	ldr	r0, [pc, #16]	; (8006934 <CDC_Receive_FS+0x24>)
 8006924:	f7fe fdb6 	bl	8005494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006928:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000490 	.word	0x20000490

08006938 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800694a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	6039      	str	r1, [r7, #0]
 8006966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2212      	movs	r2, #18
 800696c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000150 	.word	0x20000150

08006980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2204      	movs	r2, #4
 8006990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000164 	.word	0x20000164

080069a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4907      	ldr	r1, [pc, #28]	; (80069d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80069ba:	4808      	ldr	r0, [pc, #32]	; (80069dc <USBD_FS_ProductStrDescriptor+0x38>)
 80069bc:	f7ff fe1d 	bl	80065fa <USBD_GetString>
 80069c0:	e004      	b.n	80069cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	4904      	ldr	r1, [pc, #16]	; (80069d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <USBD_FS_ProductStrDescriptor+0x38>)
 80069c8:	f7ff fe17 	bl	80065fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20001760 	.word	0x20001760
 80069dc:	0800723c 	.word	0x0800723c

080069e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	4904      	ldr	r1, [pc, #16]	; (8006a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069f0:	4804      	ldr	r0, [pc, #16]	; (8006a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069f2:	f7ff fe02 	bl	80065fa <USBD_GetString>
  return USBD_StrDesc;
 80069f6:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20001760 	.word	0x20001760
 8006a04:	08007254 	.word	0x08007254

08006a08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	6039      	str	r1, [r7, #0]
 8006a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	221a      	movs	r2, #26
 8006a18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a1a:	f000 f843 	bl	8006aa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a1e:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000168 	.word	0x20000168

08006a2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4907      	ldr	r1, [pc, #28]	; (8006a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a42:	4808      	ldr	r0, [pc, #32]	; (8006a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a44:	f7ff fdd9 	bl	80065fa <USBD_GetString>
 8006a48:	e004      	b.n	8006a54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	4904      	ldr	r1, [pc, #16]	; (8006a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a4e:	4805      	ldr	r0, [pc, #20]	; (8006a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a50:	f7ff fdd3 	bl	80065fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a54:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20001760 	.word	0x20001760
 8006a64:	08007268 	.word	0x08007268

08006a68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	6039      	str	r1, [r7, #0]
 8006a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4907      	ldr	r1, [pc, #28]	; (8006a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a7e:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a80:	f7ff fdbb 	bl	80065fa <USBD_GetString>
 8006a84:	e004      	b.n	8006a90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	4904      	ldr	r1, [pc, #16]	; (8006a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a8a:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a8c:	f7ff fdb5 	bl	80065fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a90:	4b02      	ldr	r3, [pc, #8]	; (8006a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20001760 	.word	0x20001760
 8006aa0:	08007274 	.word	0x08007274

08006aa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <Get_SerialNum+0x44>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <Get_SerialNum+0x48>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <Get_SerialNum+0x4c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006aca:	2208      	movs	r2, #8
 8006acc:	4909      	ldr	r1, [pc, #36]	; (8006af4 <Get_SerialNum+0x50>)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f814 	bl	8006afc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	4908      	ldr	r1, [pc, #32]	; (8006af8 <Get_SerialNum+0x54>)
 8006ad8:	68b8      	ldr	r0, [r7, #8]
 8006ada:	f000 f80f 	bl	8006afc <IntToUnicode>
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	1fff7a10 	.word	0x1fff7a10
 8006aec:	1fff7a14 	.word	0x1fff7a14
 8006af0:	1fff7a18 	.word	0x1fff7a18
 8006af4:	2000016a 	.word	0x2000016a
 8006af8:	2000017a 	.word	0x2000017a

08006afc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
 8006b12:	e027      	b.n	8006b64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	0f1b      	lsrs	r3, r3, #28
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d80b      	bhi.n	8006b34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4619      	mov	r1, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3230      	adds	r2, #48	; 0x30
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	e00a      	b.n	8006b4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0f1b      	lsrs	r3, r3, #28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4619      	mov	r1, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	440b      	add	r3, r1
 8006b44:	3237      	adds	r2, #55	; 0x37
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	3301      	adds	r3, #1
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	3301      	adds	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
 8006b64:	7dfa      	ldrb	r2, [r7, #23]
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d3d3      	bcc.n	8006b14 <IntToUnicode+0x18>
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b84:	f107 0314 	add.w	r3, r7, #20
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b9c:	d13a      	bne.n	8006c14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	4a1d      	ldr	r2, [pc, #116]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6313      	str	r3, [r2, #48]	; 0x30
 8006bae:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006bba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006bcc:	230a      	movs	r3, #10
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd0:	f107 0314 	add.w	r3, r7, #20
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4812      	ldr	r0, [pc, #72]	; (8006c20 <HAL_PCD_MspInit+0xa4>)
 8006bd8:	f7fa fc68 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	4a0e      	ldr	r2, [pc, #56]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be6:	6353      	str	r3, [r2, #52]	; 0x34
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <HAL_PCD_MspInit+0xa0>)
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c04:	2200      	movs	r2, #0
 8006c06:	2100      	movs	r1, #0
 8006c08:	2043      	movs	r0, #67	; 0x43
 8006c0a:	f7fa fc18 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c0e:	2043      	movs	r0, #67	; 0x43
 8006c10:	f7fa fc31 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c14:	bf00      	nop
 8006c16:	3728      	adds	r7, #40	; 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	40020000 	.word	0x40020000

08006c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fcf6 	bl	800562c <USBD_LL_SetupStage>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7fe fd30 	bl	80056d6 <USBD_LL_DataOutStage>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3348      	adds	r3, #72	; 0x48
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7fe fd79 	bl	800579c <USBD_LL_DataInStage>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fe8d 	bl	80059e0 <USBD_LL_SOF>
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	e008      	b.n	8006cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d102      	bne.n	8006cf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e001      	b.n	8006cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006cf6:	f7fa f94b 	bl	8000f90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe fe2d 	bl	8005964 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fdd9 	bl	80058c8 <USBD_LL_Reset>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fe28 	bl	8005984 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <HAL_PCD_SuspendCallback+0x48>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4a03      	ldr	r2, [pc, #12]	; (8006d68 <HAL_PCD_SuspendCallback+0x48>)
 8006d5a:	f043 0306 	orr.w	r3, r3, #6
 8006d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	e000ed00 	.word	0xe000ed00

08006d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fe18 	bl	80059b0 <USBD_LL_Resume>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fe66 	bl	8005a70 <USBD_LL_IsoOUTIncomplete>
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fe2e 	bl	8005a24 <USBD_LL_IsoINIncomplete>
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fe6c 	bl	8005abc <USBD_LL_DevConnected>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fe fe69 	bl	8005ad2 <USBD_LL_DevDisconnected>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d13c      	bne.n	8006e92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e18:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e28:	4b1c      	ldr	r3, [pc, #112]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e30:	4b1a      	ldr	r3, [pc, #104]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e32:	2204      	movs	r2, #4
 8006e34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e36:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e38:	2202      	movs	r2, #2
 8006e3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e3c:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e44:	2202      	movs	r2, #2
 8006e46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e48:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e66:	480d      	ldr	r0, [pc, #52]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e68:	f7fa fcef 	bl	800184a <HAL_PCD_Init>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e72:	f7fa f88d 	bl	8000f90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	4808      	ldr	r0, [pc, #32]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e7a:	f7fb fe4c 	bl	8002b16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	2100      	movs	r1, #0
 8006e82:	4806      	ldr	r0, [pc, #24]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e84:	f7fb fe00 	bl	8002a88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4803      	ldr	r0, [pc, #12]	; (8006e9c <USBD_LL_Init+0x94>)
 8006e8e:	f7fb fdfb 	bl	8002a88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20001960 	.word	0x20001960

08006ea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fa fde4 	bl	8001a84 <HAL_PCD_Start>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f942 	bl	800714c <USBD_Get_USB_Status>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	70fb      	strb	r3, [r7, #3]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70bb      	strb	r3, [r7, #2]
 8006eec:	4613      	mov	r3, r2
 8006eee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006efe:	78bb      	ldrb	r3, [r7, #2]
 8006f00:	883a      	ldrh	r2, [r7, #0]
 8006f02:	78f9      	ldrb	r1, [r7, #3]
 8006f04:	f7fb f9c8 	bl	8002298 <HAL_PCD_EP_Open>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f91c 	bl	800714c <USBD_Get_USB_Status>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fb fa11 	bl	8002368 <HAL_PCD_EP_Close>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f8fd 	bl	800714c <USBD_Get_USB_Status>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fb fae9 	bl	8002556 <HAL_PCD_EP_SetStall>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f8de 	bl	800714c <USBD_Get_USB_Status>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fb fb2e 	bl	800261e <HAL_PCD_EP_ClrStall>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f8bf 	bl	800714c <USBD_Get_USB_Status>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0b      	bge.n	8007010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	333e      	adds	r3, #62	; 0x3e
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	e00b      	b.n	8007028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7fb f8fb 	bl	800224e <HAL_PCD_SetAddress>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f874 	bl	800714c <USBD_Get_USB_Status>
 8007064:	4603      	mov	r3, r0
 8007066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007068:	7bbb      	ldrb	r3, [r7, #14]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	460b      	mov	r3, r1
 8007080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007090:	7af9      	ldrb	r1, [r7, #11]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	f7fb fa14 	bl	80024c2 <HAL_PCD_EP_Transmit>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f853 	bl	800714c <USBD_Get_USB_Status>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	460b      	mov	r3, r1
 80070c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070d2:	7af9      	ldrb	r1, [r7, #11]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	f7fb f990 	bl	80023fc <HAL_PCD_EP_Receive>
 80070dc:	4603      	mov	r3, r0
 80070de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f832 	bl	800714c <USBD_Get_USB_Status>
 80070e8:	4603      	mov	r3, r0
 80070ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f7fb f9c0 	bl	8002492 <HAL_PCD_EP_GetRxCount>
 8007112:	4603      	mov	r3, r0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <USBD_static_malloc+0x18>)
}
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000214 	.word	0x20000214

08007138 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d817      	bhi.n	8007190 <USBD_Get_USB_Status+0x44>
 8007160:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBD_Get_USB_Status+0x1c>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	08007179 	.word	0x08007179
 800716c:	0800717f 	.word	0x0800717f
 8007170:	08007185 	.word	0x08007185
 8007174:	0800718b 	.word	0x0800718b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
    break;
 800717c:	e00b      	b.n	8007196 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	73fb      	strb	r3, [r7, #15]
    break;
 8007182:	e008      	b.n	8007196 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
    break;
 8007188:	e005      	b.n	8007196 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	73fb      	strb	r3, [r7, #15]
    break;
 800718e:	e002      	b.n	8007196 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
    break;
 8007194:	bf00      	nop
  }
  return usb_status;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f000 f82e 	bl	8007218 <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	0800779c 	.word	0x0800779c
 80071e0:	0800779c 	.word	0x0800779c
 80071e4:	0800779c 	.word	0x0800779c
 80071e8:	080077a0 	.word	0x080077a0

080071ec <memcpy>:
 80071ec:	440a      	add	r2, r1
 80071ee:	4291      	cmp	r1, r2
 80071f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071f4:	d100      	bne.n	80071f8 <memcpy+0xc>
 80071f6:	4770      	bx	lr
 80071f8:	b510      	push	{r4, lr}
 80071fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007202:	4291      	cmp	r1, r2
 8007204:	d1f9      	bne.n	80071fa <memcpy+0xe>
 8007206:	bd10      	pop	{r4, pc}

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <_init>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr

08007224 <_fini>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr
