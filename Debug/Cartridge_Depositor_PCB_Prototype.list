
Cartridge_Depositor_PCB_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009094  08009094  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800909c  0800909c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080090a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000184  08009228  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  08009228  00021db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bc8  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034f0  00000000  00000000  00039d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0003d270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003e598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000537f  00000000  00000000  0003f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000122c7  00000000  00000000  00044ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c44f1  00000000  00000000  00056d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  0011b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b18 	.word	0x08008b18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08008b18 	.word	0x08008b18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <ILI9341_SendCommand>:


//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <ILI9341_SendCommand+0x54>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <ILI9341_SendCommand+0x58>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f001 fb19 	bl	80022f4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <ILI9341_SendCommand+0x5c>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <ILI9341_SendCommand+0x60>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f001 fb11 	bl	80022f4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000cd2:	f107 010f 	add.w	r1, r7, #15
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	2201      	movs	r2, #1
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <ILI9341_SendCommand+0x64>)
 8000cdc:	f003 f94b 	bl	8003f76 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <ILI9341_SendCommand+0x5c>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <ILI9341_SendCommand+0x60>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f001 fb02 	bl	80022f4 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000204 	.word	0x20000204
 8000cfc:	20000208 	.word	0x20000208
 8000d00:	200001fc 	.word	0x200001fc
 8000d04:	20000200 	.word	0x20000200
 8000d08:	200001a4 	.word	0x200001a4

08000d0c <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ILI9341_SendData+0x54>)
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <ILI9341_SendData+0x58>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	f001 fae5 	bl	80022f4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <ILI9341_SendData+0x5c>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <ILI9341_SendData+0x60>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	f001 fadd 	bl	80022f4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000d3a:	f107 010f 	add.w	r1, r7, #15
 8000d3e:	2305      	movs	r3, #5
 8000d40:	2201      	movs	r2, #1
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <ILI9341_SendData+0x64>)
 8000d44:	f003 f917 	bl	8003f76 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <ILI9341_SendData+0x5c>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <ILI9341_SendData+0x60>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	f001 face 	bl	80022f4 <HAL_GPIO_WritePin>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000204 	.word	0x20000204
 8000d64:	20000208 	.word	0x20000208
 8000d68:	200001fc 	.word	0x200001fc
 8000d6c:	20000200 	.word	0x20000200
 8000d70:	200001a4 	.word	0x200001a4

08000d74 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 8000d92:	202a      	movs	r0, #42	; 0x2a
 8000d94:	f7ff ff86 	bl	8000ca4 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffb3 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffae 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffa7 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffa2 	bl	8000d0c <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000dc8:	202b      	movs	r0, #43	; 0x2b
 8000dca:	f7ff ff6b 	bl	8000ca4 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff98 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff93 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff8c 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff87 	bl	8000d0c <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f7ff ff50 	bl	8000ca4 <ILI9341_SendCommand>
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000e1c:	2258      	movs	r2, #88	; 0x58
 8000e1e:	68f9      	ldr	r1, [r7, #12]
 8000e20:	4853      	ldr	r0, [pc, #332]	; (8000f70 <ILI9341_Init+0x164>)
 8000e22:	f007 fe65 	bl	8008af0 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000e26:	4a53      	ldr	r2, [pc, #332]	; (8000f74 <ILI9341_Init+0x168>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000e2c:	4a52      	ldr	r2, [pc, #328]	; (8000f78 <ILI9341_Init+0x16c>)
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000e32:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <ILI9341_Init+0x170>)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <ILI9341_Init+0x174>)
 8000e3a:	8b3b      	ldrh	r3, [r7, #24]
 8000e3c:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <ILI9341_Init+0x168>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <ILI9341_Init+0x16c>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fa53 	bl	80022f4 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000e4e:	4a4d      	ldr	r2, [pc, #308]	; (8000f84 <ILI9341_Init+0x178>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <ILI9341_Init+0x17c>)
 8000e56:	8c3b      	ldrh	r3, [r7, #32]
 8000e58:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000e5a:	8c3b      	ldrh	r3, [r7, #32]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	69f8      	ldr	r0, [r7, #28]
 8000e62:	f001 fa47 	bl	80022f4 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff ff1c 	bl	8000ca4 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f000 ff5b 	bl	8001d28 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000e72:	2028      	movs	r0, #40	; 0x28
 8000e74:	f7ff ff16 	bl	8000ca4 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000e78:	20c0      	movs	r0, #192	; 0xc0
 8000e7a:	f7ff ff13 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 8000e7e:	2026      	movs	r0, #38	; 0x26
 8000e80:	f7ff ff44 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8000e84:	20c1      	movs	r0, #193	; 0xc1
 8000e86:	f7ff ff0d 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000e8a:	2011      	movs	r0, #17
 8000e8c:	f7ff ff3e 	bl	8000d0c <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 8000e90:	20c5      	movs	r0, #197	; 0xc5
 8000e92:	f7ff ff07 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8000e96:	2035      	movs	r0, #53	; 0x35
 8000e98:	f7ff ff38 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000e9c:	203e      	movs	r0, #62	; 0x3e
 8000e9e:	f7ff ff35 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8000ea2:	20c7      	movs	r0, #199	; 0xc7
 8000ea4:	f7ff fefe 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8000ea8:	20be      	movs	r0, #190	; 0xbe
 8000eaa:	f7ff ff2f 	bl	8000d0c <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000eae:	2036      	movs	r0, #54	; 0x36
 8000eb0:	f7ff fef8 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8000eb4:	2048      	movs	r0, #72	; 0x48
 8000eb6:	f7ff ff29 	bl	8000d0c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000eba:	203a      	movs	r0, #58	; 0x3a
 8000ebc:	f7ff fef2 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000ec0:	2055      	movs	r0, #85	; 0x55
 8000ec2:	f7ff ff23 	bl	8000d0c <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8000ec6:	20b1      	movs	r0, #177	; 0xb1
 8000ec8:	f7ff feec 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff1d 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000ed2:	201f      	movs	r0, #31
 8000ed4:	f7ff ff1a 	bl	8000d0c <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000ed8:	202a      	movs	r0, #42	; 0x2a
 8000eda:	f7ff fee3 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff ff14 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ff11 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ff0e 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000ef0:	20ef      	movs	r0, #239	; 0xef
 8000ef2:	f7ff ff0b 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000ef6:	202b      	movs	r0, #43	; 0x2b
 8000ef8:	f7ff fed4 	bl	8000ca4 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff05 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff02 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff feff 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000f0e:	203f      	movs	r0, #63	; 0x3f
 8000f10:	f7ff fefc 	bl	8000d0c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000f14:	2034      	movs	r0, #52	; 0x34
 8000f16:	f7ff fec5 	bl	8000ca4 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000f1a:	20b7      	movs	r0, #183	; 0xb7
 8000f1c:	f7ff fec2 	bl	8000ca4 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f7ff fef3 	bl	8000d0c <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000f26:	20b6      	movs	r0, #182	; 0xb6
 8000f28:	f7ff febc 	bl	8000ca4 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f7ff feed 	bl	8000d0c <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000f32:	2082      	movs	r0, #130	; 0x82
 8000f34:	f7ff feea 	bl	8000d0c <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000f38:	2027      	movs	r0, #39	; 0x27
 8000f3a:	f7ff fee7 	bl	8000d0c <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fee4 	bl	8000d0c <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000f44:	2011      	movs	r0, #17
 8000f46:	f7ff fead 	bl	8000ca4 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 feec 	bl	8001d28 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000f50:	2029      	movs	r0, #41	; 0x29
 8000f52:	f7ff fea7 	bl	8000ca4 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000f56:	2064      	movs	r0, #100	; 0x64
 8000f58:	f000 fee6 	bl	8001d28 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000f5c:	202c      	movs	r0, #44	; 0x2c
 8000f5e:	f7ff fea1 	bl	8000ca4 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000f62:	2005      	movs	r0, #5
 8000f64:	f000 fee0 	bl	8001d28 <HAL_Delay>
 }
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001a4 	.word	0x200001a4
 8000f74:	200001fc 	.word	0x200001fc
 8000f78:	20000200 	.word	0x20000200
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	20000208 	.word	0x20000208
 8000f84:	2000020c 	.word	0x2000020c
 8000f88:	20000210 	.word	0x20000210

08000f8c <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
 8000f96:	460b      	mov	r3, r1
 8000f98:	80bb      	strh	r3, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	88b9      	ldrh	r1, [r7, #4]
 8000fa4:	88f8      	ldrh	r0, [r7, #6]
 8000fa6:	f7ff fee5 	bl	8000d74 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff feaa 	bl	8000d0c <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fea5 	bl	8000d0c <ILI9341_SendData>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8000fd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000fda:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000fdc:	23ff      	movs	r3, #255	; 0xff
 8000fde:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <ILI9341_Fill+0x80>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <ILI9341_Fill+0x24>
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <ILI9341_Fill+0x80>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d107      	bne.n	8001000 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000ff0:	f240 133f 	movw	r3, #319	; 0x13f
 8000ff4:	22ef      	movs	r2, #239	; 0xef
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff febb 	bl	8000d74 <ILI9341_SetCursorPosition>
 8000ffe:	e00e      	b.n	800101e <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <ILI9341_Fill+0x80>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <ILI9341_Fill+0x44>
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <ILI9341_Fill+0x80>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d116      	bne.n	800103e <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8001010:	23ef      	movs	r3, #239	; 0xef
 8001012:	f240 123f 	movw	r2, #319	; 0x13f
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff feab 	bl	8000d74 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800101e:	e00e      	b.n	800103e <ILI9341_Fill+0x72>
			n--;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b01      	subs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe6c 	bl	8000d0c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe67 	bl	8000d0c <ILI9341_SendData>
	while (n) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ed      	bne.n	8001020 <ILI9341_Fill+0x54>
	}
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000

08001050 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	3301      	adds	r3, #1
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	1a8a      	subs	r2, r1, r2
 800106c:	3201      	adds	r2, #1
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800107a:	d902      	bls.n	8001082 <ILI9341_Fill_Rect+0x32>
 800107c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001080:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b298      	uxth	r0, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	b299      	uxth	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29a      	uxth	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	f7ff fe6f 	bl	8000d74 <ILI9341_SetCursorPosition>
	while (n) {
 8001096:	e00e      	b.n	80010b6 <ILI9341_Fill_Rect+0x66>
			n--;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3b01      	subs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 800109e:	8c3b      	ldrh	r3, [r7, #32]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe30 	bl	8000d0c <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80010ac:	8c3b      	ldrh	r3, [r7, #32]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe2b 	bl	8000d0c <ILI9341_SendData>
	while (n) {
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1ed      	bne.n	8001098 <ILI9341_Fill_Rect+0x48>
	}
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4623      	mov	r3, r4
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	4603      	mov	r3, r0
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
 80010de:	4613      	mov	r3, r2
 80010e0:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80010e2:	4b9a      	ldr	r3, [pc, #616]	; (800134c <ILI9341_drawChar+0x288>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d003      	beq.n	80010f2 <ILI9341_drawChar+0x2e>
 80010ea:	4b98      	ldr	r3, [pc, #608]	; (800134c <ILI9341_drawChar+0x288>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d121      	bne.n	8001136 <ILI9341_drawChar+0x72>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	2bef      	cmp	r3, #239	; 0xef
 80010f8:	f300 8121 	bgt.w	800133e <ILI9341_drawChar+0x27a>
 80010fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001100:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001104:	f280 811b 	bge.w	800133e <ILI9341_drawChar+0x27a>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8001108:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800110c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	440b      	add	r3, r1
 800111a:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 800111c:	2b00      	cmp	r3, #0
 800111e:	f2c0 810e 	blt.w	800133e <ILI9341_drawChar+0x27a>
     ((y + 8 * size - 1) < 0))   // Clip top
 8001122:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8001130:	2b00      	cmp	r3, #0
 8001132:	da23      	bge.n	800117c <ILI9341_drawChar+0xb8>
    return;
 8001134:	e103      	b.n	800133e <ILI9341_drawChar+0x27a>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8001136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113a:	2bef      	cmp	r3, #239	; 0xef
 800113c:	f300 8101 	bgt.w	8001342 <ILI9341_drawChar+0x27e>
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001148:	f280 80fb 	bge.w	8001342 <ILI9341_drawChar+0x27e>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800114c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001150:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	3b01      	subs	r3, #1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001160:	2b00      	cmp	r3, #0
 8001162:	f2c0 80ee 	blt.w	8001342 <ILI9341_drawChar+0x27e>
     ((x + 8 * size - 1) < 0))   // Clip top
 8001166:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800116a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 8001174:	2b00      	cmp	r3, #0
 8001176:	f2c0 80e4 	blt.w	8001342 <ILI9341_drawChar+0x27e>
 800117a:	e000      	b.n	800117e <ILI9341_drawChar+0xba>
		if((x >= ILI9341_WIDTH)            || // Clip right
 800117c:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800117e:	4b74      	ldr	r3, [pc, #464]	; (8001350 <ILI9341_drawChar+0x28c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <ILI9341_drawChar+0xd4>
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2baf      	cmp	r3, #175	; 0xaf
 8001190:	d902      	bls.n	8001198 <ILI9341_drawChar+0xd4>
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	3301      	adds	r3, #1
 8001196:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e0c9      	b.n	8001332 <ILI9341_drawChar+0x26e>
    uint8_t line;
    if (i == 5) 
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d102      	bne.n	80011ac <ILI9341_drawChar+0xe8>
      line = 0x0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73bb      	strb	r3, [r7, #14]
 80011aa:	e00b      	b.n	80011c4 <ILI9341_drawChar+0x100>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 80011ac:	78fa      	ldrb	r2, [r7, #3]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <ILI9341_drawChar+0x290>)
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	737b      	strb	r3, [r7, #13]
 80011c8:	e0a8      	b.n	800131c <ILI9341_drawChar+0x258>
      if (line & 0x1) {
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d04b      	beq.n	800126c <ILI9341_drawChar+0x1a8>
        if (size == 1) // default size
 80011d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d110      	bne.n	80011fe <ILI9341_drawChar+0x13a>
          ILI9341_DrawPixel(x+i, y+j, color);
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4413      	add	r3, r2
 80011e6:	b298      	uxth	r0, r3
 80011e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	883a      	ldrh	r2, [r7, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fec8 	bl	8000f8c <ILI9341_DrawPixel>
 80011fc:	e085      	b.n	800130a <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80011fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	4413      	add	r3, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001216:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800121a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800121e:	fb01 f303 	mul.w	r3, r1, r3
 8001222:	4413      	add	r3, r2
 8001224:	461c      	mov	r4, r3
 8001226:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	441a      	add	r2, r3
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	461d      	mov	r5, r3
 8001240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800124a:	441a      	add	r2, r3
 800124c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001250:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4413      	add	r3, r2
 800125a:	461a      	mov	r2, r3
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	462a      	mov	r2, r5
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff fef3 	bl	8001050 <ILI9341_Fill_Rect>
 800126a:	e04e      	b.n	800130a <ILI9341_drawChar+0x246>
        } 
      } else if (bg != color) {
 800126c:	8c3a      	ldrh	r2, [r7, #32]
 800126e:	883b      	ldrh	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d04a      	beq.n	800130a <ILI9341_drawChar+0x246>
        if (size == 1) // default size
 8001274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001278:	2b01      	cmp	r3, #1
 800127a:	d110      	bne.n	800129e <ILI9341_drawChar+0x1da>
          ILI9341_DrawPixel(x+i, y+j, bg);
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001280:	b29a      	uxth	r2, r3
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4413      	add	r3, r2
 8001286:	b298      	uxth	r0, r3
 8001288:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800128c:	b29a      	uxth	r2, r3
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	8c3a      	ldrh	r2, [r7, #32]
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fe78 	bl	8000f8c <ILI9341_DrawPixel>
 800129c:	e035      	b.n	800130a <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800129e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ba:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	461c      	mov	r4, r3
 80012c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	441a      	add	r2, r3
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	461d      	mov	r5, r3
 80012e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ea:	441a      	add	r2, r3
 80012ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	8c3b      	ldrh	r3, [r7, #32]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	462a      	mov	r2, r5
 8001304:	4621      	mov	r1, r4
 8001306:	f7ff fea3 	bl	8001050 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001310:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	737b      	strb	r3, [r7, #13]
 800131c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001320:	2b07      	cmp	r3, #7
 8001322:	f77f af52 	ble.w	80011ca <ILI9341_drawChar+0x106>
  for (int8_t i=0; i<6; i++ ) {
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	3301      	adds	r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b05      	cmp	r3, #5
 8001338:	f77f af31 	ble.w	800119e <ILI9341_drawChar+0xda>
 800133c:	e002      	b.n	8001344 <ILI9341_drawChar+0x280>
    return;
 800133e:	bf00      	nop
 8001340:	e000      	b.n	8001344 <ILI9341_drawChar+0x280>
    return;
 8001342:	bf00      	nop
    }
  }
}
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000000 	.word	0x20000000
 8001350:	200001a0 	.word	0x200001a0
 8001354:	08008b84 	.word	0x08008b84

08001358 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	817b      	strh	r3, [r7, #10]
 800136a:	460b      	mov	r3, r1
 800136c:	813b      	strh	r3, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001372:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	82fb      	strh	r3, [r7, #22]
 8001388:	e01a      	b.n	80013c0 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	8afa      	ldrh	r2, [r7, #22]
 800138e:	fb12 f303 	smulbb	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	897b      	ldrh	r3, [r7, #10]
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	b218      	sxth	r0, r3
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	88fc      	ldrh	r4, [r7, #6]
 80013a6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80013aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4623      	mov	r3, r4
 80013b6:	f7ff fe85 	bl	80010c4 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80013ba:	8afb      	ldrh	r3, [r7, #22]
 80013bc:	3301      	adds	r3, #1
 80013be:	82fb      	strh	r3, [r7, #22]
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	2b27      	cmp	r3, #39	; 0x27
 80013c4:	d805      	bhi.n	80013d2 <ILI9341_printText+0x7a>
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1db      	bne.n	800138a <ILI9341_printText+0x32>
	}
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
	...

080013dc <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d832      	bhi.n	8001454 <ILI9341_setRotation+0x78>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <ILI9341_setRotation+0x18>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001405 	.word	0x08001405
 80013f8:	08001419 	.word	0x08001419
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	08001441 	.word	0x08001441
	{
		case 1:
			rotationNum = 1;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <ILI9341_setRotation+0x94>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800140a:	2036      	movs	r0, #54	; 0x36
 800140c:	f7ff fc4a 	bl	8000ca4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001410:	2088      	movs	r0, #136	; 0x88
 8001412:	f7ff fc7b 	bl	8000d0c <ILI9341_SendData>
			break;
 8001416:	e027      	b.n	8001468 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <ILI9341_setRotation+0x94>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800141e:	2036      	movs	r0, #54	; 0x36
 8001420:	f7ff fc40 	bl	8000ca4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001424:	2028      	movs	r0, #40	; 0x28
 8001426:	f7ff fc71 	bl	8000d0c <ILI9341_SendData>
			break;
 800142a:	e01d      	b.n	8001468 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <ILI9341_setRotation+0x94>)
 800142e:	2203      	movs	r2, #3
 8001430:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001432:	2036      	movs	r0, #54	; 0x36
 8001434:	f7ff fc36 	bl	8000ca4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001438:	2048      	movs	r0, #72	; 0x48
 800143a:	f7ff fc67 	bl	8000d0c <ILI9341_SendData>
			break;
 800143e:	e013      	b.n	8001468 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <ILI9341_setRotation+0x94>)
 8001442:	2204      	movs	r2, #4
 8001444:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001446:	2036      	movs	r0, #54	; 0x36
 8001448:	f7ff fc2c 	bl	8000ca4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800144c:	20e8      	movs	r0, #232	; 0xe8
 800144e:	f7ff fc5d 	bl	8000d0c <ILI9341_SendData>
			break;
 8001452:	e009      	b.n	8001468 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <ILI9341_setRotation+0x94>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800145a:	2036      	movs	r0, #54	; 0x36
 800145c:	f7ff fc22 	bl	8000ca4 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001460:	2088      	movs	r0, #136	; 0x88
 8001462:	f7ff fc53 	bl	8000d0c <ILI9341_SendData>
			break;
 8001466:	bf00      	nop
	}
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fbe3 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f843 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f959 	bl	8001738 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001486:	f000 f8ab 	bl	80015e0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800148a:	f006 fe1b 	bl	80080c4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800148e:	f000 f8dd 	bl	800164c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <main+0x80>)
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0x80>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <main+0x80>)
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <main+0x84>)
 80014ac:	f7ff fcae 	bl	8000e0c <ILI9341_Init>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1); //Keeps screen on
 80014b0:	2201      	movs	r2, #1
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	480f      	ldr	r0, [pc, #60]	; (80014f4 <main+0x80>)
 80014b6:	f000 ff1d 	bl	80022f4 <HAL_GPIO_WritePin>
  ILI9341_setRotation(1); //Rotation vertical, pins at top
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff ff8e 	bl	80013dc <ILI9341_setRotation>
  //TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
  ILI9341_Fill(COLOR_BLUE);
 80014c0:	201f      	movs	r0, #31
 80014c2:	f7ff fd83 	bl	8000fcc <ILI9341_Fill>
  ILI9341_printText("Hello World", 20, 40, COLOR_WHITE, COLOR_BLACK, 2);
 80014c6:	2302      	movs	r3, #2
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	2114      	movs	r1, #20
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <main+0x88>)
 80014d8:	f7ff ff3e 	bl	8001358 <ILI9341_printText>
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET); //Initialize motor direction to CW
 80014dc:	2200      	movs	r2, #0
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <main+0x8c>)
 80014e2:	f000 ff07 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start motor pulse
 80014e6:	2100      	movs	r1, #0
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <main+0x90>)
 80014ea:	f002 fff3 	bl	80044d4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Manual_Mode();
 80014ee:	f000 f9a3 	bl	8001838 <Manual_Mode>
  {
 80014f2:	e7fc      	b.n	80014ee <main+0x7a>
 80014f4:	40020800 	.word	0x40020800
 80014f8:	2000047c 	.word	0x2000047c
 80014fc:	08008b30 	.word	0x08008b30
 8001500:	40020400 	.word	0x40020400
 8001504:	20000434 	.word	0x20000434

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 faf5 	bl	8008b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <SystemClock_Config+0xd0>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <SystemClock_Config+0xd0>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <SystemClock_Config+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <SystemClock_Config+0xd4>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <SystemClock_Config+0xd4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001572:	2310      	movs	r3, #16
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001576:	2302      	movs	r3, #2
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001580:	230f      	movs	r3, #15
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001584:	2390      	movs	r3, #144	; 0x90
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001588:	2302      	movs	r3, #2
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800158c:	2305      	movs	r3, #5
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f002 f849 	bl	800362c <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a0:	f000 f944 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 faac 	bl	8003b1c <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ca:	f000 f92f 	bl	800182c <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	; 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_SPI1_Init+0x64>)
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <MX_SPI1_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_SPI1_Init+0x64>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_SPI1_Init+0x64>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_SPI1_Init+0x64>)
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_SPI1_Init+0x64>)
 8001632:	f002 fc17 	bl	8003e64 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 f8f6 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000047c 	.word	0x2000047c
 8001648:	40013000 	.word	0x40013000

0800164c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <MX_TIM4_Init+0xe4>)
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <MX_TIM4_Init+0xe8>)
 8001680:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <MX_TIM4_Init+0xe4>)
 8001684:	224f      	movs	r2, #79	; 0x4f
 8001686:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <MX_TIM4_Init+0xe4>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <MX_TIM4_Init+0xe4>)
 8001690:	2231      	movs	r2, #49	; 0x31
 8001692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MX_TIM4_Init+0xe4>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <MX_TIM4_Init+0xe4>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016a0:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_TIM4_Init+0xe4>)
 80016a2:	f002 fe6f 	bl	8004384 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80016ac:	f000 f8be 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4619      	mov	r1, r3
 80016bc:	481c      	ldr	r0, [pc, #112]	; (8001730 <MX_TIM4_Init+0xe4>)
 80016be:	f003 f945 	bl	800494c <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80016c8:	f000 f8b0 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM4_Init+0xe4>)
 80016ce:	f002 fea8 	bl	8004422 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80016d8:	f000 f8a8 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4619      	mov	r1, r3
 80016ea:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_TIM4_Init+0xe4>)
 80016ec:	f003 fcf6 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80016f6:	f000 f899 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 80016fe:	2331      	movs	r3, #49	; 0x31
 8001700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM4_Init+0xe4>)
 8001712:	f003 f85d 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800171c:	f000 f886 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM4_Init+0xe4>)
 8001722:	f000 f9e5 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3738      	adds	r7, #56	; 0x38
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000434 	.word	0x20000434
 8001734:	40000800 	.word	0x40000800

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <MX_GPIO_Init+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <MX_GPIO_Init+0xe8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a24      	ldr	r2, [pc, #144]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <MX_GPIO_Init+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_GPIO_Init+0xe8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <MX_GPIO_Init+0xe8>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_GPIO_Init+0xe8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <MX_GPIO_Init+0xec>)
 80017c4:	f000 fd96 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017ce:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_GPIO_Init+0xec>)
 80017d0:	f000 fd90 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <MX_GPIO_Init+0xf0>)
 80017da:	f000 fd8b 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80017de:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <MX_GPIO_Init+0xec>)
 80017f8:	f000 fbca 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_GPIO_Init+0xf0>)
 8001814:	f000 fbbc 	bl	8001f90 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	e7fe      	b.n	8001832 <Error_Handler+0x6>
 8001834:	0000      	movs	r0, r0
	...

08001838 <Manual_Mode>:
uint8_t i;



void Manual_Mode()
{
 8001838:	b598      	push	{r3, r4, r7, lr}
 800183a:	af00      	add	r7, sp, #0
	// Forward rotation
	if(!(HAL_GPIO_ReadPin (GPIOA,GPIO_PIN_5)))// checks for button pressed or not
 800183c:	2120      	movs	r1, #32
 800183e:	485c      	ldr	r0, [pc, #368]	; (80019b0 <Manual_Mode+0x178>)
 8001840:	f000 fd40 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d14f      	bne.n	80018ea <Manual_Mode+0xb2>
		 {
			while((!(HAL_GPIO_ReadPin (GPIOA,GPIO_PIN_5)))); // wait for button to be released
 800184a:	bf00      	nop
 800184c:	2120      	movs	r1, #32
 800184e:	4858      	ldr	r0, [pc, #352]	; (80019b0 <Manual_Mode+0x178>)
 8001850:	f000 fd38 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f8      	beq.n	800184c <Manual_Mode+0x14>
				 htim4.Instance->PSC =(PRESCALER+1);
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	a151      	add	r1, pc, #324	; (adr r1, 80019a8 <Manual_Mode+0x170>)
 8001864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001868:	f7fe ff94 	bl	8000794 <__aeabi_ddiv>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	4618      	mov	r0, r3
 8001872:	4621      	mov	r1, r4
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <Manual_Mode+0x17c>)
 800187a:	f7fe fe61 	bl	8000540 <__aeabi_dmul>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <Manual_Mode+0x180>)
 800188c:	f7fe ff82 	bl	8000794 <__aeabi_ddiv>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	4945      	ldr	r1, [pc, #276]	; (80019b4 <Manual_Mode+0x17c>)
 800189e:	f7fe ff79 	bl	8000794 <__aeabi_ddiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4618      	mov	r0, r3
 80018a8:	4621      	mov	r1, r4
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <Manual_Mode+0x184>)
 80018b0:	f7fe fc90 	bl	80001d4 <__adddf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4619      	mov	r1, r3
 80018ba:	4622      	mov	r2, r4
 80018bc:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <Manual_Mode+0x188>)
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	f7ff f84e 	bl	8000964 <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	62a3      	str	r3, [r4, #40]	; 0x28
				 for(i=0;i<=Dispense_Time;i++){
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <Manual_Mode+0x18c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
					 HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);// for motor rotation in clockwise direction
 80018d2:	2200      	movs	r2, #0
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	483c      	ldr	r0, [pc, #240]	; (80019c8 <Manual_Mode+0x190>)
 80018d8:	f000 fd0c 	bl	80022f4 <HAL_GPIO_WritePin>
				 for(i=0;i<=Dispense_Time;i++){
 80018dc:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <Manual_Mode+0x18c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <Manual_Mode+0x18c>)
 80018e6:	701a      	strb	r2, [r3, #0]
					 HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);// for motor rotation in clockwise direction
 80018e8:	e7f3      	b.n	80018d2 <Manual_Mode+0x9a>
				 	 }
			 }
	else if(!(HAL_GPIO_ReadPin (GPIOA,GPIO_PIN_6)))// checks for button pressed or not
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	4830      	ldr	r0, [pc, #192]	; (80019b0 <Manual_Mode+0x178>)
 80018ee:	f000 fce9 	bl	80022c4 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d14f      	bne.n	8001998 <Manual_Mode+0x160>
			{
			while((!(HAL_GPIO_ReadPin (GPIOA,GPIO_PIN_6)))); // wait for button to be released
 80018f8:	bf00      	nop
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	482c      	ldr	r0, [pc, #176]	; (80019b0 <Manual_Mode+0x178>)
 80018fe:	f000 fce1 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f8      	beq.n	80018fa <Manual_Mode+0xc2>
				htim4.Instance->PSC =(PRESCALER+1);
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	a125      	add	r1, pc, #148	; (adr r1, 80019a8 <Manual_Mode+0x170>)
 8001912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001916:	f7fe ff3d 	bl	8000794 <__aeabi_ddiv>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <Manual_Mode+0x17c>)
 8001928:	f7fe fe0a 	bl	8000540 <__aeabi_dmul>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4618      	mov	r0, r3
 8001932:	4621      	mov	r1, r4
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <Manual_Mode+0x180>)
 800193a:	f7fe ff2b 	bl	8000794 <__aeabi_ddiv>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	491a      	ldr	r1, [pc, #104]	; (80019b4 <Manual_Mode+0x17c>)
 800194c:	f7fe ff22 	bl	8000794 <__aeabi_ddiv>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <Manual_Mode+0x184>)
 800195e:	f7fe fc39 	bl	80001d4 <__adddf3>
 8001962:	4603      	mov	r3, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4619      	mov	r1, r3
 8001968:	4622      	mov	r2, r4
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <Manual_Mode+0x188>)
 800196c:	681c      	ldr	r4, [r3, #0]
 800196e:	4608      	mov	r0, r1
 8001970:	4611      	mov	r1, r2
 8001972:	f7fe fff7 	bl	8000964 <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	62a3      	str	r3, [r4, #40]	; 0x28
				for(i=0;i<=Dispense_Time;i++){
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <Manual_Mode+0x18c>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
				 HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);// for motor rotation in clockwise direction
 8001980:	2201      	movs	r2, #1
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <Manual_Mode+0x190>)
 8001986:	f000 fcb5 	bl	80022f4 <HAL_GPIO_WritePin>
				for(i=0;i<=Dispense_Time;i++){
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <Manual_Mode+0x18c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <Manual_Mode+0x18c>)
 8001994:	701a      	strb	r2, [r3, #0]
				 HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);// for motor rotation in clockwise direction
 8001996:	e7f3      	b.n	8001980 <Manual_Mode+0x148>
				}
			}
	else
		 {
			HAL_TIM_PWM_Stop_IT(&htim4,TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <Manual_Mode+0x188>)
 800199c:	f002 fe62 	bl	8004664 <HAL_TIM_PWM_Stop_IT>
		 }
	// Reverse rotation


}
 80019a0:	bf00      	nop
 80019a2:	bd98      	pop	{r3, r4, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	85a29dc9 	.word	0x85a29dc9
 80019ac:	3fd42033 	.word	0x3fd42033
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40b90000 	.word	0x40b90000
 80019b8:	404e0000 	.word	0x404e0000
 80019bc:	3ff00000 	.word	0x3ff00000
 80019c0:	20000434 	.word	0x20000434
 80019c4:	200004d4 	.word	0x200004d4
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_MspInit+0x4c>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23e0      	movs	r3, #224	; 0xe0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	f000 fa7d 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10d      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_TIM_Base_MspInit+0x40>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_TIM_Base_MspInit+0x40>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_TIM_Base_MspInit+0x40>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_MspPostInit+0x68>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11d      	bne.n	8001b4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_MspPostInit+0x6c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x6c>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_MspPostInit+0x6c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PUL_Pin;
 8001b2e:	2340      	movs	r3, #64	; 0x40
 8001b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PUL_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_TIM_MspPostInit+0x70>)
 8001b4a:	f000 fa21 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 f89a 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <OTG_FS_IRQHandler+0x10>)
 8001bbe:	f000 fd02 	bl	80025c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200019ac 	.word	0x200019ac

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c1a:	f7ff ffd7 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f006 ff43 	bl	8008aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7ff fc27 	bl	8001474 <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001c34:	080090a4 	.word	0x080090a4
  ldr r2, =_sbss
 8001c38:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001c3c:	20001db4 	.word	0x20001db4

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_Init+0x40>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_Init+0x40>)
 8001c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x40>)
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f94d 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff fea8 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f965 	bl	8001f76 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 f92d 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	200004d8 	.word	0x200004d8

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200004d8 	.word	0x200004d8

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffde 	bl	8001d10 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000000c 	.word	0x2000000c

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e16b      	b.n	8002284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 815a 	bne.w	800227e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b4 	beq.w	800227e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_GPIO_Init+0x308>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a5e      	ldr	r2, [pc, #376]	; (8002298 <HAL_GPIO_Init+0x308>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_GPIO_Init+0x308>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <HAL_GPIO_Init+0x310>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_GPIO_Init+0x314>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4f      	ldr	r2, [pc, #316]	; (80022a8 <HAL_GPIO_Init+0x318>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x31c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x320>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <HAL_GPIO_Init+0x324>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x328>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_GPIO_Init+0x32c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20a>
 8002196:	2307      	movs	r3, #7
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219a:	2308      	movs	r3, #8
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4934      	ldr	r1, [pc, #208]	; (800229c <HAL_GPIO_Init+0x30c>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_GPIO_Init+0x330>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_GPIO_Init+0x330>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_GPIO_Init+0x330>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_GPIO_Init+0x330>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae90 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3724      	adds	r7, #36	; 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002328:	b08f      	sub	sp, #60	; 0x3c
 800232a:	af0a      	add	r7, sp, #40	; 0x28
 800232c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e10f      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 f894 	bl	8008480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f841 	bl	80053fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	687e      	ldr	r6, [r7, #4]
 8002384:	466d      	mov	r5, sp
 8002386:	f106 0410 	add.w	r4, r6, #16
 800238a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002396:	e885 0003 	stmia.w	r5, {r0, r1}
 800239a:	1d33      	adds	r3, r6, #4
 800239c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f002 ff18 	bl	80051d4 <USB_CoreInit>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0d0      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 f82f 	bl	8005420 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e04a      	b.n	800245e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	333d      	adds	r3, #61	; 0x3d
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	333c      	adds	r3, #60	; 0x3c
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	b298      	uxth	r0, r3
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3342      	adds	r3, #66	; 0x42
 8002404:	4602      	mov	r2, r0
 8002406:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	333f      	adds	r3, #63	; 0x3f
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3344      	adds	r3, #68	; 0x44
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3348      	adds	r3, #72	; 0x48
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3350      	adds	r3, #80	; 0x50
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3af      	bcc.n	80023c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e044      	b.n	80024f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3b5      	bcc.n	800246e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	687e      	ldr	r6, [r7, #4]
 800250a:	466d      	mov	r5, sp
 800250c:	f106 0410 	add.w	r4, r6, #16
 8002510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	e894 0003 	ldmia.w	r4, {r0, r1}
 800251c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002520:	1d33      	adds	r3, r6, #4
 8002522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	f002 ffa5 	bl	8005474 <USB_DevInit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00d      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 ffed 	bl	8006530 <USB_DevDisconnect>

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002560 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_PCD_Start+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e020      	b.n	80025be <HAL_PCD_Start+0x5e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	2b01      	cmp	r3, #1
 800258a:	d109      	bne.n	80025a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002590:	2b01      	cmp	r3, #1
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 ff19 	bl	80053dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 ff9d 	bl	80064ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b08d      	sub	sp, #52	; 0x34
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 f85b 	bl	8006698 <USB_GetMode>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 839d 	bne.w	8002d24 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 ffbf 	bl	8006572 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8393 	beq.w	8002d22 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f003 ffb6 	bl	8006572 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d107      	bne.n	8002620 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f002 0202 	and.w	r2, r2, #2
 800261e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffa4 	bl	8006572 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b10      	cmp	r3, #16
 8002632:	d161      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0210 	bic.w	r2, r2, #16
 8002642:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 020f 	and.w	r2, r3, #15
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	3304      	adds	r3, #4
 8002662:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2b02      	cmp	r3, #2
 800266e:	d124      	bne.n	80026ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d035      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f003 fe0a 	bl	80062a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a0:	441a      	add	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b2:	441a      	add	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	e016      	b.n	80026e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	0c5b      	lsrs	r3, r3, #17
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d110      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026cc:	2208      	movs	r2, #8
 80026ce:	4619      	mov	r1, r3
 80026d0:	6a38      	ldr	r0, [r7, #32]
 80026d2:	f003 fde9 	bl	80062a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e2:	441a      	add	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0210 	orr.w	r2, r2, #16
 80026f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 ff38 	bl	8006572 <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002708:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800270c:	d16e      	bne.n	80027ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 ff3e 	bl	8006598 <USB_ReadDevAllOutEpInterrupt>
 800271c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800271e:	e062      	b.n	80027e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d057      	beq.n	80027da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f003 ff63 	bl	8006600 <USB_ReadDevOutEPInterrupt>
 800273a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	461a      	mov	r2, r3
 8002754:	2301      	movs	r3, #1
 8002756:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fdb0 	bl	80032c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002776:	461a      	mov	r2, r3
 8002778:	2308      	movs	r3, #8
 800277a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800277c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 feaa 	bl	80034d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279a:	461a      	mov	r2, r3
 800279c:	2310      	movs	r3, #16
 800279e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b6:	461a      	mov	r2, r3
 80027b8:	2320      	movs	r3, #32
 80027ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d199      	bne.n	8002720 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 febe 	bl	8006572 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002800:	f040 80c0 	bne.w	8002984 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fedf 	bl	80065cc <USB_ReadDevAllInEpInterrupt>
 800280e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002814:	e0b2      	b.n	800297c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a7 	beq.w	8002970 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f003 ff05 	bl	800663c <USB_ReadDevInEPInterrupt>
 8002832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d057      	beq.n	80028ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	2201      	movs	r2, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	69f9      	ldr	r1, [r7, #28]
 800285a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800285e:	4013      	ands	r3, r2
 8002860:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d132      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3348      	adds	r3, #72	; 0x48
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4403      	add	r3, r0
 800289c:	3344      	adds	r3, #68	; 0x44
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4419      	add	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4403      	add	r3, r0
 80028b0:	3348      	adds	r3, #72	; 0x48
 80028b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d113      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x31c>
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3350      	adds	r3, #80	; 0x50
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d108      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028da:	461a      	mov	r2, r3
 80028dc:	2101      	movs	r1, #1
 80028de:	f003 ff0d 	bl	80066fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fe4a 	bl	8008582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002904:	461a      	mov	r2, r3
 8002906:	2308      	movs	r3, #8
 8002908:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002920:	461a      	mov	r2, r3
 8002922:	2310      	movs	r3, #16
 8002924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293c:	461a      	mov	r2, r3
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002958:	461a      	mov	r2, r3
 800295a:	2302      	movs	r3, #2
 800295c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fc1b 	bl	80031a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3301      	adds	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f af49 	bne.w	8002816 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fdf2 	bl	8006572 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002998:	d122      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d108      	bne.n	80029ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029c0:	2100      	movs	r1, #0
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fe26 	bl	8003614 <HAL_PCDEx_LPM_Callback>
 80029c8:	e002      	b.n	80029d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f005 fe50 	bl	8008670 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fdc4 	bl	8006572 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f4:	d112      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f005 fe0c 	bl	8008624 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a1a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fda6 	bl	8006572 <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	f040 80c7 	bne.w	8002bc2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 fe74 	bl	800573c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	e056      	b.n	8002b08 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a66:	461a      	mov	r2, r3
 8002a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	0151      	lsls	r1, r2, #5
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	440a      	add	r2, r1
 8002a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a8c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9e:	0151      	lsls	r1, r2, #5
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	440a      	add	r2, r1
 8002aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002aac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aba:	461a      	mov	r2, r3
 8002abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ac0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad2:	0151      	lsls	r1, r2, #5
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002adc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ae0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af2:	0151      	lsls	r1, r2, #5
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	440a      	add	r2, r1
 8002af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002afc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	3301      	adds	r3, #1
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d3a3      	bcc.n	8002a5a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3e:	f043 030b 	orr.w	r3, r3, #11
 8002b42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b54:	f043 030b 	orr.w	r3, r3, #11
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	e015      	b.n	8002b88 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b82:	f043 030b 	orr.w	r3, r3, #11
 8002b86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bac:	461a      	mov	r2, r3
 8002bae:	f003 fda5 	bl	80066fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fcd3 	bl	8006572 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	d124      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fd69 	bl	80066b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fe09 	bl	80057fe <USB_GetDevSpeed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681c      	ldr	r4, [r3, #0]
 8002bf8:	f001 f928 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8002bfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	4620      	mov	r0, r4
 8002c08:	f002 fb46 	bl	8005298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f005 fce0 	bl	80085d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fca3 	bl	8006572 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d10a      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f005 fcbd 	bl	80085b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 0208 	and.w	r2, r2, #8
 8002c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fc8e 	bl	8006572 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c60:	d10f      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f005 fd1f 	bl	80086b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fc73 	bl	8006572 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c96:	d10f      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f005 fcf2 	bl	800868c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fc58 	bl	8006572 <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f005 fd00 	bl	80086d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fc42 	bl	8006572 <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d115      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f005 fcf0 	bl	80086f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e000      	b.n	8002d24 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d22:	bf00      	nop
    }
  }
}
 8002d24:	3734      	adds	r7, #52	; 0x34
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}

08002d2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PCD_SetAddress+0x1a>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e013      	b.n	8002d6c <HAL_PCD_SetAddress+0x42>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fba0 	bl	80064a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	70fb      	strb	r3, [r7, #3]
 8002d86:	460b      	mov	r3, r1
 8002d88:	803b      	strh	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0f      	bge.n	8002dba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3338      	adds	r3, #56	; 0x38
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
 8002db8:	e00f      	b.n	8002dda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002de6:	883a      	ldrh	r2, [r7, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	78ba      	ldrb	r2, [r7, #2]
 8002df0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e04:	78bb      	ldrb	r3, [r7, #2]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d102      	bne.n	8002e10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_PCD_EP_Open+0xaa>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e00e      	b.n	8002e3c <HAL_PCD_EP_Open+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fd0b 	bl	8005848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0f      	bge.n	8002e78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3338      	adds	r3, #56	; 0x38
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
 8002e76:	e00f      	b.n	8002e98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_PCD_EP_Close+0x6e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e00e      	b.n	8002ed0 <HAL_PCD_EP_Close+0x8c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fd49 	bl	8005958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d102      	bne.n	8002f34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f34:	7afb      	ldrb	r3, [r7, #11]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6979      	ldr	r1, [r7, #20]
 8002f4c:	f003 f824 	bl	8005f98 <USB_EP0StartXfer>
 8002f50:	e008      	b.n	8002f64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	f002 fdd6 	bl	8005b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f90:	681b      	ldr	r3, [r3, #0]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	460b      	mov	r3, r1
 8002fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	7afb      	ldrb	r3, [r7, #11]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6979      	ldr	r1, [r7, #20]
 8003010:	f002 ffc2 	bl	8005f98 <USB_EP0StartXfer>
 8003014:	e008      	b.n	8003028 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	f002 fd74 	bl	8005b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d901      	bls.n	8003050 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e050      	b.n	80030f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da0f      	bge.n	8003078 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3338      	adds	r3, #56	; 0x38
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	705a      	strb	r2, [r3, #1]
 8003076:	e00d      	b.n	8003094 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_SetStall+0x82>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e01e      	b.n	80030f2 <HAL_PCD_EP_SetStall+0xc0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 f919 	bl	80062fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030e2:	461a      	mov	r2, r3
 80030e4:	f003 fb0a 	bl	80066fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d901      	bls.n	8003118 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e042      	b.n	800319e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da0f      	bge.n	8003140 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3338      	adds	r3, #56	; 0x38
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
 800313e:	e00f      	b.n	8003160 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_PCD_EP_ClrStall+0x86>
 800317c:	2302      	movs	r3, #2
 800317e:	e00e      	b.n	800319e <HAL_PCD_EP_ClrStall+0xa4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f921 	bl	80063d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3338      	adds	r3, #56	; 0x38
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d901      	bls.n	80031de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06c      	b.n	80032b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d902      	bls.n	80031fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3303      	adds	r3, #3
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003202:	e02b      	b.n	800325c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	429a      	cmp	r2, r3
 8003218:	d902      	bls.n	8003220 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3303      	adds	r3, #3
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003238:	b2db      	uxtb	r3, r3
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4603      	mov	r3, r0
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f002 fffd 	bl	800623e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	441a      	add	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	b29b      	uxth	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	429a      	cmp	r2, r3
 8003270:	d809      	bhi.n	8003286 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800327a:	429a      	cmp	r2, r3
 800327c:	d203      	bcs.n	8003286 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1be      	bne.n	8003204 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	d811      	bhi.n	80032b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	2201      	movs	r2, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	6939      	ldr	r1, [r7, #16]
 80032ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032b2:	4013      	ands	r3, r2
 80032b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	333c      	adds	r3, #60	; 0x3c
 80032d8:	3304      	adds	r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 80a0 	bne.w	8003438 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d015      	beq.n	800332e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f240 80dd 	bls.w	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80d7 	beq.w	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	6093      	str	r3, [r2, #8]
 800332c:	e0cb      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	2320      	movs	r3, #32
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	e0bc      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 80b7 	bne.w	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d90f      	bls.n	8003380 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	e0a2      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003392:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	440b      	add	r3, r1
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4403      	add	r3, r0
 80033b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4419      	add	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4403      	add	r3, r0
 80033f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d114      	bne.n	800342a <PCD_EP_OutXfrComplete_int+0x16a>
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003422:	461a      	mov	r2, r3
 8003424:	2101      	movs	r1, #1
 8003426:	f003 f969 	bl	80066fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f005 f88b 	bl	800854c <HAL_PCD_DataOutStageCallback>
 8003436:	e046      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	e032      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	461a      	mov	r2, r3
 8003478:	2320      	movs	r3, #32
 800347a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f005 f862 	bl	800854c <HAL_PCD_DataOutStageCallback>
 8003488:	e01d      	b.n	80034c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d114      	bne.n	80034ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034b2:	461a      	mov	r2, r3
 80034b4:	2100      	movs	r1, #0
 80034b6:	f003 f921 	bl	80066fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f005 f843 	bl	800854c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	4f54300a 	.word	0x4f54300a
 80034d4:	4f54310a 	.word	0x4f54310a

080034d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	333c      	adds	r3, #60	; 0x3c
 80034f0:	3304      	adds	r3, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <PCD_EP_OutSetupPacket_int+0x88>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d90e      	bls.n	800352c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f004 fffb 	bl	8008528 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <PCD_EP_OutSetupPacket_int+0x88>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d90c      	bls.n	8003554 <PCD_EP_OutSetupPacket_int+0x7c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800354c:	461a      	mov	r2, r3
 800354e:	2101      	movs	r1, #1
 8003550:	f003 f8d4 	bl	80066fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	4f54300a 	.word	0x4f54300a

08003564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
 8003570:	4613      	mov	r3, r2
 8003572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003582:	883b      	ldrh	r3, [r7, #0]
 8003584:	0419      	lsls	r1, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	430a      	orrs	r2, r1
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
 8003590:	e028      	b.n	80035e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	4413      	add	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e00d      	b.n	80035c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	3340      	adds	r3, #64	; 0x40
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4413      	add	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	3301      	adds	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3ec      	bcc.n	80035a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035cc:	883b      	ldrh	r3, [r7, #0]
 80035ce:	0418      	lsls	r0, r3, #16
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4302      	orrs	r2, r0
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e264      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d075      	beq.n	8003736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364a:	4ba3      	ldr	r3, [pc, #652]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00c      	beq.n	8003670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4ba0      	ldr	r3, [pc, #640]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365e:	2b08      	cmp	r3, #8
 8003660:	d112      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b9d      	ldr	r3, [pc, #628]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b99      	ldr	r3, [pc, #612]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05b      	beq.n	8003734 <HAL_RCC_OscConfig+0x108>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d157      	bne.n	8003734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e23f      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x74>
 8003692:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a90      	ldr	r2, [pc, #576]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a8a      	ldr	r2, [pc, #552]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a87      	ldr	r2, [pc, #540]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036c4:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a83      	ldr	r2, [pc, #524]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a80      	ldr	r2, [pc, #512]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fb14 	bl	8001d10 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fb10 	bl	8001d10 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e204      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xc0>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fb00 	bl	8001d10 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fafc 	bl	8001d10 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1f0      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0xe8>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003756:	2b08      	cmp	r3, #8
 8003758:	d11c      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	4b5c      	ldr	r3, [pc, #368]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1c4      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b56      	ldr	r3, [pc, #344]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4952      	ldr	r1, [pc, #328]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e03a      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <HAL_RCC_OscConfig+0x2b0>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe fab5 	bl	8001d10 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fe fab1 	bl	8001d10 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1a5      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4940      	ldr	r1, [pc, #256]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_OscConfig+0x2b0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fa94 	bl	8001d10 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ec:	f7fe fa90 	bl	8001d10 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e184      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d030      	beq.n	8003878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_RCC_OscConfig+0x2b4>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe fa74 	bl	8001d10 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382c:	f7fe fa70 	bl	8001d10 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e164      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x200>
 800384a:	e015      	b.n	8003878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCC_OscConfig+0x2b4>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fe fa5d 	bl	8001d10 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385a:	f7fe fa59 	bl	8001d10 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e14d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a0 	beq.w	80039c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_OscConfig+0x2b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d121      	bne.n	8003906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCC_OscConfig+0x2b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_RCC_OscConfig+0x2b8>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fa1f 	bl	8001d10 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e011      	b.n	80038fa <HAL_RCC_OscConfig+0x2ce>
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	42470000 	.word	0x42470000
 80038e0:	42470e80 	.word	0x42470e80
 80038e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fe fa12 	bl	8001d10 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e106      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <HAL_RCC_OscConfig+0x4e4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x2f0>
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a80      	ldr	r2, [pc, #512]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x32a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x312>
 8003924:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a7a      	ldr	r2, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	4b78      	ldr	r3, [pc, #480]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a77      	ldr	r2, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x32a>
 800393e:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a74      	ldr	r2, [pc, #464]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe f9d7 	bl	8001d10 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe f9d3 	bl	8001d10 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0c5      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x33a>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe f9c1 	bl	8001d10 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fe f9bd 	bl	8001d10 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0af      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a55      	ldr	r2, [pc, #340]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 809b 	beq.w	8003b06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d05c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d141      	bne.n	8003a68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCC_OscConfig+0x4ec>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe f991 	bl	8001d10 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fe f98d 	bl	8001d10 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e081      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	019b      	lsls	r3, r3, #6
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	4937      	ldr	r1, [pc, #220]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCC_OscConfig+0x4ec>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe f966 	bl	8001d10 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe f962 	bl	8001d10 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e056      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x41c>
 8003a66:	e04e      	b.n	8003b06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_OscConfig+0x4ec>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe f94f 	bl	8001d10 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fe f94b 	bl	8001d10 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e03f      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x44a>
 8003a94:	e037      	b.n	8003b06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e032      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_RCC_OscConfig+0x4e8>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d028      	beq.n	8003b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d121      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d11a      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d111      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	3b01      	subs	r3, #1
 8003aec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40007000 	.word	0x40007000
 8003b14:	40023800 	.word	0x40023800
 8003b18:	42470060 	.word	0x42470060

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0cc      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d90c      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d044      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d119      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e067      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4934      	ldr	r1, [pc, #208]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7fe f880 	bl	8001d10 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fe f87c 	bl	8001d10 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e04f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 020c 	and.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1eb      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d20c      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd ffe0 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023c00 	.word	0x40023c00
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08009084 	.word	0x08009084
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	20000008 	.word	0x20000008

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d007      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x32>
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x38>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 808d 	bne.w	8003e2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d16:	60bb      	str	r3, [r7, #8]
       break;
 8003d18:	e08c      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1a:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d1c:	60bb      	str	r3, [r7, #8]
      break;
 8003d1e:	e089      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d20:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	f04f 0400 	mov.w	r4, #0
 8003d40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	ea03 0501 	and.w	r5, r3, r1
 8003d4c:	ea04 0602 	and.w	r6, r4, r2
 8003d50:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d52:	fb02 f106 	mul.w	r1, r2, r6
 8003d56:	2200      	movs	r2, #0
 8003d58:	fb02 f205 	mul.w	r2, r2, r5
 8003d5c:	440a      	add	r2, r1
 8003d5e:	493a      	ldr	r1, [pc, #232]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d60:	fba5 0101 	umull	r0, r1, r5, r1
 8003d64:	1853      	adds	r3, r2, r1
 8003d66:	4619      	mov	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	f7fc fe17 	bl	80009a4 <__aeabi_uldivmod>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e049      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	f04f 0400 	mov.w	r4, #0
 8003d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	ea03 0501 	and.w	r5, r3, r1
 8003d94:	ea04 0602 	and.w	r6, r4, r2
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	f04f 0400 	mov.w	r4, #0
 8003da4:	0154      	lsls	r4, r2, #5
 8003da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003daa:	014b      	lsls	r3, r1, #5
 8003dac:	4619      	mov	r1, r3
 8003dae:	4622      	mov	r2, r4
 8003db0:	1b49      	subs	r1, r1, r5
 8003db2:	eb62 0206 	sbc.w	r2, r2, r6
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	f04f 0400 	mov.w	r4, #0
 8003dbe:	0194      	lsls	r4, r2, #6
 8003dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dc4:	018b      	lsls	r3, r1, #6
 8003dc6:	1a5b      	subs	r3, r3, r1
 8003dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	00e2      	lsls	r2, r4, #3
 8003dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4614      	mov	r4, r2
 8003de0:	195b      	adds	r3, r3, r5
 8003de2:	eb44 0406 	adc.w	r4, r4, r6
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	02a2      	lsls	r2, r4, #10
 8003df0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003df4:	0299      	lsls	r1, r3, #10
 8003df6:	460b      	mov	r3, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	f7fc fdcc 	bl	80009a4 <__aeabi_uldivmod>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	60bb      	str	r3, [r7, #8]
      break;
 8003e2c:	e002      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e30:	60bb      	str	r3, [r7, #8]
      break;
 8003e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e34:	68bb      	ldr	r3, [r7, #8]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	017d7840 	.word	0x017d7840

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07b      	b.n	8003f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e86:	d009      	beq.n	8003e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]
 8003e8e:	e005      	b.n	8003e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd fdb0 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0104 	and.w	r1, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0210 	and.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Transmit+0x22>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e126      	b.n	80041e6 <HAL_SPI_Transmit+0x270>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa0:	f7fd feb6 	bl	8001d10 <HAL_GetTick>
 8003fa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fba:	e10b      	b.n	80041d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0x52>
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fcc:	e102      	b.n	80041d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d10f      	bne.n	8004036 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d14b      	bne.n	80040f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0xf6>
 8004066:	8afb      	ldrh	r3, [r7, #22]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d13e      	bne.n	80040ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004090:	e02b      	b.n	80040ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d112      	bne.n	80040c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80040c4:	e011      	b.n	80040ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c6:	f7fd fe23 	bl	8001d10 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d803      	bhi.n	80040de <HAL_SPI_Transmit+0x168>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Transmit+0x16e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040e8:	e074      	b.n	80041d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ce      	bne.n	8004092 <HAL_SPI_Transmit+0x11c>
 80040f4:	e04c      	b.n	8004190 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_Transmit+0x18e>
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d140      	bne.n	8004186 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800412a:	e02c      	b.n	8004186 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d113      	bne.n	8004162 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004160:	e011      	b.n	8004186 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004162:	f7fd fdd5 	bl	8001d10 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d803      	bhi.n	800417a <HAL_SPI_Transmit+0x204>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d102      	bne.n	8004180 <HAL_SPI_Transmit+0x20a>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004184:	e026      	b.n	80041d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1cd      	bne.n	800412c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f8b3 	bl	8004300 <SPI_EndRxTxTransaction>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e000      	b.n	80041d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004200:	f7fd fd86 	bl	8001d10 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004210:	f7fd fd7e 	bl	8001d10 <HAL_GetTick>
 8004214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	015b      	lsls	r3, r3, #5
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	e054      	b.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d050      	beq.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004230:	f7fd fd6e 	bl	8001d10 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	429a      	cmp	r2, r3
 800423e:	d902      	bls.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d111      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d004      	beq.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d107      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d10f      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e017      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d19b      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000004 	.word	0x20000004

08004300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <SPI_EndRxTxTransaction+0x7c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <SPI_EndRxTxTransaction+0x80>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0d5b      	lsrs	r3, r3, #21
 8004318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d112      	bne.n	8004352 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff5a 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00f      	b.n	8004372 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d0f2      	beq.n	8004352 <SPI_EndRxTxTransaction+0x52>
 800436c:	e000      	b.n	8004370 <SPI_EndRxTxTransaction+0x70>
        break;
 800436e:	bf00      	nop
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000004 	.word	0x20000004
 8004380:	165e9f81 	.word	0x165e9f81

08004384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e041      	b.n	800441a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fb7e 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f000 fb7a 	bl	8004abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e041      	b.n	80044b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f839 	bl	80044c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fb2b 	bl	8004abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_TIM_PWM_Start+0x24>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e022      	b.n	800453e <HAL_TIM_PWM_Start+0x6a>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d109      	bne.n	8004512 <HAL_TIM_PWM_Start+0x3e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e015      	b.n	800453e <HAL_TIM_PWM_Start+0x6a>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d109      	bne.n	800452c <HAL_TIM_PWM_Start+0x58>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e008      	b.n	800453e <HAL_TIM_PWM_Start+0x6a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07c      	b.n	8004640 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0x82>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	e013      	b.n	800457e <HAL_TIM_PWM_Start+0xaa>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start+0x92>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004564:	e00b      	b.n	800457e <HAL_TIM_PWM_Start+0xaa>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d104      	bne.n	8004576 <HAL_TIM_PWM_Start+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004574:	e003      	b.n	800457e <HAL_TIM_PWM_Start+0xaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2201      	movs	r2, #1
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fd82 	bl	8005090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2d      	ldr	r2, [pc, #180]	; (8004648 <HAL_TIM_PWM_Start+0x174>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_PWM_Start+0xcc>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2c      	ldr	r2, [pc, #176]	; (800464c <HAL_TIM_PWM_Start+0x178>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_PWM_Start+0xd0>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_TIM_PWM_Start+0xd2>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <HAL_TIM_PWM_Start+0x174>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d01d      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <HAL_TIM_PWM_Start+0x17c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_TIM_PWM_Start+0x180>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <HAL_TIM_PWM_Start+0x184>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_TIM_PWM_Start+0x178>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_TIM_PWM_Start+0x188>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_TIM_PWM_Start+0x136>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_PWM_Start+0x18c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d010      	beq.n	800463e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e007      	b.n	800463e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40010000 	.word	0x40010000
 800464c:	40010400 	.word	0x40010400
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40014000 	.word	0x40014000
 8004660:	40001800 	.word	0x40001800

08004664 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d841      	bhi.n	80046f8 <HAL_TIM_PWM_Stop_IT+0x94>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_TIM_PWM_Stop_IT+0x18>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046f9 	.word	0x080046f9
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f9 	.word	0x080046f9
 800468c:	080046c3 	.word	0x080046c3
 8004690:	080046f9 	.word	0x080046f9
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046f9 	.word	0x080046f9
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046e7 	.word	0x080046e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0202 	bic.w	r2, r2, #2
 80046be:	60da      	str	r2, [r3, #12]
      break;
 80046c0:	e01b      	b.n	80046fa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0204 	bic.w	r2, r2, #4
 80046d0:	60da      	str	r2, [r3, #12]
      break;
 80046d2:	e012      	b.n	80046fa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0208 	bic.w	r2, r2, #8
 80046e2:	60da      	str	r2, [r3, #12]
      break;
 80046e4:	e009      	b.n	80046fa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0210 	bic.w	r2, r2, #16
 80046f4:	60da      	str	r2, [r3, #12]
      break;
 80046f6:	e000      	b.n	80046fa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80046f8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fcc4 	bl	8005090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_TIM_PWM_Stop_IT+0x164>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_PWM_Stop_IT+0xb8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <HAL_TIM_PWM_Stop_IT+0x168>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_TIM_PWM_Stop_IT+0xbc>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_TIM_PWM_Stop_IT+0xbe>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a1a      	ldr	r2, [r3, #32]
 800472c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_TIM_PWM_Stop_IT+0xf2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	f240 4344 	movw	r3, #1092	; 0x444
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <HAL_TIM_PWM_Stop_IT+0xf2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10f      	bne.n	8004786 <HAL_TIM_PWM_Stop_IT+0x122>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	f240 4344 	movw	r3, #1092	; 0x444
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_TIM_PWM_Stop_IT+0x122>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Stop_IT+0x132>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	e013      	b.n	80047be <HAL_TIM_PWM_Stop_IT+0x15a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Stop_IT+0x142>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	e00b      	b.n	80047be <HAL_TIM_PWM_Stop_IT+0x15a>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Stop_IT+0x152>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	e003      	b.n	80047be <HAL_TIM_PWM_Stop_IT+0x15a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0ac      	b.n	8004944 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	f200 809f 	bhi.w	8004938 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004835 	.word	0x08004835
 8004804:	08004939 	.word	0x08004939
 8004808:	08004939 	.word	0x08004939
 800480c:	08004939 	.word	0x08004939
 8004810:	08004875 	.word	0x08004875
 8004814:	08004939 	.word	0x08004939
 8004818:	08004939 	.word	0x08004939
 800481c:	08004939 	.word	0x08004939
 8004820:	080048b7 	.word	0x080048b7
 8004824:	08004939 	.word	0x08004939
 8004828:	08004939 	.word	0x08004939
 800482c:	08004939 	.word	0x08004939
 8004830:	080048f7 	.word	0x080048f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f9de 	bl	8004bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0208 	orr.w	r2, r2, #8
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
      break;
 8004872:	e062      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fa2e 	bl	8004cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
      break;
 80048b4:	e041      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fa83 	bl	8004dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0204 	bic.w	r2, r2, #4
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	61da      	str	r2, [r3, #28]
      break;
 80048f4:	e021      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fad7 	bl	8004eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
      break;
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e0a6      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x166>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d067      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0x120>
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d80b      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x6c>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d073      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x140>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d802      	bhi.n	80049ae <HAL_TIM_ConfigClockSource+0x62>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d06f      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049ac:	e078      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d06c      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x140>
 80049b2:	2b30      	cmp	r3, #48	; 0x30
 80049b4:	d06a      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049b6:	e073      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049b8:	2b70      	cmp	r3, #112	; 0x70
 80049ba:	d00d      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x8c>
 80049bc:	2b70      	cmp	r3, #112	; 0x70
 80049be:	d804      	bhi.n	80049ca <HAL_TIM_ConfigClockSource+0x7e>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d033      	beq.n	8004a2c <HAL_TIM_ConfigClockSource+0xe0>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d041      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049c8:	e06a      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d066      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x152>
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d017      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049d6:	e063      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f000 fb32 	bl	8005050 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
      break;
 8004a04:	e04c      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f000 fb1b 	bl	8005050 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a28:	609a      	str	r2, [r3, #8]
      break;
 8004a2a:	e039      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f000 fa8f 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2150      	movs	r1, #80	; 0x50
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fae8 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004a4a:	e029      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f000 faae 	bl	8004fba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2160      	movs	r1, #96	; 0x60
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fad8 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e019      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f000 fa6f 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2140      	movs	r1, #64	; 0x40
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fac8 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e009      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fabf 	bl	800501a <TIM_ITRx_SetConfig>
        break;
 8004a9c:	e000      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d00f      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3d      	ldr	r2, [pc, #244]	; (8004bd4 <TIM_Base_SetConfig+0x118>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <TIM_Base_SetConfig+0x11c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <TIM_Base_SetConfig+0x120>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d02b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d027      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <TIM_Base_SetConfig+0x118>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d023      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <TIM_Base_SetConfig+0x11c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01f      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <TIM_Base_SetConfig+0x120>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d017      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_Base_SetConfig+0x128>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <TIM_Base_SetConfig+0x12c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a26      	ldr	r2, [pc, #152]	; (8004bec <TIM_Base_SetConfig+0x130>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <TIM_Base_SetConfig+0x134>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <TIM_Base_SetConfig+0x138>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <TIM_Base_SetConfig+0x13c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0xf8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800
 8004bf0:	40001800 	.word	0x40001800
 8004bf4:	40001c00 	.word	0x40001c00
 8004bf8:	40002000 	.word	0x40002000

08004bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0201 	bic.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 0302 	bic.w	r3, r3, #2
 8004c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <TIM_OC1_SetConfig+0xd8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC1_SetConfig+0x64>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <TIM_OC1_SetConfig+0xdc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10c      	bne.n	8004c7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0308 	bic.w	r3, r3, #8
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC1_SetConfig+0xd8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC1_SetConfig+0x8e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <TIM_OC1_SetConfig+0xdc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	621a      	str	r2, [r3, #32]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400

08004cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0210 	bic.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <TIM_OC2_SetConfig+0xe4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_OC2_SetConfig+0x68>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <TIM_OC2_SetConfig+0xe8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10d      	bne.n	8004d60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <TIM_OC2_SetConfig+0xe4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_OC2_SetConfig+0x94>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <TIM_OC2_SetConfig+0xe8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d113      	bne.n	8004d98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <TIM_OC3_SetConfig+0xe0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_OC3_SetConfig+0x66>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a20      	ldr	r2, [pc, #128]	; (8004eac <TIM_OC3_SetConfig+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10d      	bne.n	8004e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <TIM_OC3_SetConfig+0xe0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC3_SetConfig+0x92>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <TIM_OC3_SetConfig+0xe4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d113      	bne.n	8004e82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	621a      	str	r2, [r3, #32]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40010400 	.word	0x40010400

08004eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	031b      	lsls	r3, r3, #12
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <TIM_OC4_SetConfig+0xa4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC4_SetConfig+0x68>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <TIM_OC4_SetConfig+0xa8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 030a 	bic.w	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0210 	bic.w	r2, r3, #16
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	f043 0307 	orr.w	r3, r3, #7
 800503c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	431a      	orrs	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2201      	movs	r2, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e05a      	b.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d022      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005140:	d01d      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d018      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10c      	bne.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40001800 	.word	0x40001800

080051d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d4:	b084      	sub	sp, #16
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	f107 001c 	add.w	r0, r7, #28
 80051e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d122      	bne.n	8005232 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 fac6 	bl	80067b8 <USB_CoreReset>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e01a      	b.n	8005268 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 faba 	bl	80067b8 <USB_CoreReset>
 8005244:	4603      	mov	r3, r0
 8005246:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
 800525a:	e005      	b.n	8005268 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10b      	bne.n	8005286 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f043 0206 	orr.w	r2, r3, #6
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005286:	7bfb      	ldrb	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005292:	b004      	add	sp, #16
 8005294:	4770      	bx	lr
	...

08005298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d165      	bne.n	8005378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <USB_SetTurnaroundTime+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d906      	bls.n	80052c2 <USB_SetTurnaroundTime+0x2a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <USB_SetTurnaroundTime+0x120>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d802      	bhi.n	80052c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052bc:	230f      	movs	r3, #15
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e062      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	; (80053b8 <USB_SetTurnaroundTime+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d906      	bls.n	80052d8 <USB_SetTurnaroundTime+0x40>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a3b      	ldr	r2, [pc, #236]	; (80053bc <USB_SetTurnaroundTime+0x124>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d802      	bhi.n	80052d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052d2:	230e      	movs	r3, #14
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e057      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a38      	ldr	r2, [pc, #224]	; (80053bc <USB_SetTurnaroundTime+0x124>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d906      	bls.n	80052ee <USB_SetTurnaroundTime+0x56>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a37      	ldr	r2, [pc, #220]	; (80053c0 <USB_SetTurnaroundTime+0x128>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d802      	bhi.n	80052ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052e8:	230d      	movs	r3, #13
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e04c      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a33      	ldr	r2, [pc, #204]	; (80053c0 <USB_SetTurnaroundTime+0x128>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d906      	bls.n	8005304 <USB_SetTurnaroundTime+0x6c>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <USB_SetTurnaroundTime+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d802      	bhi.n	8005304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052fe:	230c      	movs	r3, #12
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e041      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <USB_SetTurnaroundTime+0x12c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d906      	bls.n	800531a <USB_SetTurnaroundTime+0x82>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a2e      	ldr	r2, [pc, #184]	; (80053c8 <USB_SetTurnaroundTime+0x130>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d802      	bhi.n	800531a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005314:	230b      	movs	r3, #11
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e036      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <USB_SetTurnaroundTime+0x130>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d906      	bls.n	8005330 <USB_SetTurnaroundTime+0x98>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <USB_SetTurnaroundTime+0x134>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d802      	bhi.n	8005330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800532a:	230a      	movs	r3, #10
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e02b      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a26      	ldr	r2, [pc, #152]	; (80053cc <USB_SetTurnaroundTime+0x134>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d906      	bls.n	8005346 <USB_SetTurnaroundTime+0xae>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <USB_SetTurnaroundTime+0x138>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d802      	bhi.n	8005346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005340:	2309      	movs	r3, #9
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e020      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <USB_SetTurnaroundTime+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d906      	bls.n	800535c <USB_SetTurnaroundTime+0xc4>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <USB_SetTurnaroundTime+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d802      	bhi.n	800535c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005356:	2308      	movs	r3, #8
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e015      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <USB_SetTurnaroundTime+0x13c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d906      	bls.n	8005372 <USB_SetTurnaroundTime+0xda>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <USB_SetTurnaroundTime+0x140>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d802      	bhi.n	8005372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800536c:	2307      	movs	r3, #7
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e00a      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005372:	2306      	movs	r3, #6
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e007      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800537e:	2309      	movs	r3, #9
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e001      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005384:	2309      	movs	r3, #9
 8005386:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	029b      	lsls	r3, r3, #10
 800539c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	00d8acbf 	.word	0x00d8acbf
 80053b8:	00e4e1bf 	.word	0x00e4e1bf
 80053bc:	00f423ff 	.word	0x00f423ff
 80053c0:	0106737f 	.word	0x0106737f
 80053c4:	011a499f 	.word	0x011a499f
 80053c8:	01312cff 	.word	0x01312cff
 80053cc:	014ca43f 	.word	0x014ca43f
 80053d0:	016e35ff 	.word	0x016e35ff
 80053d4:	01a6ab1f 	.word	0x01a6ab1f
 80053d8:	01e847ff 	.word	0x01e847ff

080053dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d106      	bne.n	800544c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e00b      	b.n	8005464 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e001      	b.n	8005464 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e003      	b.n	800546c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005464:	2032      	movs	r0, #50	; 0x32
 8005466:	f7fc fc5f 	bl	8001d28 <HAL_Delay>

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005474:	b084      	sub	sp, #16
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e009      	b.n	80054a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3340      	adds	r3, #64	; 0x40
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b0e      	cmp	r3, #14
 80054ac:	d9f2      	bls.n	8005494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11c      	bne.n	80054ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
 80054ec:	e00b      	b.n	8005506 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	4619      	mov	r1, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	461a      	mov	r2, r3
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10c      	bne.n	8005546 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005532:	2100      	movs	r1, #0
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f949 	bl	80057cc <USB_SetDevSpeed>
 800553a:	e008      	b.n	800554e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800553c:	2101      	movs	r1, #1
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f944 	bl	80057cc <USB_SetDevSpeed>
 8005544:	e003      	b.n	800554e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005546:	2103      	movs	r1, #3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f93f 	bl	80057cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800554e:	2110      	movs	r1, #16
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8f3 	bl	800573c <USB_FlushTxFifo>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f911 	bl	8005788 <USB_FlushRxFifo>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e043      	b.n	8005622 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b0:	d118      	bne.n	80055e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e013      	b.n	80055f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e008      	b.n	80055f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800561a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3b7      	bcc.n	800559a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e043      	b.n	80056b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005646:	d118      	bne.n	800567a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e013      	b.n	800568c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e008      	b.n	800568c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3b7      	bcc.n	8005630 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <USB_DevInit+0x2c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005734:	b004      	add	sp, #16
 8005736:	4770      	bx	lr
 8005738:	803c3800 	.word	0x803c3800

0800573c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <USB_FlushTxFifo+0x48>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b20      	cmp	r3, #32
 8005772:	d0f0      	beq.n	8005756 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	00030d40 	.word	0x00030d40

08005788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2210      	movs	r2, #16
 8005798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <USB_FlushRxFifo+0x40>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d0f0      	beq.n	800579a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	00030d40 	.word	0x00030d40

080057cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0306 	and.w	r3, r3, #6
 8005816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
 8005822:	e00a      	b.n	800583a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d002      	beq.n	8005830 <USB_GetDevSpeed+0x32>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d102      	bne.n	8005836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005830:	2302      	movs	r3, #2
 8005832:	75fb      	strb	r3, [r7, #23]
 8005834:	e001      	b.n	800583a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005836:	230f      	movs	r3, #15
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d13a      	bne.n	80058da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005882:	4313      	orrs	r3, r2
 8005884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d155      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	78db      	ldrb	r3, [r3, #3]
 80058b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c0:	4313      	orrs	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e036      	b.n	8005948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11a      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800592e:	430b      	orrs	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d161      	bne.n	8005a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	d11f      	bne.n	80059cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f303 	lsl.w	r3, r1, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4013      	ands	r3, r2
 80059ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4013      	ands	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0159      	lsls	r1, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	440b      	add	r3, r1
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <USB_DeactivateEndpoint+0x1b0>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
 8005a36:	e060      	b.n	8005afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4e:	d11f      	bne.n	8005a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	43db      	mvns	r3, r3
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0159      	lsls	r1, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	4619      	mov	r1, r3
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <USB_DeactivateEndpoint+0x1b4>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	ec337800 	.word	0xec337800
 8005b0c:	eff37800 	.word	0xeff37800

08005b10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	f040 815c 	bne.w	8005dea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d132      	bne.n	8005ba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	0cdb      	lsrs	r3, r3, #19
 8005b9a:	04db      	lsls	r3, r3, #19
 8005b9c:	6113      	str	r3, [r2, #16]
 8005b9e:	e074      	b.n	8005c8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	0cdb      	lsrs	r3, r3, #19
 8005bbc:	04db      	lsls	r3, r3, #19
 8005bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	1e59      	subs	r1, r3, #1
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c06:	04d9      	lsls	r1, r3, #19
 8005c08:	4b9d      	ldr	r3, [pc, #628]	; (8005e80 <USB_EPStartXfer+0x370>)
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c32:	69b9      	ldr	r1, [r7, #24]
 8005c34:	0148      	lsls	r0, r1, #5
 8005c36:	69f9      	ldr	r1, [r7, #28]
 8005c38:	4401      	add	r1, r0
 8005c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11f      	bne.n	8005c8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d14b      	bne.n	8005d28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d128      	bne.n	8005d06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d110      	bne.n	8005ce6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	e00f      	b.n	8005d06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e12f      	b.n	8005f88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d015      	beq.n	8005d7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8117 	beq.w	8005f88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d76:	4313      	orrs	r3, r2
 8005d78:	634b      	str	r3, [r1, #52]	; 0x34
 8005d7a:	e105      	b.n	8005f88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d110      	bne.n	8005dae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e00f      	b.n	8005dce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781a      	ldrb	r2, [r3, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	b298      	uxth	r0, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa2b 	bl	800623e <USB_WritePacket>
 8005de8:	e0ce      	b.n	8005f88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	0cdb      	lsrs	r3, r3, #19
 8005e06:	04db      	lsls	r3, r3, #19
 8005e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d126      	bne.n	8005e84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4c:	69b9      	ldr	r1, [r7, #24]
 8005e4e:	0148      	lsls	r0, r1, #5
 8005e50:	69f9      	ldr	r1, [r7, #28]
 8005e52:	4401      	add	r1, r0
 8005e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e7a:	6113      	str	r3, [r2, #16]
 8005e7c:	e036      	b.n	8005eec <USB_EPStartXfer+0x3dc>
 8005e7e:	bf00      	nop
 8005e80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	04d9      	lsls	r1, r3, #19
 8005eac:	4b39      	ldr	r3, [pc, #228]	; (8005f94 <USB_EPStartXfer+0x484>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	0148      	lsls	r0, r1, #5
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	4401      	add	r1, r0
 8005eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	8af9      	ldrh	r1, [r7, #22]
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10d      	bne.n	8005f0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68d9      	ldr	r1, [r3, #12]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d128      	bne.n	8005f68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d110      	bne.n	8005f48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00f      	b.n	8005f68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	1ff80000 	.word	0x1ff80000

08005f98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f040 80cd 	bne.w	8006154 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d132      	bne.n	8006028 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	0cdb      	lsrs	r3, r3, #19
 8006022:	04db      	lsls	r3, r3, #19
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	e04e      	b.n	80060c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006042:	0cdb      	lsrs	r3, r3, #19
 8006044:	04db      	lsls	r3, r3, #19
 8006046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800606a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d903      	bls.n	8006080 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b6:	6939      	ldr	r1, [r7, #16]
 80060b8:	0148      	lsls	r0, r1, #5
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	4401      	add	r1, r0
 80060be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11e      	bne.n	800610a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e092      	b.n	8006230 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006128:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d07e      	beq.n	8006230 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614e:	4313      	orrs	r3, r2
 8006150:	634b      	str	r3, [r1, #52]	; 0x34
 8006152:	e06d      	b.n	8006230 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616e:	0cdb      	lsrs	r3, r3, #19
 8006170:	04db      	lsls	r3, r3, #19
 8006172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006192:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006196:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061de:	6939      	ldr	r1, [r7, #16]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d10d      	bne.n	8006210 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	68d9      	ldr	r1, [r3, #12]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	460a      	mov	r2, r1
 800620e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800622e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800623e:	b480      	push	{r7}
 8006240:	b089      	sub	sp, #36	; 0x24
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4611      	mov	r1, r2
 800624a:	461a      	mov	r2, r3
 800624c:	460b      	mov	r3, r1
 800624e:	71fb      	strb	r3, [r7, #7]
 8006250:	4613      	mov	r3, r2
 8006252:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800625c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11a      	bne.n	800629a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006264:	88bb      	ldrh	r3, [r7, #4]
 8006266:	3303      	adds	r3, #3
 8006268:	089b      	lsrs	r3, r3, #2
 800626a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	e00f      	b.n	8006292 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	031a      	lsls	r2, r3, #12
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627e:	461a      	mov	r2, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3304      	adds	r3, #4
 800628a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3eb      	bcc.n	8006272 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3724      	adds	r7, #36	; 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b089      	sub	sp, #36	; 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	3303      	adds	r3, #3
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e00b      	b.n	80062e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3304      	adds	r3, #4
 80062dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3ef      	bcc.n	80062cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062ec:	69fb      	ldr	r3, [r7, #28]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3724      	adds	r7, #36	; 0x24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d12c      	bne.n	8006370 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	db12      	blt.n	800634e <USB_EPSetStall+0x54>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800634c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e02b      	b.n	80063c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	db12      	blt.n	80063a8 <USB_EPSetStall+0xae>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00f      	beq.n	80063a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d128      	bne.n	8006444 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d003      	beq.n	8006422 <USB_EPClearStall+0x4c>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d138      	bne.n	8006494 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e027      	b.n	8006494 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006462:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d003      	beq.n	8006474 <USB_EPClearStall+0x9e>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10f      	bne.n	8006494 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006508:	f023 0303 	bic.w	r3, r3, #3
 800650c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651c:	f023 0302 	bic.w	r3, r3, #2
 8006520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4013      	ands	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	0c1b      	lsrs	r3, r3, #16
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4013      	ands	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	b29b      	uxth	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800662e:	68bb      	ldr	r3, [r7, #8]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	b2db      	uxtb	r3, r3
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800668a:	68bb      	ldr	r3, [r7, #8]
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0301 	and.w	r3, r3, #1
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066d2:	f023 0307 	bic.w	r3, r3, #7
 80066d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	460b      	mov	r3, r1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	333c      	adds	r3, #60	; 0x3c
 8006712:	3304      	adds	r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <USB_EP0_OutStart+0xb8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d90a      	bls.n	8006736 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006730:	d101      	bne.n	8006736 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e037      	b.n	80067a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	461a      	mov	r2, r3
 800673e:	2300      	movs	r3, #0
 8006740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006764:	f043 0318 	orr.w	r3, r3, #24
 8006768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006778:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800677c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10f      	bne.n	80067a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	4f54300a 	.word	0x4f54300a

080067b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a13      	ldr	r2, [pc, #76]	; (800681c <USB_CoreReset+0x64>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e01b      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	daf2      	bge.n	80067c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <USB_CoreReset+0x64>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d0f0      	beq.n	80067ee <USB_CoreReset+0x36>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	00030d40 	.word	0x00030d40

08006820 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800682c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006830:	f002 f8f6 	bl	8008a20 <USBD_static_malloc>
 8006834:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006844:	2302      	movs	r3, #2
 8006846:	e066      	b.n	8006916 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7c1b      	ldrb	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d119      	bne.n	800688c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800685c:	2202      	movs	r2, #2
 800685e:	2181      	movs	r1, #129	; 0x81
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 ffba 	bl	80087da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800686c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006870:	2202      	movs	r2, #2
 8006872:	2101      	movs	r1, #1
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 ffb0 	bl	80087da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2210      	movs	r2, #16
 8006886:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800688a:	e016      	b.n	80068ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	2202      	movs	r2, #2
 8006890:	2181      	movs	r1, #129	; 0x81
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 ffa1 	bl	80087da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	2202      	movs	r2, #2
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 ff98 	bl	80087da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2210      	movs	r2, #16
 80068b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068ba:	2308      	movs	r3, #8
 80068bc:	2203      	movs	r2, #3
 80068be:	2182      	movs	r1, #130	; 0x82
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 ff8a 	bl	80087da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7c1b      	ldrb	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068fa:	2101      	movs	r1, #1
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 f85b 	bl	80089b8 <USBD_LL_PrepareReceive>
 8006902:	e007      	b.n	8006914 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	2101      	movs	r1, #1
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f002 f852 	bl	80089b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800692a:	2181      	movs	r1, #129	; 0x81
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 ff7a 	bl	8008826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 ff73 	bl	8008826 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006948:	2182      	movs	r1, #130	; 0x82
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 ff6b 	bl	8008826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697a:	4618      	mov	r0, r3
 800697c:	f002 f85e 	bl	8008a3c <USBD_static_free>
    pdev->pClassData = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0af      	b.n	8006b1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d03f      	beq.n	8006a48 <USBD_CDC_Setup+0xb4>
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	f040 809f 	bne.w	8006b0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	88db      	ldrh	r3, [r3, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02e      	beq.n	8006a34 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	da16      	bge.n	8006a0e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80069ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	88d2      	ldrh	r2, [r2, #6]
 80069f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	88db      	ldrh	r3, [r3, #6]
 80069f8:	2b07      	cmp	r3, #7
 80069fa:	bf28      	it	cs
 80069fc:	2307      	movcs	r3, #7
 80069fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	89fa      	ldrh	r2, [r7, #14]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fadc 	bl	8007fc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a0c:	e085      	b.n	8006b1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	785a      	ldrb	r2, [r3, #1]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a24:	6939      	ldr	r1, [r7, #16]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88db      	ldrh	r3, [r3, #6]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 faf5 	bl	800801c <USBD_CtlPrepareRx>
      break;
 8006a32:	e072      	b.n	8006b1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	7850      	ldrb	r0, [r2, #1]
 8006a40:	2200      	movs	r2, #0
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	4798      	blx	r3
      break;
 8006a46:	e068      	b.n	8006b1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b0b      	cmp	r3, #11
 8006a4e:	d852      	bhi.n	8006af6 <USBD_CDC_Setup+0x162>
 8006a50:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <USBD_CDC_Setup+0xc4>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a89 	.word	0x08006a89
 8006a5c:	08006b05 	.word	0x08006b05
 8006a60:	08006af7 	.word	0x08006af7
 8006a64:	08006af7 	.word	0x08006af7
 8006a68:	08006af7 	.word	0x08006af7
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006af7 	.word	0x08006af7
 8006a74:	08006af7 	.word	0x08006af7
 8006a78:	08006af7 	.word	0x08006af7
 8006a7c:	08006af7 	.word	0x08006af7
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006add 	.word	0x08006add
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d107      	bne.n	8006aa4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a94:	f107 030a 	add.w	r3, r7, #10
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fa91 	bl	8007fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aa2:	e032      	b.n	8006b0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fa1b 	bl	8007ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab0:	e02b      	b.n	8006b0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d107      	bne.n	8006ace <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006abe:	f107 030d 	add.w	r3, r7, #13
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fa7c 	bl	8007fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006acc:	e01d      	b.n	8006b0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fa06 	bl	8007ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8006ada:	e016      	b.n	8006b0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d00f      	beq.n	8006b08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f9f9 	bl	8007ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006af4:	e008      	b.n	8006b08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f9f2 	bl	8007ee2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	75fb      	strb	r3, [r7, #23]
          break;
 8006b02:	e002      	b.n	8006b0a <USBD_CDC_Setup+0x176>
          break;
 8006b04:	bf00      	nop
 8006b06:	e008      	b.n	8006b1a <USBD_CDC_Setup+0x186>
          break;
 8006b08:	bf00      	nop
      }
      break;
 8006b0a:	e006      	b.n	8006b1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 f9e7 	bl	8007ee2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b14:	2303      	movs	r3, #3
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e04f      	b.n	8006be6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d029      	beq.n	8006bb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	3318      	adds	r3, #24
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	78f9      	ldrb	r1, [r7, #3]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	3344      	adds	r3, #68	; 0x44
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b8c:	fb03 f301 	mul.w	r3, r3, r1
 8006b90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d110      	bne.n	8006bb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3318      	adds	r3, #24
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006baa:	78f9      	ldrb	r1, [r7, #3]
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 fee0 	bl	8008976 <USBD_LL_Transmit>
 8006bb6:	e015      	b.n	8006be4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e015      	b.n	8006c3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fef0 	bl	80089fa <USBD_LL_GetRxDataSize>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c36:	4611      	mov	r1, r2
 8006c38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e01b      	b.n	8006c96 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d015      	beq.n	8006c94 <USBD_CDC_EP0_RxReady+0x50>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c6e:	2bff      	cmp	r3, #255	; 0xff
 8006c70:	d010      	beq.n	8006c94 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	22ff      	movs	r2, #255	; 0xff
 8006c90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2243      	movs	r2, #67	; 0x43
 8006cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20000098 	.word	0x20000098

08006cc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2243      	movs	r2, #67	; 0x43
 8006ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000054 	.word	0x20000054

08006ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2243      	movs	r2, #67	; 0x43
 8006cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	200000dc 	.word	0x200000dc

08006d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	20000010 	.word	0x20000010

08006d20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e004      	b.n	8006d3e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b087      	sub	sp, #28
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e008      	b.n	8006d7a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e004      	b.n	8006dac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e016      	b.n	8006e04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7c1b      	ldrb	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fde4 	bl	80089b8 <USBD_LL_PrepareReceive>
 8006df0:	e007      	b.n	8006e02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fddb 	bl	80089b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e01f      	b.n	8006e64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	79fa      	ldrb	r2, [r7, #7]
 8006e56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f001 fc57 	bl	800870c <USBD_LL_Init>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e016      	b.n	8006eb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	f107 020e 	add.w	r2, r7, #14
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fc6e 	bl	80087a4 <USBD_LL_Start>
 8006ec8:	4603      	mov	r3, r0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
  }

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 ff83 	bl	8007e6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d00e      	beq.n	8006faa <USBD_LL_SetupStage+0x5a>
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d302      	bcc.n	8006f96 <USBD_LL_SetupStage+0x46>
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d014      	beq.n	8006fbe <USBD_LL_SetupStage+0x6e>
 8006f94:	e01d      	b.n	8006fd2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa62 	bl	8007468 <USBD_StdDevReq>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa8:	e020      	b.n	8006fec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fac6 	bl	8007544 <USBD_StdItfReq>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e016      	b.n	8006fec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fb03 	bl	80075d2 <USBD_StdEPReq>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd0:	e00c      	b.n	8006fec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fc3f 	bl	8008864 <USBD_LL_StallEP>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fea:	bf00      	nop
  }

  return ret;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	460b      	mov	r3, r1
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d138      	bne.n	800707c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007010:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007018:	2b03      	cmp	r3, #3
 800701a:	d14a      	bne.n	80070b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d913      	bls.n	8007050 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	4293      	cmp	r3, r2
 8007040:	bf28      	it	cs
 8007042:	4613      	movcs	r3, r2
 8007044:	461a      	mov	r2, r3
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f001 f804 	bl	8008056 <USBD_CtlContinueRx>
 800704e:	e030      	b.n	80070b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d10b      	bne.n	8007074 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 ffff 	bl	8008078 <USBD_CtlSendStatus>
 800707a:	e01a      	b.n	80070b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b03      	cmp	r3, #3
 8007086:	d114      	bne.n	80070b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	7afa      	ldrb	r2, [r7, #11]
 800709e:	4611      	mov	r1, r2
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	e000      	b.n	80070b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	460b      	mov	r3, r1
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d16b      	bne.n	80071a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3314      	adds	r3, #20
 80070d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d156      	bne.n	800718e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d914      	bls.n	8007116 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	461a      	mov	r2, r3
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 ff79 	bl	8007ffa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f001 fc52 	bl	80089b8 <USBD_LL_PrepareReceive>
 8007114:	e03b      	b.n	800718e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	429a      	cmp	r2, r3
 8007120:	d11c      	bne.n	800715c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800712a:	429a      	cmp	r2, r3
 800712c:	d316      	bcc.n	800715c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007138:	429a      	cmp	r2, r3
 800713a:	d20f      	bcs.n	800715c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800713c:	2200      	movs	r2, #0
 800713e:	2100      	movs	r1, #0
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 ff5a 	bl	8007ffa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800714e:	2300      	movs	r3, #0
 8007150:	2200      	movs	r2, #0
 8007152:	2100      	movs	r1, #0
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f001 fc2f 	bl	80089b8 <USBD_LL_PrepareReceive>
 800715a:	e018      	b.n	800718e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d10b      	bne.n	8007180 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007180:	2180      	movs	r1, #128	; 0x80
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f001 fb6e 	bl	8008864 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 ff88 	bl	800809e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d122      	bne.n	80071de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff fe9a 	bl	8006ed2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071a6:	e01a      	b.n	80071de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d114      	bne.n	80071de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	7afa      	ldrb	r2, [r7, #11]
 80071ca:	4611      	mov	r1, r2
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	4798      	blx	r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	e000      	b.n	80071e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e02f      	b.n	800727c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00f      	beq.n	8007246 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	4611      	mov	r1, r2
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007246:	2340      	movs	r3, #64	; 0x40
 8007248:	2200      	movs	r2, #0
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fac4 	bl	80087da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2240      	movs	r2, #64	; 0x40
 800725e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007262:	2340      	movs	r3, #64	; 0x40
 8007264:	2200      	movs	r2, #0
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fab6 	bl	80087da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2204      	movs	r2, #4
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d106      	bne.n	80072f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e012      	b.n	800733c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10b      	bne.n	800733a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	e014      	b.n	8007388 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d10d      	bne.n	8007386 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e014      	b.n	80073d4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d10d      	bne.n	80073d2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	4611      	mov	r1, r2
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6852      	ldr	r2, [r2, #4]
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	4611      	mov	r1, r2
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
  }

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3301      	adds	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007448:	8a3b      	ldrh	r3, [r7, #16]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	b21a      	sxth	r2, r3
 800744e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007452:	4313      	orrs	r3, r2
 8007454:	b21b      	sxth	r3, r3
 8007456:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007458:	89fb      	ldrh	r3, [r7, #14]
}
 800745a:	4618      	mov	r0, r3
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800747e:	2b20      	cmp	r3, #32
 8007480:	d004      	beq.n	800748c <USBD_StdDevReq+0x24>
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d002      	beq.n	800748c <USBD_StdDevReq+0x24>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <USBD_StdDevReq+0x38>
 800748a:	e050      	b.n	800752e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	e04b      	b.n	8007538 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d83c      	bhi.n	8007522 <USBD_StdDevReq+0xba>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBD_StdDevReq+0x48>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007519 	.word	0x08007519
 80074b8:	08007523 	.word	0x08007523
 80074bc:	0800750f 	.word	0x0800750f
 80074c0:	08007523 	.word	0x08007523
 80074c4:	080074e3 	.word	0x080074e3
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	08007523 	.word	0x08007523
 80074d0:	080074fb 	.word	0x080074fb
 80074d4:	080074ed 	.word	0x080074ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9d4 	bl	8007888 <USBD_GetDescriptor>
          break;
 80074e0:	e024      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb39 	bl	8007b5c <USBD_SetAddress>
          break;
 80074ea:	e01f      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fb78 	bl	8007be4 <USBD_SetConfig>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
          break;
 80074f8:	e018      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc17 	bl	8007d30 <USBD_GetConfig>
          break;
 8007502:	e013      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fc47 	bl	8007d9a <USBD_GetStatus>
          break;
 800750c:	e00e      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc76 	bl	8007e02 <USBD_SetFeature>
          break;
 8007516:	e009      	b.n	800752c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fc85 	bl	8007e2a <USBD_ClrFeature>
          break;
 8007520:	e004      	b.n	800752c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fcdc 	bl	8007ee2 <USBD_CtlError>
          break;
 800752a:	bf00      	nop
      }
      break;
 800752c:	e004      	b.n	8007538 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fcd6 	bl	8007ee2 <USBD_CtlError>
      break;
 8007536:	bf00      	nop
  }

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop

08007544 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755a:	2b20      	cmp	r3, #32
 800755c:	d003      	beq.n	8007566 <USBD_StdItfReq+0x22>
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d001      	beq.n	8007566 <USBD_StdItfReq+0x22>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d12b      	bne.n	80075be <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	2b02      	cmp	r3, #2
 8007572:	d81d      	bhi.n	80075b0 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	889b      	ldrh	r3, [r3, #4]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d813      	bhi.n	80075a6 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	88db      	ldrh	r3, [r3, #6]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <USBD_StdItfReq+0x76>
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10d      	bne.n	80075ba <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd6a 	bl	8008078 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075a4:	e009      	b.n	80075ba <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fc9a 	bl	8007ee2 <USBD_CtlError>
          break;
 80075ae:	e004      	b.n	80075ba <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc95 	bl	8007ee2 <USBD_CtlError>
          break;
 80075b8:	e000      	b.n	80075bc <USBD_StdItfReq+0x78>
          break;
 80075ba:	bf00      	nop
      }
      break;
 80075bc:	e004      	b.n	80075c8 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc8e 	bl	8007ee2 <USBD_CtlError>
      break;
 80075c6:	bf00      	nop
  }

  return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	889b      	ldrh	r3, [r3, #4]
 80075e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d004      	beq.n	80075fc <USBD_StdEPReq+0x2a>
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d002      	beq.n	80075fc <USBD_StdEPReq+0x2a>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <USBD_StdEPReq+0x3e>
 80075fa:	e13a      	b.n	8007872 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
      break;
 800760e:	e135      	b.n	800787c <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d03f      	beq.n	8007698 <USBD_StdEPReq+0xc6>
 8007618:	2b03      	cmp	r3, #3
 800761a:	d002      	beq.n	8007622 <USBD_StdEPReq+0x50>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d07b      	beq.n	8007718 <USBD_StdEPReq+0x146>
 8007620:	e121      	b.n	8007866 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d002      	beq.n	8007634 <USBD_StdEPReq+0x62>
 800762e:	2b03      	cmp	r3, #3
 8007630:	d015      	beq.n	800765e <USBD_StdEPReq+0x8c>
 8007632:	e02b      	b.n	800768c <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <USBD_StdEPReq+0x82>
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d009      	beq.n	8007654 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f90d 	bl	8008864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800764a:	2180      	movs	r1, #128	; 0x80
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f909 	bl	8008864 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007652:	e020      	b.n	8007696 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc43 	bl	8007ee2 <USBD_CtlError>
              break;
 800765c:	e01b      	b.n	8007696 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10e      	bne.n	8007684 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_StdEPReq+0xb2>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d008      	beq.n	8007684 <USBD_StdEPReq+0xb2>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	88db      	ldrh	r3, [r3, #6]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f8f0 	bl	8008864 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fcf7 	bl	8008078 <USBD_CtlSendStatus>

              break;
 800768a:	e004      	b.n	8007696 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc27 	bl	8007ee2 <USBD_CtlError>
              break;
 8007694:	bf00      	nop
          }
          break;
 8007696:	e0eb      	b.n	8007870 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0xd8>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d015      	beq.n	80076d4 <USBD_StdEPReq+0x102>
 80076a8:	e02f      	b.n	800770a <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00c      	beq.n	80076ca <USBD_StdEPReq+0xf8>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d009      	beq.n	80076ca <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f8d2 	bl	8008864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076c0:	2180      	movs	r1, #128	; 0x80
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f8ce 	bl	8008864 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c8:	e025      	b.n	8007716 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fc08 	bl	8007ee2 <USBD_CtlError>
              break;
 80076d2:	e020      	b.n	8007716 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	885b      	ldrh	r3, [r3, #2]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11b      	bne.n	8007714 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f8d9 	bl	80088a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fcc1 	bl	8008078 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007708:	e004      	b.n	8007714 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fbe8 	bl	8007ee2 <USBD_CtlError>
              break;
 8007712:	e000      	b.n	8007716 <USBD_StdEPReq+0x144>
              break;
 8007714:	bf00      	nop
          }
          break;
 8007716:	e0ab      	b.n	8007870 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d002      	beq.n	800772a <USBD_StdEPReq+0x158>
 8007724:	2b03      	cmp	r3, #3
 8007726:	d032      	beq.n	800778e <USBD_StdEPReq+0x1bc>
 8007728:	e097      	b.n	800785a <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <USBD_StdEPReq+0x16e>
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d004      	beq.n	8007740 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fbd2 	bl	8007ee2 <USBD_CtlError>
                break;
 800773e:	e091      	b.n	8007864 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da0b      	bge.n	8007760 <USBD_StdEPReq+0x18e>
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	3310      	adds	r3, #16
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	3304      	adds	r3, #4
 800775e:	e00b      	b.n	8007778 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	3304      	adds	r3, #4
 8007778:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2202      	movs	r2, #2
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc1c 	bl	8007fc4 <USBD_CtlSendData>
              break;
 800778c:	e06a      	b.n	8007864 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800778e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	da11      	bge.n	80077ba <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	f003 020f 	and.w	r2, r3, #15
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	3324      	adds	r3, #36	; 0x24
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d117      	bne.n	80077e0 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fb95 	bl	8007ee2 <USBD_CtlError>
                  break;
 80077b8:	e054      	b.n	8007864 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fb82 	bl	8007ee2 <USBD_CtlError>
                  break;
 80077de:	e041      	b.n	8007864 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	da0b      	bge.n	8007800 <USBD_StdEPReq+0x22e>
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	3310      	adds	r3, #16
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	4413      	add	r3, r2
 80077fc:	3304      	adds	r3, #4
 80077fe:	e00b      	b.n	8007818 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	4413      	add	r3, r2
 8007816:	3304      	adds	r3, #4
 8007818:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <USBD_StdEPReq+0x254>
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d103      	bne.n	800782e <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	e00e      	b.n	800784c <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 f854 	bl	80088e0 <USBD_LL_IsStallEP>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e002      	b.n	800784c <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2202      	movs	r2, #2
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fbb6 	bl	8007fc4 <USBD_CtlSendData>
              break;
 8007858:	e004      	b.n	8007864 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fb40 	bl	8007ee2 <USBD_CtlError>
              break;
 8007862:	bf00      	nop
          }
          break;
 8007864:	e004      	b.n	8007870 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fb3a 	bl	8007ee2 <USBD_CtlError>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e004      	b.n	800787c <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb34 	bl	8007ee2 <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	0a1b      	lsrs	r3, r3, #8
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	f200 8128 	bhi.w	8007afe <USBD_GetDescriptor+0x276>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <USBD_GetDescriptor+0x2c>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	080078e9 	.word	0x080078e9
 80078bc:	08007929 	.word	0x08007929
 80078c0:	08007aff 	.word	0x08007aff
 80078c4:	08007aff 	.word	0x08007aff
 80078c8:	08007a9f 	.word	0x08007a9f
 80078cc:	08007acb 	.word	0x08007acb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
      break;
 80078e6:	e112      	b.n	8007b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7c1b      	ldrb	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10d      	bne.n	800790c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	f107 0208 	add.w	r2, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	2202      	movs	r2, #2
 8007908:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800790a:	e100      	b.n	8007b0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f107 0208 	add.w	r2, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	2202      	movs	r2, #2
 8007924:	701a      	strb	r2, [r3, #0]
      break;
 8007926:	e0f2      	b.n	8007b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	885b      	ldrh	r3, [r3, #2]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b05      	cmp	r3, #5
 8007930:	f200 80ac 	bhi.w	8007a8c <USBD_GetDescriptor+0x204>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <USBD_GetDescriptor+0xb4>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007955 	.word	0x08007955
 8007940:	08007989 	.word	0x08007989
 8007944:	080079bd 	.word	0x080079bd
 8007948:	080079f1 	.word	0x080079f1
 800794c:	08007a25 	.word	0x08007a25
 8007950:	08007a59 	.word	0x08007a59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007976:	e091      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fab1 	bl	8007ee2 <USBD_CtlError>
            err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
          break;
 8007986:	e089      	b.n	8007a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e077      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa97 	bl	8007ee2 <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e06f      	b.n	8007a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e05d      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa7d 	bl	8007ee2 <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e055      	b.n	8007a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e043      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa63 	bl	8007ee2 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e03b      	b.n	8007a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e029      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa49 	bl	8007ee2 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e021      	b.n	8007a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e00f      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa2f 	bl	8007ee2 <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e007      	b.n	8007a9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa27 	bl	8007ee2 <USBD_CtlError>
          err++;
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	3301      	adds	r3, #1
 8007a98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a9a:	bf00      	nop
      }
      break;
 8007a9c:	e037      	b.n	8007b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	7c1b      	ldrb	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	f107 0208 	add.w	r2, r7, #8
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4798      	blx	r3
 8007ab6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ab8:	e029      	b.n	8007b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa10 	bl	8007ee2 <USBD_CtlError>
        err++;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac8:	e021      	b.n	8007b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7c1b      	ldrb	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10d      	bne.n	8007aee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	f107 0208 	add.w	r2, r7, #8
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4798      	blx	r3
 8007ae2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	2207      	movs	r2, #7
 8007aea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aec:	e00f      	b.n	8007b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9f6 	bl	8007ee2 <USBD_CtlError>
        err++;
 8007af6:	7afb      	ldrb	r3, [r7, #11]
 8007af8:	3301      	adds	r3, #1
 8007afa:	72fb      	strb	r3, [r7, #11]
      break;
 8007afc:	e007      	b.n	8007b0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9ee 	bl	8007ee2 <USBD_CtlError>
      err++;
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b0c:	bf00      	nop
  }

  if (err != 0U)
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11e      	bne.n	8007b52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	88db      	ldrh	r3, [r3, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d016      	beq.n	8007b4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b1c:	893b      	ldrh	r3, [r7, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88da      	ldrh	r2, [r3, #6]
 8007b26:	893b      	ldrh	r3, [r7, #8]
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	bf28      	it	cs
 8007b2c:	4613      	movcs	r3, r2
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b32:	893b      	ldrh	r3, [r7, #8]
 8007b34:	461a      	mov	r2, r3
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa43 	bl	8007fc4 <USBD_CtlSendData>
 8007b3e:	e009      	b.n	8007b54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9cd 	bl	8007ee2 <USBD_CtlError>
 8007b48:	e004      	b.n	8007b54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa94 	bl	8008078 <USBD_CtlSendStatus>
 8007b50:	e000      	b.n	8007b54 <USBD_GetDescriptor+0x2cc>
    return;
 8007b52:	bf00      	nop
  }
}
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop

08007b5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	889b      	ldrh	r3, [r3, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d131      	bne.n	8007bd2 <USBD_SetAddress+0x76>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d12d      	bne.n	8007bd2 <USBD_SetAddress+0x76>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b7c:	d829      	bhi.n	8007bd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	885b      	ldrh	r3, [r3, #2]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d104      	bne.n	8007ba0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9a2 	bl	8007ee2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9e:	e01c      	b.n	8007bda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7bfa      	ldrb	r2, [r7, #15]
 8007ba4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fec3 	bl	8008938 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa60 	bl	8008078 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	e008      	b.n	8007bda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd0:	e003      	b.n	8007bda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f984 	bl	8007ee2 <USBD_CtlError>
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	4b4c      	ldr	r3, [pc, #304]	; (8007d2c <USBD_SetConfig+0x148>)
 8007bfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bfc:	4b4b      	ldr	r3, [pc, #300]	; (8007d2c <USBD_SetConfig+0x148>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d905      	bls.n	8007c10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f96b 	bl	8007ee2 <USBD_CtlError>
    return USBD_FAIL;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e088      	b.n	8007d22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d002      	beq.n	8007c22 <USBD_SetConfig+0x3e>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d025      	beq.n	8007c6c <USBD_SetConfig+0x88>
 8007c20:	e071      	b.n	8007d06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c22:	4b42      	ldr	r3, [pc, #264]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01c      	beq.n	8007c64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c2a:	4b40      	ldr	r3, [pc, #256]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c34:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f954 	bl	8006ee8 <USBD_SetClassConfig>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f948 	bl	8007ee2 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c52:	e065      	b.n	8007d20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa0f 	bl	8008078 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c62:	e05d      	b.n	8007d20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa07 	bl	8008078 <USBD_CtlSendStatus>
      break;
 8007c6a:	e059      	b.n	8007d20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c6c:	4b2f      	ldr	r3, [pc, #188]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d112      	bne.n	8007c9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c86:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff f947 	bl	8006f20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9f0 	bl	8008078 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c98:	e042      	b.n	8007d20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <USBD_SetConfig+0x148>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d02a      	beq.n	8007cfe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff f935 	bl	8006f20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <USBD_SetConfig+0x148>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <USBD_SetConfig+0x148>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff f90e 	bl	8006ee8 <USBD_SetClassConfig>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00f      	beq.n	8007cf6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f902 	bl	8007ee2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff f91a 	bl	8006f20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cf4:	e014      	b.n	8007d20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f9be 	bl	8008078 <USBD_CtlSendStatus>
      break;
 8007cfc:	e010      	b.n	8007d20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9ba 	bl	8008078 <USBD_CtlSendStatus>
      break;
 8007d04:	e00c      	b.n	8007d20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8ea 	bl	8007ee2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <USBD_SetConfig+0x148>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff f903 	bl	8006f20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000212 	.word	0x20000212

08007d30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	88db      	ldrh	r3, [r3, #6]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d004      	beq.n	8007d4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8cc 	bl	8007ee2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d4a:	e022      	b.n	8007d92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	db17      	blt.n	8007d88 <USBD_GetConfig+0x58>
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	dd02      	ble.n	8007d62 <USBD_GetConfig+0x32>
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d00b      	beq.n	8007d78 <USBD_GetConfig+0x48>
 8007d60:	e012      	b.n	8007d88 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f927 	bl	8007fc4 <USBD_CtlSendData>
        break;
 8007d76:	e00c      	b.n	8007d92 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f91f 	bl	8007fc4 <USBD_CtlSendData>
        break;
 8007d86:	e004      	b.n	8007d92 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f8a9 	bl	8007ee2 <USBD_CtlError>
        break;
 8007d90:	bf00      	nop
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d81e      	bhi.n	8007df0 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d004      	beq.n	8007dc4 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f890 	bl	8007ee2 <USBD_CtlError>
        break;
 8007dc2:	e01a      	b.n	8007dfa <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f043 0202 	orr.w	r2, r3, #2
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	330c      	adds	r3, #12
 8007de4:	2202      	movs	r2, #2
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8eb 	bl	8007fc4 <USBD_CtlSendData>
      break;
 8007dee:	e004      	b.n	8007dfa <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f875 	bl	8007ee2 <USBD_CtlError>
      break;
 8007df8:	bf00      	nop
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d106      	bne.n	8007e22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f92b 	bl	8008078 <USBD_CtlSendStatus>
  }
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d80b      	bhi.n	8007e5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d10c      	bne.n	8007e64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f910 	bl	8008078 <USBD_CtlSendStatus>
      }
      break;
 8007e58:	e004      	b.n	8007e64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f840 	bl	8007ee2 <USBD_CtlError>
      break;
 8007e62:	e000      	b.n	8007e66 <USBD_ClrFeature+0x3c>
      break;
 8007e64:	bf00      	nop
  }
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	781a      	ldrb	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fac6 	bl	800742a <SWAPBYTE>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fab9 	bl	800742a <SWAPBYTE>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff faac 	bl	800742a <SWAPBYTE>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	80da      	strh	r2, [r3, #6]
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eec:	2180      	movs	r1, #128	; 0x80
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fcb8 	bl	8008864 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fcb4 	bl	8008864 <USBD_LL_StallEP>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d036      	beq.n	8007f88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f1e:	6938      	ldr	r0, [r7, #16]
 8007f20:	f000 f836 	bl	8007f90 <USBD_GetLen>
 8007f24:	4603      	mov	r3, r0
 8007f26:	3301      	adds	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	4413      	add	r3, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	7812      	ldrb	r2, [r2, #0]
 8007f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	3301      	adds	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	4413      	add	r3, r2
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	3301      	adds	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f54:	e013      	b.n	8007f7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	3301      	adds	r3, #1
 8007f66:	613b      	str	r3, [r7, #16]
    idx++;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	4413      	add	r3, r2
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e7      	bne.n	8007f56 <USBD_GetString+0x52>
 8007f86:	e000      	b.n	8007f8a <USBD_GetString+0x86>
    return;
 8007f88:	bf00      	nop
  }
}
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fa0:	e005      	b.n	8007fae <USBD_GetLen+0x1e>
  {
    len++;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f5      	bne.n	8007fa2 <USBD_GetLen+0x12>
  }

  return len;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fcc3 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fcb2 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2203      	movs	r2, #3
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	2100      	movs	r1, #0
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fcb6 	bl	80089b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fca5 	bl	80089b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2204      	movs	r2, #4
 8008084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008088:	2300      	movs	r3, #0
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fc71 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2205      	movs	r2, #5
 80080aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ae:	2300      	movs	r3, #0
 80080b0:	2200      	movs	r2, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc7f 	bl	80089b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080c8:	2200      	movs	r2, #0
 80080ca:	4912      	ldr	r1, [pc, #72]	; (8008114 <MX_USB_DEVICE_Init+0x50>)
 80080cc:	4812      	ldr	r0, [pc, #72]	; (8008118 <MX_USB_DEVICE_Init+0x54>)
 80080ce:	f7fe fe9d 	bl	8006e0c <USBD_Init>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080d8:	f7f9 fba8 	bl	800182c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080dc:	490f      	ldr	r1, [pc, #60]	; (800811c <MX_USB_DEVICE_Init+0x58>)
 80080de:	480e      	ldr	r0, [pc, #56]	; (8008118 <MX_USB_DEVICE_Init+0x54>)
 80080e0:	f7fe fec4 	bl	8006e6c <USBD_RegisterClass>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080ea:	f7f9 fb9f 	bl	800182c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080ee:	490c      	ldr	r1, [pc, #48]	; (8008120 <MX_USB_DEVICE_Init+0x5c>)
 80080f0:	4809      	ldr	r0, [pc, #36]	; (8008118 <MX_USB_DEVICE_Init+0x54>)
 80080f2:	f7fe fe15 	bl	8006d20 <USBD_CDC_RegisterInterface>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080fc:	f7f9 fb96 	bl	800182c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <MX_USB_DEVICE_Init+0x54>)
 8008102:	f7fe feda 	bl	8006eba <USBD_Start>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800810c:	f7f9 fb8e 	bl	800182c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008110:	bf00      	nop
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000134 	.word	0x20000134
 8008118:	200004dc 	.word	0x200004dc
 800811c:	2000001c 	.word	0x2000001c
 8008120:	20000120 	.word	0x20000120

08008124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008128:	2200      	movs	r2, #0
 800812a:	4905      	ldr	r1, [pc, #20]	; (8008140 <CDC_Init_FS+0x1c>)
 800812c:	4805      	ldr	r0, [pc, #20]	; (8008144 <CDC_Init_FS+0x20>)
 800812e:	f7fe fe0c 	bl	8006d4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008132:	4905      	ldr	r1, [pc, #20]	; (8008148 <CDC_Init_FS+0x24>)
 8008134:	4803      	ldr	r0, [pc, #12]	; (8008144 <CDC_Init_FS+0x20>)
 8008136:	f7fe fe26 	bl	8006d86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800813a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000fac 	.word	0x20000fac
 8008144:	200004dc 	.word	0x200004dc
 8008148:	200007ac 	.word	0x200007ac

0800814c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008152:	4618      	mov	r0, r3
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
 8008168:	4613      	mov	r3, r2
 800816a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2b23      	cmp	r3, #35	; 0x23
 8008170:	d84a      	bhi.n	8008208 <CDC_Control_FS+0xac>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <CDC_Control_FS+0x1c>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	08008209 	.word	0x08008209
 800817c:	08008209 	.word	0x08008209
 8008180:	08008209 	.word	0x08008209
 8008184:	08008209 	.word	0x08008209
 8008188:	08008209 	.word	0x08008209
 800818c:	08008209 	.word	0x08008209
 8008190:	08008209 	.word	0x08008209
 8008194:	08008209 	.word	0x08008209
 8008198:	08008209 	.word	0x08008209
 800819c:	08008209 	.word	0x08008209
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008209 	.word	0x08008209
 80081a8:	08008209 	.word	0x08008209
 80081ac:	08008209 	.word	0x08008209
 80081b0:	08008209 	.word	0x08008209
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008209 	.word	0x08008209
 80081bc:	08008209 	.word	0x08008209
 80081c0:	08008209 	.word	0x08008209
 80081c4:	08008209 	.word	0x08008209
 80081c8:	08008209 	.word	0x08008209
 80081cc:	08008209 	.word	0x08008209
 80081d0:	08008209 	.word	0x08008209
 80081d4:	08008209 	.word	0x08008209
 80081d8:	08008209 	.word	0x08008209
 80081dc:	08008209 	.word	0x08008209
 80081e0:	08008209 	.word	0x08008209
 80081e4:	08008209 	.word	0x08008209
 80081e8:	08008209 	.word	0x08008209
 80081ec:	08008209 	.word	0x08008209
 80081f0:	08008209 	.word	0x08008209
 80081f4:	08008209 	.word	0x08008209
 80081f8:	08008209 	.word	0x08008209
 80081fc:	08008209 	.word	0x08008209
 8008200:	08008209 	.word	0x08008209
 8008204:	08008209 	.word	0x08008209
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008208:	bf00      	nop
  }

  return (USBD_OK);
 800820a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4805      	ldr	r0, [pc, #20]	; (800823c <CDC_Receive_FS+0x24>)
 8008226:	f7fe fdae 	bl	8006d86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800822a:	4804      	ldr	r0, [pc, #16]	; (800823c <CDC_Receive_FS+0x24>)
 800822c:	f7fe fdc4 	bl	8006db8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200004dc 	.word	0x200004dc

08008240 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008256:	4618      	mov	r0, r3
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	6039      	str	r1, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2212      	movs	r2, #18
 8008274:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008276:	4b03      	ldr	r3, [pc, #12]	; (8008284 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	20000150 	.word	0x20000150

08008288 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	6039      	str	r1, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2204      	movs	r2, #4
 8008298:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800829a:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20000164 	.word	0x20000164

080082ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4907      	ldr	r1, [pc, #28]	; (80082e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80082c2:	4808      	ldr	r0, [pc, #32]	; (80082e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80082c4:	f7ff fe1e 	bl	8007f04 <USBD_GetString>
 80082c8:	e004      	b.n	80082d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4904      	ldr	r1, [pc, #16]	; (80082e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80082ce:	4805      	ldr	r0, [pc, #20]	; (80082e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d0:	f7ff fe18 	bl	8007f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082d4:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200017ac 	.word	0x200017ac
 80082e4:	08008b3c 	.word	0x08008b3c

080082e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	4904      	ldr	r1, [pc, #16]	; (8008308 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082f8:	4804      	ldr	r0, [pc, #16]	; (800830c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082fa:	f7ff fe03 	bl	8007f04 <USBD_GetString>
  return USBD_StrDesc;
 80082fe:	4b02      	ldr	r3, [pc, #8]	; (8008308 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200017ac 	.word	0x200017ac
 800830c:	08008b54 	.word	0x08008b54

08008310 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	221a      	movs	r2, #26
 8008320:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008322:	f000 f843 	bl	80083ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008326:	4b02      	ldr	r3, [pc, #8]	; (8008330 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000168 	.word	0x20000168

08008334 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4907      	ldr	r1, [pc, #28]	; (8008368 <USBD_FS_ConfigStrDescriptor+0x34>)
 800834a:	4808      	ldr	r0, [pc, #32]	; (800836c <USBD_FS_ConfigStrDescriptor+0x38>)
 800834c:	f7ff fdda 	bl	8007f04 <USBD_GetString>
 8008350:	e004      	b.n	800835c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4904      	ldr	r1, [pc, #16]	; (8008368 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008356:	4805      	ldr	r0, [pc, #20]	; (800836c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008358:	f7ff fdd4 	bl	8007f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200017ac 	.word	0x200017ac
 800836c:	08008b68 	.word	0x08008b68

08008370 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4907      	ldr	r1, [pc, #28]	; (80083a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008386:	4808      	ldr	r0, [pc, #32]	; (80083a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008388:	f7ff fdbc 	bl	8007f04 <USBD_GetString>
 800838c:	e004      	b.n	8008398 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4904      	ldr	r1, [pc, #16]	; (80083a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008392:	4805      	ldr	r0, [pc, #20]	; (80083a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008394:	f7ff fdb6 	bl	8007f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200017ac 	.word	0x200017ac
 80083a8:	08008b74 	.word	0x08008b74

080083ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <Get_SerialNum+0x44>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083b8:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <Get_SerialNum+0x48>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <Get_SerialNum+0x4c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083d2:	2208      	movs	r2, #8
 80083d4:	4909      	ldr	r1, [pc, #36]	; (80083fc <Get_SerialNum+0x50>)
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f814 	bl	8008404 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083dc:	2204      	movs	r2, #4
 80083de:	4908      	ldr	r1, [pc, #32]	; (8008400 <Get_SerialNum+0x54>)
 80083e0:	68b8      	ldr	r0, [r7, #8]
 80083e2:	f000 f80f 	bl	8008404 <IntToUnicode>
  }
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	1fff7a10 	.word	0x1fff7a10
 80083f4:	1fff7a14 	.word	0x1fff7a14
 80083f8:	1fff7a18 	.word	0x1fff7a18
 80083fc:	2000016a 	.word	0x2000016a
 8008400:	2000017a 	.word	0x2000017a

08008404 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]
 800841a:	e027      	b.n	800846c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	0f1b      	lsrs	r3, r3, #28
 8008420:	2b09      	cmp	r3, #9
 8008422:	d80b      	bhi.n	800843c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	0f1b      	lsrs	r3, r3, #28
 8008428:	b2da      	uxtb	r2, r3
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4619      	mov	r1, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	440b      	add	r3, r1
 8008434:	3230      	adds	r2, #48	; 0x30
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e00a      	b.n	8008452 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	0f1b      	lsrs	r3, r3, #28
 8008440:	b2da      	uxtb	r2, r3
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4619      	mov	r1, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	440b      	add	r3, r1
 800844c:	3237      	adds	r2, #55	; 0x37
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	3301      	adds	r3, #1
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	3301      	adds	r3, #1
 800846a:	75fb      	strb	r3, [r7, #23]
 800846c:	7dfa      	ldrb	r2, [r7, #23]
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3d3      	bcc.n	800841c <IntToUnicode+0x18>
  }
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084a0:	d13a      	bne.n	8008518 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a2:	2300      	movs	r3, #0
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	6313      	str	r3, [r2, #48]	; 0x30
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c4:	2302      	movs	r3, #2
 80084c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084cc:	2303      	movs	r3, #3
 80084ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084d0:	230a      	movs	r3, #10
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	4619      	mov	r1, r3
 80084da:	4812      	ldr	r0, [pc, #72]	; (8008524 <HAL_PCD_MspInit+0xa4>)
 80084dc:	f7f9 fd58 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084e0:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e4:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	6353      	str	r3, [r2, #52]	; 0x34
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084fa:	6453      	str	r3, [r2, #68]	; 0x44
 80084fc:	4b08      	ldr	r3, [pc, #32]	; (8008520 <HAL_PCD_MspInit+0xa0>)
 80084fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008508:	2200      	movs	r2, #0
 800850a:	2100      	movs	r1, #0
 800850c:	2043      	movs	r0, #67	; 0x43
 800850e:	f7f9 fd08 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008512:	2043      	movs	r0, #67	; 0x43
 8008514:	f7f9 fd21 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008518:	bf00      	nop
 800851a:	3728      	adds	r7, #40	; 0x28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40023800 	.word	0x40023800
 8008524:	40020000 	.word	0x40020000

08008528 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f7fe fd06 	bl	8006f50 <USBD_LL_SetupStage>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	4613      	mov	r3, r2
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	4619      	mov	r1, r3
 8008576:	f7fe fd3e 	bl	8006ff6 <USBD_LL_DataOutStage>
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	3348      	adds	r3, #72	; 0x48
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	4619      	mov	r1, r3
 80085aa:	f7fe fd87 	bl	80070bc <USBD_LL_DataInStage>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe fe9b 	bl	8007300 <USBD_LL_SOF>
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085da:	2301      	movs	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
 80085ea:	e008      	b.n	80085fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d102      	bne.n	80085fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085f4:	2301      	movs	r3, #1
 80085f6:	73fb      	strb	r3, [r7, #15]
 80085f8:	e001      	b.n	80085fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085fa:	f7f9 f917 	bl	800182c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008604:	7bfa      	ldrb	r2, [r7, #15]
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fe3b 	bl	8007284 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fde7 	bl	80071e8 <USBD_LL_Reset>
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fe36 	bl	80072a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800864a:	f043 0301 	orr.w	r3, r3, #1
 800864e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <HAL_PCD_SuspendCallback+0x48>)
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	4a03      	ldr	r2, [pc, #12]	; (800866c <HAL_PCD_SuspendCallback+0x48>)
 800865e:	f043 0306 	orr.w	r3, r3, #6
 8008662:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	e000ed00 	.word	0xe000ed00

08008670 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fe26 	bl	80072d0 <USBD_LL_Resume>
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fe74 	bl	8007390 <USBD_LL_IsoOUTIncomplete>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fe3c 	bl	8007344 <USBD_LL_IsoINIncomplete>
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fe7a 	bl	80073dc <USBD_LL_DevConnected>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fe77 	bl	80073f2 <USBD_LL_DevDisconnected>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d13c      	bne.n	8008796 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800871c:	4a20      	ldr	r2, [pc, #128]	; (80087a0 <USBD_LL_Init+0x94>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a1e      	ldr	r2, [pc, #120]	; (80087a0 <USBD_LL_Init+0x94>)
 8008728:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <USBD_LL_Init+0x94>)
 800872e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008732:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008734:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <USBD_LL_Init+0x94>)
 8008736:	2204      	movs	r2, #4
 8008738:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800873a:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <USBD_LL_Init+0x94>)
 800873c:	2202      	movs	r2, #2
 800873e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <USBD_LL_Init+0x94>)
 8008742:	2200      	movs	r2, #0
 8008744:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008746:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <USBD_LL_Init+0x94>)
 8008748:	2202      	movs	r2, #2
 800874a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <USBD_LL_Init+0x94>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008752:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <USBD_LL_Init+0x94>)
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008758:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <USBD_LL_Init+0x94>)
 800875a:	2200      	movs	r2, #0
 800875c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <USBD_LL_Init+0x94>)
 8008760:	2200      	movs	r2, #0
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <USBD_LL_Init+0x94>)
 8008766:	2200      	movs	r2, #0
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800876a:	480d      	ldr	r0, [pc, #52]	; (80087a0 <USBD_LL_Init+0x94>)
 800876c:	f7f9 fddb 	bl	8002326 <HAL_PCD_Init>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008776:	f7f9 f859 	bl	800182c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800877a:	2180      	movs	r1, #128	; 0x80
 800877c:	4808      	ldr	r0, [pc, #32]	; (80087a0 <USBD_LL_Init+0x94>)
 800877e:	f7fa ff38 	bl	80035f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	2100      	movs	r1, #0
 8008786:	4806      	ldr	r0, [pc, #24]	; (80087a0 <USBD_LL_Init+0x94>)
 8008788:	f7fa feec 	bl	8003564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800878c:	2280      	movs	r2, #128	; 0x80
 800878e:	2101      	movs	r1, #1
 8008790:	4803      	ldr	r0, [pc, #12]	; (80087a0 <USBD_LL_Init+0x94>)
 8008792:	f7fa fee7 	bl	8003564 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200019ac 	.word	0x200019ac

080087a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f9 fed0 	bl	8002560 <HAL_PCD_Start>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 f942 	bl	8008a50 <USBD_Get_USB_Status>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	4608      	mov	r0, r1
 80087e4:	4611      	mov	r1, r2
 80087e6:	461a      	mov	r2, r3
 80087e8:	4603      	mov	r3, r0
 80087ea:	70fb      	strb	r3, [r7, #3]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70bb      	strb	r3, [r7, #2]
 80087f0:	4613      	mov	r3, r2
 80087f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008802:	78bb      	ldrb	r3, [r7, #2]
 8008804:	883a      	ldrh	r2, [r7, #0]
 8008806:	78f9      	ldrb	r1, [r7, #3]
 8008808:	f7fa fab4 	bl	8002d74 <HAL_PCD_EP_Open>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f91c 	bl	8008a50 <USBD_Get_USB_Status>
 8008818:	4603      	mov	r3, r0
 800881a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f7fa fafd 	bl	8002e44 <HAL_PCD_EP_Close>
 800884a:	4603      	mov	r3, r0
 800884c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f8fd 	bl	8008a50 <USBD_Get_USB_Status>
 8008856:	4603      	mov	r3, r0
 8008858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885a:	7bbb      	ldrb	r3, [r7, #14]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7fa fbd5 	bl	8003032 <HAL_PCD_EP_SetStall>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f8de 	bl	8008a50 <USBD_Get_USB_Status>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008898:	7bbb      	ldrb	r3, [r7, #14]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fa fc1a 	bl	80030fa <HAL_PCD_EP_ClrStall>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f8bf 	bl	8008a50 <USBD_Get_USB_Status>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da0b      	bge.n	8008914 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	333e      	adds	r3, #62	; 0x3e
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	e00b      	b.n	800892c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	4613      	mov	r3, r2
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800892a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7fa f9e7 	bl	8002d2a <HAL_PCD_SetAddress>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f874 	bl	8008a50 <USBD_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	460b      	mov	r3, r1
 8008984:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008994:	7af9      	ldrb	r1, [r7, #11]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	f7fa fb00 	bl	8002f9e <HAL_PCD_EP_Transmit>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f853 	bl	8008a50 <USBD_Get_USB_Status>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	460b      	mov	r3, r1
 80089c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089d6:	7af9      	ldrb	r1, [r7, #11]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f7fa fa7c 	bl	8002ed8 <HAL_PCD_EP_Receive>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f832 	bl	8008a50 <USBD_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fa faac 	bl	8002f6e <HAL_PCD_EP_GetRxCount>
 8008a16:	4603      	mov	r3, r0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a28:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <USBD_static_malloc+0x18>)
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000214 	.word	0x20000214

08008a3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]

}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d817      	bhi.n	8008a94 <USBD_Get_USB_Status+0x44>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_Get_USB_Status+0x1c>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a83 	.word	0x08008a83
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a8f 	.word	0x08008a8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e00b      	b.n	8008a9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a82:	2303      	movs	r3, #3
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	e008      	b.n	8008a9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8c:	e005      	b.n	8008a9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	73fb      	strb	r3, [r7, #15]
    break;
 8008a92:	e002      	b.n	8008a9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a94:	2303      	movs	r3, #3
 8008a96:	73fb      	strb	r3, [r7, #15]
    break;
 8008a98:	bf00      	nop
  }
  return usb_status;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <__libc_init_array>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	4e0d      	ldr	r6, [pc, #52]	; (8008ae0 <__libc_init_array+0x38>)
 8008aac:	4c0d      	ldr	r4, [pc, #52]	; (8008ae4 <__libc_init_array+0x3c>)
 8008aae:	1ba4      	subs	r4, r4, r6
 8008ab0:	10a4      	asrs	r4, r4, #2
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	42a5      	cmp	r5, r4
 8008ab6:	d109      	bne.n	8008acc <__libc_init_array+0x24>
 8008ab8:	4e0b      	ldr	r6, [pc, #44]	; (8008ae8 <__libc_init_array+0x40>)
 8008aba:	4c0c      	ldr	r4, [pc, #48]	; (8008aec <__libc_init_array+0x44>)
 8008abc:	f000 f82c 	bl	8008b18 <_init>
 8008ac0:	1ba4      	subs	r4, r4, r6
 8008ac2:	10a4      	asrs	r4, r4, #2
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	42a5      	cmp	r5, r4
 8008ac8:	d105      	bne.n	8008ad6 <__libc_init_array+0x2e>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ad0:	4798      	blx	r3
 8008ad2:	3501      	adds	r5, #1
 8008ad4:	e7ee      	b.n	8008ab4 <__libc_init_array+0xc>
 8008ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ada:	4798      	blx	r3
 8008adc:	3501      	adds	r5, #1
 8008ade:	e7f2      	b.n	8008ac6 <__libc_init_array+0x1e>
 8008ae0:	0800909c 	.word	0x0800909c
 8008ae4:	0800909c 	.word	0x0800909c
 8008ae8:	0800909c 	.word	0x0800909c
 8008aec:	080090a0 	.word	0x080090a0

08008af0 <memcpy>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	1e43      	subs	r3, r0, #1
 8008af4:	440a      	add	r2, r1
 8008af6:	4291      	cmp	r1, r2
 8008af8:	d100      	bne.n	8008afc <memcpy+0xc>
 8008afa:	bd10      	pop	{r4, pc}
 8008afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b04:	e7f7      	b.n	8008af6 <memcpy+0x6>

08008b06 <memset>:
 8008b06:	4402      	add	r2, r0
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d100      	bne.n	8008b10 <memset+0xa>
 8008b0e:	4770      	bx	lr
 8008b10:	f803 1b01 	strb.w	r1, [r3], #1
 8008b14:	e7f9      	b.n	8008b0a <memset+0x4>
	...

08008b18 <_init>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr

08008b24 <_fini>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	bf00      	nop
 8008b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2a:	bc08      	pop	{r3}
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	4770      	bx	lr
